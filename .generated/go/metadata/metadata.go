// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package metadata

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
type ConsumerGroupExtentStatus int64
const (
  ConsumerGroupExtentStatus_OPEN ConsumerGroupExtentStatus = 0
  ConsumerGroupExtentStatus_CONSUMED ConsumerGroupExtentStatus = 1
  ConsumerGroupExtentStatus_DELETED ConsumerGroupExtentStatus = 2
)

func (p ConsumerGroupExtentStatus) String() string {
  switch p {
  case ConsumerGroupExtentStatus_OPEN: return "OPEN"
  case ConsumerGroupExtentStatus_CONSUMED: return "CONSUMED"
  case ConsumerGroupExtentStatus_DELETED: return "DELETED"
  }
  return "<UNSET>"
}

func ConsumerGroupExtentStatusFromString(s string) (ConsumerGroupExtentStatus, error) {
  switch s {
  case "OPEN": return ConsumerGroupExtentStatus_OPEN, nil 
  case "CONSUMED": return ConsumerGroupExtentStatus_CONSUMED, nil 
  case "DELETED": return ConsumerGroupExtentStatus_DELETED, nil 
  }
  return ConsumerGroupExtentStatus(0), fmt.Errorf("not a valid ConsumerGroupExtentStatus string")
}


func ConsumerGroupExtentStatusPtr(v ConsumerGroupExtentStatus) *ConsumerGroupExtentStatus { return &v }

func (p ConsumerGroupExtentStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConsumerGroupExtentStatus) UnmarshalText(text []byte) error {
q, err := ConsumerGroupExtentStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConsumerGroupExtentStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConsumerGroupExtentStatus(v)
return nil
}

func (p * ConsumerGroupExtentStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type HostType int64
const (
  HostType_UNKNOWN HostType = -1
  HostType_HOST HostType = 0
  HostType_UUID HostType = 1
)

func (p HostType) String() string {
  switch p {
  case HostType_UNKNOWN: return "UNKNOWN"
  case HostType_HOST: return "HOST"
  case HostType_UUID: return "UUID"
  }
  return "<UNSET>"
}

func HostTypeFromString(s string) (HostType, error) {
  switch s {
  case "UNKNOWN": return HostType_UNKNOWN, nil 
  case "HOST": return HostType_HOST, nil 
  case "UUID": return HostType_UUID, nil 
  }
  return HostType(0), fmt.Errorf("not a valid HostType string")
}


func HostTypePtr(v HostType) *HostType { return &v }

func (p HostType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *HostType) UnmarshalText(text []byte) error {
q, err := HostTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *HostType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = HostType(v)
return nil
}

func (p * HostType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Message
type IllegalStateError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewIllegalStateError() *IllegalStateError {
  return &IllegalStateError{}
}


func (p *IllegalStateError) GetMessage() string {
  return p.Message
}
func (p *IllegalStateError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *IllegalStateError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IllegalStateError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IllegalStateError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IllegalStateError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *IllegalStateError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IllegalStateError(%+v)", *p)
}

func (p *IllegalStateError) Error() string {
  return p.String()
}

// Attributes:
//  - DestinationUUID
//  - DLQPurgeBefore
//  - DLQMergeBefore
type UpdateDestinationDLQCursorsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  DLQPurgeBefore *int64 `thrift:"dLQPurgeBefore,2" db:"dLQPurgeBefore" json:"dLQPurgeBefore,omitempty"`
  DLQMergeBefore *int64 `thrift:"dLQMergeBefore,3" db:"dLQMergeBefore" json:"dLQMergeBefore,omitempty"`
}

func NewUpdateDestinationDLQCursorsRequest() *UpdateDestinationDLQCursorsRequest {
  return &UpdateDestinationDLQCursorsRequest{}
}

var UpdateDestinationDLQCursorsRequest_DestinationUUID_DEFAULT string
func (p *UpdateDestinationDLQCursorsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return UpdateDestinationDLQCursorsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var UpdateDestinationDLQCursorsRequest_DLQPurgeBefore_DEFAULT int64
func (p *UpdateDestinationDLQCursorsRequest) GetDLQPurgeBefore() int64 {
  if !p.IsSetDLQPurgeBefore() {
    return UpdateDestinationDLQCursorsRequest_DLQPurgeBefore_DEFAULT
  }
return *p.DLQPurgeBefore
}
var UpdateDestinationDLQCursorsRequest_DLQMergeBefore_DEFAULT int64
func (p *UpdateDestinationDLQCursorsRequest) GetDLQMergeBefore() int64 {
  if !p.IsSetDLQMergeBefore() {
    return UpdateDestinationDLQCursorsRequest_DLQMergeBefore_DEFAULT
  }
return *p.DLQMergeBefore
}
func (p *UpdateDestinationDLQCursorsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *UpdateDestinationDLQCursorsRequest) IsSetDLQPurgeBefore() bool {
  return p.DLQPurgeBefore != nil
}

func (p *UpdateDestinationDLQCursorsRequest) IsSetDLQMergeBefore() bool {
  return p.DLQMergeBefore != nil
}

func (p *UpdateDestinationDLQCursorsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateDestinationDLQCursorsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *UpdateDestinationDLQCursorsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DLQPurgeBefore = &v
}
  return nil
}

func (p *UpdateDestinationDLQCursorsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DLQMergeBefore = &v
}
  return nil
}

func (p *UpdateDestinationDLQCursorsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDestinationDLQCursorsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateDestinationDLQCursorsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationDLQCursorsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDLQPurgeBefore() {
    if err := oprot.WriteFieldBegin("dLQPurgeBefore", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dLQPurgeBefore: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DLQPurgeBefore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dLQPurgeBefore (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dLQPurgeBefore: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationDLQCursorsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDLQMergeBefore() {
    if err := oprot.WriteFieldBegin("dLQMergeBefore", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dLQMergeBefore: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DLQMergeBefore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dLQMergeBefore (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dLQMergeBefore: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationDLQCursorsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateDestinationDLQCursorsRequest(%+v)", *p)
}

// Attributes:
//  - UUID
//  - TtlSeconds
type DeleteDestinationUUIDRequest struct {
  UUID *string `thrift:"UUID,1" db:"UUID" json:"UUID,omitempty"`
  TtlSeconds *int32 `thrift:"ttlSeconds,2" db:"ttlSeconds" json:"ttlSeconds,omitempty"`
}

func NewDeleteDestinationUUIDRequest() *DeleteDestinationUUIDRequest {
  return &DeleteDestinationUUIDRequest{}
}

var DeleteDestinationUUIDRequest_UUID_DEFAULT string
func (p *DeleteDestinationUUIDRequest) GetUUID() string {
  if !p.IsSetUUID() {
    return DeleteDestinationUUIDRequest_UUID_DEFAULT
  }
return *p.UUID
}
var DeleteDestinationUUIDRequest_TtlSeconds_DEFAULT int32
func (p *DeleteDestinationUUIDRequest) GetTtlSeconds() int32 {
  if !p.IsSetTtlSeconds() {
    return DeleteDestinationUUIDRequest_TtlSeconds_DEFAULT
  }
return *p.TtlSeconds
}
func (p *DeleteDestinationUUIDRequest) IsSetUUID() bool {
  return p.UUID != nil
}

func (p *DeleteDestinationUUIDRequest) IsSetTtlSeconds() bool {
  return p.TtlSeconds != nil
}

func (p *DeleteDestinationUUIDRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteDestinationUUIDRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = &v
}
  return nil
}

func (p *DeleteDestinationUUIDRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TtlSeconds = &v
}
  return nil
}

func (p *DeleteDestinationUUIDRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteDestinationUUIDRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteDestinationUUIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUUID() {
    if err := oprot.WriteFieldBegin("UUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:UUID: ", p), err) }
    if err := oprot.WriteString(string(*p.UUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.UUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:UUID: ", p), err) }
  }
  return err
}

func (p *DeleteDestinationUUIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTtlSeconds() {
    if err := oprot.WriteFieldBegin("ttlSeconds", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttlSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.TtlSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttlSeconds (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttlSeconds: ", p), err) }
  }
  return err
}

func (p *DeleteDestinationUUIDRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteDestinationUUIDRequest(%+v)", *p)
}

//  * UUID type means getting the host information from uuit_to_hostaddr table, which contains history data
// *
// 
// Attributes:
//  - HostName
//  - HostAddr
//  - HostUUID
type HostDescription struct {
  HostName *string `thrift:"hostName,1" db:"hostName" json:"hostName,omitempty"`
  HostAddr *string `thrift:"hostAddr,2" db:"hostAddr" json:"hostAddr,omitempty"`
  HostUUID *string `thrift:"hostUUID,3" db:"hostUUID" json:"hostUUID,omitempty"`
}

func NewHostDescription() *HostDescription {
  return &HostDescription{}
}

var HostDescription_HostName_DEFAULT string
func (p *HostDescription) GetHostName() string {
  if !p.IsSetHostName() {
    return HostDescription_HostName_DEFAULT
  }
return *p.HostName
}
var HostDescription_HostAddr_DEFAULT string
func (p *HostDescription) GetHostAddr() string {
  if !p.IsSetHostAddr() {
    return HostDescription_HostAddr_DEFAULT
  }
return *p.HostAddr
}
var HostDescription_HostUUID_DEFAULT string
func (p *HostDescription) GetHostUUID() string {
  if !p.IsSetHostUUID() {
    return HostDescription_HostUUID_DEFAULT
  }
return *p.HostUUID
}
func (p *HostDescription) IsSetHostName() bool {
  return p.HostName != nil
}

func (p *HostDescription) IsSetHostAddr() bool {
  return p.HostAddr != nil
}

func (p *HostDescription) IsSetHostUUID() bool {
  return p.HostUUID != nil
}

func (p *HostDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostName = &v
}
  return nil
}

func (p *HostDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostAddr = &v
}
  return nil
}

func (p *HostDescription)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HostUUID = &v
}
  return nil
}

func (p *HostDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostName() {
    if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostName: ", p), err) }
    if err := oprot.WriteString(string(*p.HostName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostName: ", p), err) }
  }
  return err
}

func (p *HostDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAddr() {
    if err := oprot.WriteFieldBegin("hostAddr", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostAddr: ", p), err) }
    if err := oprot.WriteString(string(*p.HostAddr)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostAddr (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostAddr: ", p), err) }
  }
  return err
}

func (p *HostDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostUUID() {
    if err := oprot.WriteFieldBegin("hostUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.HostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostUUID: ", p), err) }
  }
  return err
}

func (p *HostDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostDescription(%+v)", *p)
}

// Attributes:
//  - HostType
//  - PageToken
//  - Limit
type ListHostsRequest struct {
  HostType *HostType `thrift:"hostType,1" db:"hostType" json:"hostType,omitempty"`
  PageToken []byte `thrift:"pageToken,2" db:"pageToken" json:"pageToken,omitempty"`
  Limit *int64 `thrift:"limit,3" db:"limit" json:"limit,omitempty"`
}

func NewListHostsRequest() *ListHostsRequest {
  return &ListHostsRequest{}
}

var ListHostsRequest_HostType_DEFAULT HostType
func (p *ListHostsRequest) GetHostType() HostType {
  if !p.IsSetHostType() {
    return ListHostsRequest_HostType_DEFAULT
  }
return *p.HostType
}
var ListHostsRequest_PageToken_DEFAULT []byte

func (p *ListHostsRequest) GetPageToken() []byte {
  return p.PageToken
}
var ListHostsRequest_Limit_DEFAULT int64
func (p *ListHostsRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return ListHostsRequest_Limit_DEFAULT
  }
return *p.Limit
}
func (p *ListHostsRequest) IsSetHostType() bool {
  return p.HostType != nil
}

func (p *ListHostsRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ListHostsRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *ListHostsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := HostType(v)
  p.HostType = &temp
}
  return nil
}

func (p *ListHostsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ListHostsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *ListHostsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListHostsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostType() {
    if err := oprot.WriteFieldBegin("hostType", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.HostType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostType (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostType: ", p), err) }
  }
  return err
}

func (p *ListHostsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageToken: ", p), err) }
  }
  return err
}

func (p *ListHostsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  }
  return err
}

func (p *ListHostsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsRequest(%+v)", *p)
}

// Attributes:
//  - Hosts
//  - NextPageToken
type ListHostsResult_ struct {
  Hosts []*HostDescription `thrift:"hosts,1" db:"hosts" json:"hosts,omitempty"`
  NextPageToken []byte `thrift:"nextPageToken,2" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewListHostsResult_() *ListHostsResult_ {
  return &ListHostsResult_{}
}

var ListHostsResult__Hosts_DEFAULT []*HostDescription

func (p *ListHostsResult_) GetHosts() []*HostDescription {
  return p.Hosts
}
var ListHostsResult__NextPageToken_DEFAULT []byte

func (p *ListHostsResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ListHostsResult_) IsSetHosts() bool {
  return p.Hosts != nil
}

func (p *ListHostsResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ListHostsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListHostsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostDescription, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &HostDescription{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Hosts = append(p.Hosts, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListHostsResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ListHostsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListHostsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHosts() {
    if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hosts: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Hosts {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hosts: ", p), err) }
  }
  return err
}

func (p *ListHostsResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ListHostsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListHostsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - DestinationUUID
//  - ConsumerGroupUUID
type ReadConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,3" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,4" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
}

func NewReadConsumerGroupRequest() *ReadConsumerGroupRequest {
  return &ReadConsumerGroupRequest{}
}

var ReadConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *ReadConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return ReadConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *ReadConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var ReadConsumerGroupRequest_DestinationUUID_DEFAULT string
func (p *ReadConsumerGroupRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReadConsumerGroupRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReadConsumerGroupRequest_ConsumerGroupUUID_DEFAULT string
func (p *ReadConsumerGroupRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ReadConsumerGroupRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
func (p *ReadConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *ReadConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *ReadConsumerGroupRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *ReadConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *ReadConsumerGroupRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - EntityUUID
//  - EntityName
//  - EntityType
//  - PageToken
//  - Limit
type ListEntityOpsRequest struct {
  EntityUUID *string `thrift:"entityUUID,1" db:"entityUUID" json:"entityUUID,omitempty"`
  EntityName *string `thrift:"entityName,2" db:"entityName" json:"entityName,omitempty"`
  EntityType *string `thrift:"entityType,3" db:"entityType" json:"entityType,omitempty"`
  PageToken []byte `thrift:"pageToken,4" db:"pageToken" json:"pageToken,omitempty"`
  Limit *int64 `thrift:"limit,5" db:"limit" json:"limit,omitempty"`
}

func NewListEntityOpsRequest() *ListEntityOpsRequest {
  return &ListEntityOpsRequest{}
}

var ListEntityOpsRequest_EntityUUID_DEFAULT string
func (p *ListEntityOpsRequest) GetEntityUUID() string {
  if !p.IsSetEntityUUID() {
    return ListEntityOpsRequest_EntityUUID_DEFAULT
  }
return *p.EntityUUID
}
var ListEntityOpsRequest_EntityName_DEFAULT string
func (p *ListEntityOpsRequest) GetEntityName() string {
  if !p.IsSetEntityName() {
    return ListEntityOpsRequest_EntityName_DEFAULT
  }
return *p.EntityName
}
var ListEntityOpsRequest_EntityType_DEFAULT string
func (p *ListEntityOpsRequest) GetEntityType() string {
  if !p.IsSetEntityType() {
    return ListEntityOpsRequest_EntityType_DEFAULT
  }
return *p.EntityType
}
var ListEntityOpsRequest_PageToken_DEFAULT []byte

func (p *ListEntityOpsRequest) GetPageToken() []byte {
  return p.PageToken
}
var ListEntityOpsRequest_Limit_DEFAULT int64
func (p *ListEntityOpsRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return ListEntityOpsRequest_Limit_DEFAULT
  }
return *p.Limit
}
func (p *ListEntityOpsRequest) IsSetEntityUUID() bool {
  return p.EntityUUID != nil
}

func (p *ListEntityOpsRequest) IsSetEntityName() bool {
  return p.EntityName != nil
}

func (p *ListEntityOpsRequest) IsSetEntityType() bool {
  return p.EntityType != nil
}

func (p *ListEntityOpsRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ListEntityOpsRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *ListEntityOpsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEntityOpsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EntityUUID = &v
}
  return nil
}

func (p *ListEntityOpsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EntityName = &v
}
  return nil
}

func (p *ListEntityOpsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EntityType = &v
}
  return nil
}

func (p *ListEntityOpsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ListEntityOpsRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *ListEntityOpsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListEntityOpsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEntityOpsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityUUID() {
    if err := oprot.WriteFieldBegin("entityUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.EntityUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.entityUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityUUID: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityName() {
    if err := oprot.WriteFieldBegin("entityName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityName: ", p), err) }
    if err := oprot.WriteString(string(*p.EntityName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.entityName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityName: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityType() {
    if err := oprot.WriteFieldBegin("entityType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityType: ", p), err) }
    if err := oprot.WriteString(string(*p.EntityType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.entityType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityType: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageToken: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEntityOpsRequest(%+v)", *p)
}

// Attributes:
//  - EntityOps
//  - NextPageToken
type ListEntityOpsResult_ struct {
  EntityOps []*shared.EntityOpsDescription `thrift:"entityOps,1" db:"entityOps" json:"entityOps,omitempty"`
  NextPageToken []byte `thrift:"nextPageToken,2" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewListEntityOpsResult_() *ListEntityOpsResult_ {
  return &ListEntityOpsResult_{}
}

var ListEntityOpsResult__EntityOps_DEFAULT []*shared.EntityOpsDescription

func (p *ListEntityOpsResult_) GetEntityOps() []*shared.EntityOpsDescription {
  return p.EntityOps
}
var ListEntityOpsResult__NextPageToken_DEFAULT []byte

func (p *ListEntityOpsResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ListEntityOpsResult_) IsSetEntityOps() bool {
  return p.EntityOps != nil
}

func (p *ListEntityOpsResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ListEntityOpsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListEntityOpsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*shared.EntityOpsDescription, 0, size)
  p.EntityOps =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &shared.EntityOpsDescription{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.EntityOps = append(p.EntityOps, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListEntityOpsResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ListEntityOpsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListEntityOpsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListEntityOpsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityOps() {
    if err := oprot.WriteFieldBegin("entityOps", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityOps: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityOps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.EntityOps {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityOps: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ListEntityOpsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListEntityOpsResult_(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - Status
//  - AckLevelOffset
//  - OutputHostUUID
//  - StoreUUIDs
//  - ConnectedStoreUUID
//  - AckLevelSeqNo
//  - AckLevelSeqNoRate
//  - ReadLevelOffset
//  - ReadLevelSeqNo
//  - ReadLevelSeqNoRate
//  - WriteTime
type ConsumerGroupExtent struct {
  ExtentUUID *string `thrift:"extentUUID,1" db:"extentUUID" json:"extentUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,2" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  Status *ConsumerGroupExtentStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  AckLevelOffset *int64 `thrift:"ackLevelOffset,4" db:"ackLevelOffset" json:"ackLevelOffset,omitempty"`
  OutputHostUUID *string `thrift:"outputHostUUID,5" db:"outputHostUUID" json:"outputHostUUID,omitempty"`
  StoreUUIDs []string `thrift:"storeUUIDs,6" db:"storeUUIDs" json:"storeUUIDs,omitempty"`
  ConnectedStoreUUID *string `thrift:"connectedStoreUUID,7" db:"connectedStoreUUID" json:"connectedStoreUUID,omitempty"`
  AckLevelSeqNo *int64 `thrift:"ackLevelSeqNo,8" db:"ackLevelSeqNo" json:"ackLevelSeqNo,omitempty"`
  AckLevelSeqNoRate *float64 `thrift:"ackLevelSeqNoRate,9" db:"ackLevelSeqNoRate" json:"ackLevelSeqNoRate,omitempty"`
  ReadLevelOffset *int64 `thrift:"readLevelOffset,10" db:"readLevelOffset" json:"readLevelOffset,omitempty"`
  ReadLevelSeqNo *int64 `thrift:"readLevelSeqNo,11" db:"readLevelSeqNo" json:"readLevelSeqNo,omitempty"`
  ReadLevelSeqNoRate *float64 `thrift:"readLevelSeqNoRate,12" db:"readLevelSeqNoRate" json:"readLevelSeqNoRate,omitempty"`
  WriteTime *int64 `thrift:"writeTime,13" db:"writeTime" json:"writeTime,omitempty"`
}

func NewConsumerGroupExtent() *ConsumerGroupExtent {
  return &ConsumerGroupExtent{}
}

var ConsumerGroupExtent_ExtentUUID_DEFAULT string
func (p *ConsumerGroupExtent) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ConsumerGroupExtent_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ConsumerGroupExtent_ConsumerGroupUUID_DEFAULT string
func (p *ConsumerGroupExtent) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ConsumerGroupExtent_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ConsumerGroupExtent_Status_DEFAULT ConsumerGroupExtentStatus
func (p *ConsumerGroupExtent) GetStatus() ConsumerGroupExtentStatus {
  if !p.IsSetStatus() {
    return ConsumerGroupExtent_Status_DEFAULT
  }
return *p.Status
}
var ConsumerGroupExtent_AckLevelOffset_DEFAULT int64
func (p *ConsumerGroupExtent) GetAckLevelOffset() int64 {
  if !p.IsSetAckLevelOffset() {
    return ConsumerGroupExtent_AckLevelOffset_DEFAULT
  }
return *p.AckLevelOffset
}
var ConsumerGroupExtent_OutputHostUUID_DEFAULT string
func (p *ConsumerGroupExtent) GetOutputHostUUID() string {
  if !p.IsSetOutputHostUUID() {
    return ConsumerGroupExtent_OutputHostUUID_DEFAULT
  }
return *p.OutputHostUUID
}
var ConsumerGroupExtent_StoreUUIDs_DEFAULT []string

func (p *ConsumerGroupExtent) GetStoreUUIDs() []string {
  return p.StoreUUIDs
}
var ConsumerGroupExtent_ConnectedStoreUUID_DEFAULT string
func (p *ConsumerGroupExtent) GetConnectedStoreUUID() string {
  if !p.IsSetConnectedStoreUUID() {
    return ConsumerGroupExtent_ConnectedStoreUUID_DEFAULT
  }
return *p.ConnectedStoreUUID
}
var ConsumerGroupExtent_AckLevelSeqNo_DEFAULT int64
func (p *ConsumerGroupExtent) GetAckLevelSeqNo() int64 {
  if !p.IsSetAckLevelSeqNo() {
    return ConsumerGroupExtent_AckLevelSeqNo_DEFAULT
  }
return *p.AckLevelSeqNo
}
var ConsumerGroupExtent_AckLevelSeqNoRate_DEFAULT float64
func (p *ConsumerGroupExtent) GetAckLevelSeqNoRate() float64 {
  if !p.IsSetAckLevelSeqNoRate() {
    return ConsumerGroupExtent_AckLevelSeqNoRate_DEFAULT
  }
return *p.AckLevelSeqNoRate
}
var ConsumerGroupExtent_ReadLevelOffset_DEFAULT int64
func (p *ConsumerGroupExtent) GetReadLevelOffset() int64 {
  if !p.IsSetReadLevelOffset() {
    return ConsumerGroupExtent_ReadLevelOffset_DEFAULT
  }
return *p.ReadLevelOffset
}
var ConsumerGroupExtent_ReadLevelSeqNo_DEFAULT int64
func (p *ConsumerGroupExtent) GetReadLevelSeqNo() int64 {
  if !p.IsSetReadLevelSeqNo() {
    return ConsumerGroupExtent_ReadLevelSeqNo_DEFAULT
  }
return *p.ReadLevelSeqNo
}
var ConsumerGroupExtent_ReadLevelSeqNoRate_DEFAULT float64
func (p *ConsumerGroupExtent) GetReadLevelSeqNoRate() float64 {
  if !p.IsSetReadLevelSeqNoRate() {
    return ConsumerGroupExtent_ReadLevelSeqNoRate_DEFAULT
  }
return *p.ReadLevelSeqNoRate
}
var ConsumerGroupExtent_WriteTime_DEFAULT int64
func (p *ConsumerGroupExtent) GetWriteTime() int64 {
  if !p.IsSetWriteTime() {
    return ConsumerGroupExtent_WriteTime_DEFAULT
  }
return *p.WriteTime
}
func (p *ConsumerGroupExtent) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ConsumerGroupExtent) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ConsumerGroupExtent) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ConsumerGroupExtent) IsSetAckLevelOffset() bool {
  return p.AckLevelOffset != nil
}

func (p *ConsumerGroupExtent) IsSetOutputHostUUID() bool {
  return p.OutputHostUUID != nil
}

func (p *ConsumerGroupExtent) IsSetStoreUUIDs() bool {
  return p.StoreUUIDs != nil
}

func (p *ConsumerGroupExtent) IsSetConnectedStoreUUID() bool {
  return p.ConnectedStoreUUID != nil
}

func (p *ConsumerGroupExtent) IsSetAckLevelSeqNo() bool {
  return p.AckLevelSeqNo != nil
}

func (p *ConsumerGroupExtent) IsSetAckLevelSeqNoRate() bool {
  return p.AckLevelSeqNoRate != nil
}

func (p *ConsumerGroupExtent) IsSetReadLevelOffset() bool {
  return p.ReadLevelOffset != nil
}

func (p *ConsumerGroupExtent) IsSetReadLevelSeqNo() bool {
  return p.ReadLevelSeqNo != nil
}

func (p *ConsumerGroupExtent) IsSetReadLevelSeqNoRate() bool {
  return p.ReadLevelSeqNoRate != nil
}

func (p *ConsumerGroupExtent) IsSetWriteTime() bool {
  return p.WriteTime != nil
}

func (p *ConsumerGroupExtent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupExtent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConsumerGroupExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AckLevelOffset = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OutputHostUUID = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StoreUUIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.StoreUUIDs = append(p.StoreUUIDs, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerGroupExtent)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ConnectedStoreUUID = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AckLevelSeqNo = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AckLevelSeqNoRate = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ReadLevelOffset = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ReadLevelSeqNo = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ReadLevelSeqNoRate = &v
}
  return nil
}

func (p *ConsumerGroupExtent)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.WriteTime = &v
}
  return nil
}

func (p *ConsumerGroupExtent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupExtent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupExtent) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelOffset() {
    if err := oprot.WriteFieldBegin("ackLevelOffset", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ackLevelOffset: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AckLevelOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelOffset (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ackLevelOffset: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostUUID() {
    if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outputHostUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreUUIDs() {
    if err := oprot.WriteFieldBegin("storeUUIDs", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:storeUUIDs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreUUIDs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StoreUUIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:storeUUIDs: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnectedStoreUUID() {
    if err := oprot.WriteFieldBegin("connectedStoreUUID", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:connectedStoreUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConnectedStoreUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.connectedStoreUUID (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:connectedStoreUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelSeqNo() {
    if err := oprot.WriteFieldBegin("ackLevelSeqNo", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ackLevelSeqNo: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AckLevelSeqNo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNo (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ackLevelSeqNo: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelSeqNoRate() {
    if err := oprot.WriteFieldBegin("ackLevelSeqNoRate", thrift.DOUBLE, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ackLevelSeqNoRate: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.AckLevelSeqNoRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNoRate (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ackLevelSeqNoRate: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelOffset() {
    if err := oprot.WriteFieldBegin("readLevelOffset", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:readLevelOffset: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadLevelOffset)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelOffset (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:readLevelOffset: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelSeqNo() {
    if err := oprot.WriteFieldBegin("readLevelSeqNo", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:readLevelSeqNo: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadLevelSeqNo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNo (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:readLevelSeqNo: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelSeqNoRate() {
    if err := oprot.WriteFieldBegin("readLevelSeqNoRate", thrift.DOUBLE, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:readLevelSeqNoRate: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.ReadLevelSeqNoRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNoRate (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:readLevelSeqNoRate: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetWriteTime() {
    if err := oprot.WriteFieldBegin("writeTime", thrift.I64, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:writeTime: ", p), err) }
    if err := oprot.WriteI64(int64(*p.WriteTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.writeTime (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:writeTime: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupExtent(%+v)", *p)
}

// Attributes:
//  - Status
//  - ExtentUUID
//  - OutputHostUUID
//  - StoreUUIDs
type ConsumerGroupExtentLite struct {
  Status *ConsumerGroupExtentStatus `thrift:"status,1" db:"status" json:"status,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  OutputHostUUID *string `thrift:"outputHostUUID,3" db:"outputHostUUID" json:"outputHostUUID,omitempty"`
  StoreUUIDs []string `thrift:"storeUUIDs,4" db:"storeUUIDs" json:"storeUUIDs,omitempty"`
}

func NewConsumerGroupExtentLite() *ConsumerGroupExtentLite {
  return &ConsumerGroupExtentLite{}
}

var ConsumerGroupExtentLite_Status_DEFAULT ConsumerGroupExtentStatus
func (p *ConsumerGroupExtentLite) GetStatus() ConsumerGroupExtentStatus {
  if !p.IsSetStatus() {
    return ConsumerGroupExtentLite_Status_DEFAULT
  }
return *p.Status
}
var ConsumerGroupExtentLite_ExtentUUID_DEFAULT string
func (p *ConsumerGroupExtentLite) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ConsumerGroupExtentLite_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ConsumerGroupExtentLite_OutputHostUUID_DEFAULT string
func (p *ConsumerGroupExtentLite) GetOutputHostUUID() string {
  if !p.IsSetOutputHostUUID() {
    return ConsumerGroupExtentLite_OutputHostUUID_DEFAULT
  }
return *p.OutputHostUUID
}
var ConsumerGroupExtentLite_StoreUUIDs_DEFAULT []string

func (p *ConsumerGroupExtentLite) GetStoreUUIDs() []string {
  return p.StoreUUIDs
}
func (p *ConsumerGroupExtentLite) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ConsumerGroupExtentLite) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ConsumerGroupExtentLite) IsSetOutputHostUUID() bool {
  return p.OutputHostUUID != nil
}

func (p *ConsumerGroupExtentLite) IsSetStoreUUIDs() bool {
  return p.StoreUUIDs != nil
}

func (p *ConsumerGroupExtentLite) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupExtentLite)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ConsumerGroupExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ConsumerGroupExtentLite)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ConsumerGroupExtentLite)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OutputHostUUID = &v
}
  return nil
}

func (p *ConsumerGroupExtentLite)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StoreUUIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.StoreUUIDs = append(p.StoreUUIDs, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerGroupExtentLite) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupExtentLite"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupExtentLite) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtentLite) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtentLite) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostUUID() {
    if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outputHostUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtentLite) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreUUIDs() {
    if err := oprot.WriteFieldBegin("storeUUIDs", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:storeUUIDs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreUUIDs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StoreUUIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:storeUUIDs: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtentLite) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupExtentLite(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - Status
//  - ArchivalLocation
//  - RemoteExtentPrimaryStore
type UpdateExtentStatsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  Status *shared.ExtentStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  ArchivalLocation *string `thrift:"archivalLocation,4" db:"archivalLocation" json:"archivalLocation,omitempty"`
  RemoteExtentPrimaryStore *string `thrift:"remoteExtentPrimaryStore,5" db:"remoteExtentPrimaryStore" json:"remoteExtentPrimaryStore,omitempty"`
}

func NewUpdateExtentStatsRequest() *UpdateExtentStatsRequest {
  return &UpdateExtentStatsRequest{}
}

var UpdateExtentStatsRequest_DestinationUUID_DEFAULT string
func (p *UpdateExtentStatsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return UpdateExtentStatsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var UpdateExtentStatsRequest_ExtentUUID_DEFAULT string
func (p *UpdateExtentStatsRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return UpdateExtentStatsRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var UpdateExtentStatsRequest_Status_DEFAULT shared.ExtentStatus
func (p *UpdateExtentStatsRequest) GetStatus() shared.ExtentStatus {
  if !p.IsSetStatus() {
    return UpdateExtentStatsRequest_Status_DEFAULT
  }
return *p.Status
}
var UpdateExtentStatsRequest_ArchivalLocation_DEFAULT string
func (p *UpdateExtentStatsRequest) GetArchivalLocation() string {
  if !p.IsSetArchivalLocation() {
    return UpdateExtentStatsRequest_ArchivalLocation_DEFAULT
  }
return *p.ArchivalLocation
}
var UpdateExtentStatsRequest_RemoteExtentPrimaryStore_DEFAULT string
func (p *UpdateExtentStatsRequest) GetRemoteExtentPrimaryStore() string {
  if !p.IsSetRemoteExtentPrimaryStore() {
    return UpdateExtentStatsRequest_RemoteExtentPrimaryStore_DEFAULT
  }
return *p.RemoteExtentPrimaryStore
}
func (p *UpdateExtentStatsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *UpdateExtentStatsRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *UpdateExtentStatsRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *UpdateExtentStatsRequest) IsSetArchivalLocation() bool {
  return p.ArchivalLocation != nil
}

func (p *UpdateExtentStatsRequest) IsSetRemoteExtentPrimaryStore() bool {
  return p.RemoteExtentPrimaryStore != nil
}

func (p *UpdateExtentStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateExtentStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *UpdateExtentStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *UpdateExtentStatsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := shared.ExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *UpdateExtentStatsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ArchivalLocation = &v
}
  return nil
}

func (p *UpdateExtentStatsRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RemoteExtentPrimaryStore = &v
}
  return nil
}

func (p *UpdateExtentStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateExtentStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateExtentStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *UpdateExtentStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *UpdateExtentStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *UpdateExtentStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetArchivalLocation() {
    if err := oprot.WriteFieldBegin("archivalLocation", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:archivalLocation: ", p), err) }
    if err := oprot.WriteString(string(*p.ArchivalLocation)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.archivalLocation (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:archivalLocation: ", p), err) }
  }
  return err
}

func (p *UpdateExtentStatsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRemoteExtentPrimaryStore() {
    if err := oprot.WriteFieldBegin("remoteExtentPrimaryStore", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remoteExtentPrimaryStore: ", p), err) }
    if err := oprot.WriteString(string(*p.RemoteExtentPrimaryStore)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remoteExtentPrimaryStore (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remoteExtentPrimaryStore: ", p), err) }
  }
  return err
}

func (p *UpdateExtentStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateExtentStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStats
type UpdateExtentStatsResult_ struct {
  ExtentStats *shared.ExtentStats `thrift:"extentStats,1" db:"extentStats" json:"extentStats,omitempty"`
}

func NewUpdateExtentStatsResult_() *UpdateExtentStatsResult_ {
  return &UpdateExtentStatsResult_{}
}

var UpdateExtentStatsResult__ExtentStats_DEFAULT *shared.ExtentStats
func (p *UpdateExtentStatsResult_) GetExtentStats() *shared.ExtentStats {
  if !p.IsSetExtentStats() {
    return UpdateExtentStatsResult__ExtentStats_DEFAULT
  }
return p.ExtentStats
}
func (p *UpdateExtentStatsResult_) IsSetExtentStats() bool {
  return p.ExtentStats != nil
}

func (p *UpdateExtentStatsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateExtentStatsResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.ExtentStats = &shared.ExtentStats{}
  if err := p.ExtentStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentStats), err)
  }
  return nil
}

func (p *UpdateExtentStatsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateExtentStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateExtentStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentStats() {
    if err := oprot.WriteFieldBegin("extentStats", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStats: ", p), err) }
    if err := p.ExtentStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStats: ", p), err) }
  }
  return err
}

func (p *UpdateExtentStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateExtentStatsResult_(%+v)", *p)
}

// *** Request and Reply structures ****
// 
// Attributes:
//  - DestinationUUID
//  - ExtentUUID
type ReadExtentStatsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
}

func NewReadExtentStatsRequest() *ReadExtentStatsRequest {
  return &ReadExtentStatsRequest{}
}

var ReadExtentStatsRequest_DestinationUUID_DEFAULT string
func (p *ReadExtentStatsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReadExtentStatsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReadExtentStatsRequest_ExtentUUID_DEFAULT string
func (p *ReadExtentStatsRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReadExtentStatsRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
func (p *ReadExtentStatsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReadExtentStatsRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReadExtentStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadExtentStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReadExtentStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReadExtentStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadExtentStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadExtentStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReadExtentStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReadExtentStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadExtentStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStats
type ReadExtentStatsResult_ struct {
  ExtentStats *shared.ExtentStats `thrift:"extentStats,1" db:"extentStats" json:"extentStats,omitempty"`
}

func NewReadExtentStatsResult_() *ReadExtentStatsResult_ {
  return &ReadExtentStatsResult_{}
}

var ReadExtentStatsResult__ExtentStats_DEFAULT *shared.ExtentStats
func (p *ReadExtentStatsResult_) GetExtentStats() *shared.ExtentStats {
  if !p.IsSetExtentStats() {
    return ReadExtentStatsResult__ExtentStats_DEFAULT
  }
return p.ExtentStats
}
func (p *ReadExtentStatsResult_) IsSetExtentStats() bool {
  return p.ExtentStats != nil
}

func (p *ReadExtentStatsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadExtentStatsResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.ExtentStats = &shared.ExtentStats{}
  if err := p.ExtentStats.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtentStats), err)
  }
  return nil
}

func (p *ReadExtentStatsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadExtentStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadExtentStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentStats() {
    if err := oprot.WriteFieldBegin("extentStats", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStats: ", p), err) }
    if err := p.ExtentStats.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtentStats), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStats: ", p), err) }
  }
  return err
}

func (p *ReadExtentStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadExtentStatsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - InputHostUUID
//  - Status
type ListInputHostExtentsStatsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  InputHostUUID *string `thrift:"inputHostUUID,2" db:"inputHostUUID" json:"inputHostUUID,omitempty"`
  Status *shared.ExtentStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
}

func NewListInputHostExtentsStatsRequest() *ListInputHostExtentsStatsRequest {
  return &ListInputHostExtentsStatsRequest{}
}

var ListInputHostExtentsStatsRequest_DestinationUUID_DEFAULT string
func (p *ListInputHostExtentsStatsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ListInputHostExtentsStatsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ListInputHostExtentsStatsRequest_InputHostUUID_DEFAULT string
func (p *ListInputHostExtentsStatsRequest) GetInputHostUUID() string {
  if !p.IsSetInputHostUUID() {
    return ListInputHostExtentsStatsRequest_InputHostUUID_DEFAULT
  }
return *p.InputHostUUID
}
var ListInputHostExtentsStatsRequest_Status_DEFAULT shared.ExtentStatus
func (p *ListInputHostExtentsStatsRequest) GetStatus() shared.ExtentStatus {
  if !p.IsSetStatus() {
    return ListInputHostExtentsStatsRequest_Status_DEFAULT
  }
return *p.Status
}
func (p *ListInputHostExtentsStatsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ListInputHostExtentsStatsRequest) IsSetInputHostUUID() bool {
  return p.InputHostUUID != nil
}

func (p *ListInputHostExtentsStatsRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ListInputHostExtentsStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListInputHostExtentsStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ListInputHostExtentsStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InputHostUUID = &v
}
  return nil
}

func (p *ListInputHostExtentsStatsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := shared.ExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ListInputHostExtentsStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListInputHostExtentsStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListInputHostExtentsStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ListInputHostExtentsStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInputHostUUID() {
    if err := oprot.WriteFieldBegin("inputHostUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.InputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inputHostUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inputHostUUID: ", p), err) }
  }
  return err
}

func (p *ListInputHostExtentsStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *ListInputHostExtentsStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListInputHostExtentsStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStatsList
type ListInputHostExtentsStatsResult_ struct {
  ExtentStatsList []*shared.ExtentStats `thrift:"extentStatsList,1" db:"extentStatsList" json:"extentStatsList,omitempty"`
}

func NewListInputHostExtentsStatsResult_() *ListInputHostExtentsStatsResult_ {
  return &ListInputHostExtentsStatsResult_{}
}

var ListInputHostExtentsStatsResult__ExtentStatsList_DEFAULT []*shared.ExtentStats

func (p *ListInputHostExtentsStatsResult_) GetExtentStatsList() []*shared.ExtentStats {
  return p.ExtentStatsList
}
func (p *ListInputHostExtentsStatsResult_) IsSetExtentStatsList() bool {
  return p.ExtentStatsList != nil
}

func (p *ListInputHostExtentsStatsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListInputHostExtentsStatsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*shared.ExtentStats, 0, size)
  p.ExtentStatsList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &shared.ExtentStats{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.ExtentStatsList = append(p.ExtentStatsList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListInputHostExtentsStatsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListInputHostExtentsStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListInputHostExtentsStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentStatsList() {
    if err := oprot.WriteFieldBegin("extentStatsList", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStatsList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtentStatsList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtentStatsList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStatsList: ", p), err) }
  }
  return err
}

func (p *ListInputHostExtentsStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListInputHostExtentsStatsResult_(%+v)", *p)
}

// Attributes:
//  - StoreUUID
//  - Status
//  - ReplicationStatus
type ListStoreExtentsStatsRequest struct {
  StoreUUID *string `thrift:"storeUUID,1" db:"storeUUID" json:"storeUUID,omitempty"`
  Status *shared.ExtentStatus `thrift:"status,2" db:"status" json:"status,omitempty"`
  ReplicationStatus *shared.ExtentReplicaReplicationStatus `thrift:"replicationStatus,3" db:"replicationStatus" json:"replicationStatus,omitempty"`
}

func NewListStoreExtentsStatsRequest() *ListStoreExtentsStatsRequest {
  return &ListStoreExtentsStatsRequest{}
}

var ListStoreExtentsStatsRequest_StoreUUID_DEFAULT string
func (p *ListStoreExtentsStatsRequest) GetStoreUUID() string {
  if !p.IsSetStoreUUID() {
    return ListStoreExtentsStatsRequest_StoreUUID_DEFAULT
  }
return *p.StoreUUID
}
var ListStoreExtentsStatsRequest_Status_DEFAULT shared.ExtentStatus
func (p *ListStoreExtentsStatsRequest) GetStatus() shared.ExtentStatus {
  if !p.IsSetStatus() {
    return ListStoreExtentsStatsRequest_Status_DEFAULT
  }
return *p.Status
}
var ListStoreExtentsStatsRequest_ReplicationStatus_DEFAULT shared.ExtentReplicaReplicationStatus
func (p *ListStoreExtentsStatsRequest) GetReplicationStatus() shared.ExtentReplicaReplicationStatus {
  if !p.IsSetReplicationStatus() {
    return ListStoreExtentsStatsRequest_ReplicationStatus_DEFAULT
  }
return *p.ReplicationStatus
}
func (p *ListStoreExtentsStatsRequest) IsSetStoreUUID() bool {
  return p.StoreUUID != nil
}

func (p *ListStoreExtentsStatsRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ListStoreExtentsStatsRequest) IsSetReplicationStatus() bool {
  return p.ReplicationStatus != nil
}

func (p *ListStoreExtentsStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListStoreExtentsStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StoreUUID = &v
}
  return nil
}

func (p *ListStoreExtentsStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := shared.ExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ListStoreExtentsStatsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := shared.ExtentReplicaReplicationStatus(v)
  p.ReplicationStatus = &temp
}
  return nil
}

func (p *ListStoreExtentsStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListStoreExtentsStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListStoreExtentsStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreUUID() {
    if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storeUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storeUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storeUUID: ", p), err) }
  }
  return err
}

func (p *ListStoreExtentsStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  }
  return err
}

func (p *ListStoreExtentsStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicationStatus() {
    if err := oprot.WriteFieldBegin("replicationStatus", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replicationStatus: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReplicationStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicationStatus (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replicationStatus: ", p), err) }
  }
  return err
}

func (p *ListStoreExtentsStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListStoreExtentsStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentStatsList
type ListStoreExtentsStatsResult_ struct {
  ExtentStatsList []*shared.ExtentStats `thrift:"extentStatsList,1" db:"extentStatsList" json:"extentStatsList,omitempty"`
}

func NewListStoreExtentsStatsResult_() *ListStoreExtentsStatsResult_ {
  return &ListStoreExtentsStatsResult_{}
}

var ListStoreExtentsStatsResult__ExtentStatsList_DEFAULT []*shared.ExtentStats

func (p *ListStoreExtentsStatsResult_) GetExtentStatsList() []*shared.ExtentStats {
  return p.ExtentStatsList
}
func (p *ListStoreExtentsStatsResult_) IsSetExtentStatsList() bool {
  return p.ExtentStatsList != nil
}

func (p *ListStoreExtentsStatsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListStoreExtentsStatsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*shared.ExtentStats, 0, size)
  p.ExtentStatsList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &shared.ExtentStats{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.ExtentStatsList = append(p.ExtentStatsList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListStoreExtentsStatsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListStoreExtentsStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListStoreExtentsStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentStatsList() {
    if err := oprot.WriteFieldBegin("extentStatsList", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentStatsList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExtentStatsList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtentStatsList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentStatsList: ", p), err) }
  }
  return err
}

func (p *ListStoreExtentsStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListStoreExtentsStatsResult_(%+v)", *p)
}

// Attributes:
//  - StoreUUID
//  - ExtentUUID
type ReadStoreExtentReplicaStatsRequest struct {
  StoreUUID *string `thrift:"storeUUID,1" db:"storeUUID" json:"storeUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
}

func NewReadStoreExtentReplicaStatsRequest() *ReadStoreExtentReplicaStatsRequest {
  return &ReadStoreExtentReplicaStatsRequest{}
}

var ReadStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT string
func (p *ReadStoreExtentReplicaStatsRequest) GetStoreUUID() string {
  if !p.IsSetStoreUUID() {
    return ReadStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT
  }
return *p.StoreUUID
}
var ReadStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT string
func (p *ReadStoreExtentReplicaStatsRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReadStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
func (p *ReadStoreExtentReplicaStatsRequest) IsSetStoreUUID() bool {
  return p.StoreUUID != nil
}

func (p *ReadStoreExtentReplicaStatsRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReadStoreExtentReplicaStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadStoreExtentReplicaStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StoreUUID = &v
}
  return nil
}

func (p *ReadStoreExtentReplicaStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReadStoreExtentReplicaStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadStoreExtentReplicaStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadStoreExtentReplicaStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreUUID() {
    if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storeUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storeUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storeUUID: ", p), err) }
  }
  return err
}

func (p *ReadStoreExtentReplicaStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReadStoreExtentReplicaStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadStoreExtentReplicaStatsRequest(%+v)", *p)
}

// Attributes:
//  - Extent
type ReadStoreExtentReplicaStatsResult_ struct {
  Extent *shared.ExtentStats `thrift:"extent,1" db:"extent" json:"extent,omitempty"`
}

func NewReadStoreExtentReplicaStatsResult_() *ReadStoreExtentReplicaStatsResult_ {
  return &ReadStoreExtentReplicaStatsResult_{}
}

var ReadStoreExtentReplicaStatsResult__Extent_DEFAULT *shared.ExtentStats
func (p *ReadStoreExtentReplicaStatsResult_) GetExtent() *shared.ExtentStats {
  if !p.IsSetExtent() {
    return ReadStoreExtentReplicaStatsResult__Extent_DEFAULT
  }
return p.Extent
}
func (p *ReadStoreExtentReplicaStatsResult_) IsSetExtent() bool {
  return p.Extent != nil
}

func (p *ReadStoreExtentReplicaStatsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadStoreExtentReplicaStatsResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.Extent = &shared.ExtentStats{}
  if err := p.Extent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extent), err)
  }
  return nil
}

func (p *ReadStoreExtentReplicaStatsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadStoreExtentReplicaStatsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadStoreExtentReplicaStatsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtent() {
    if err := oprot.WriteFieldBegin("extent", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extent: ", p), err) }
    if err := p.Extent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extent: ", p), err) }
  }
  return err
}

func (p *ReadStoreExtentReplicaStatsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadStoreExtentReplicaStatsResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - CreatedTimeMillis
//  - StatusUpdatedTimeMillis
//  - ExtentUUID
//  - InputHostUUID
//  - StoreUUIDs
//  - ConsumerGroupVisibility
//  - OriginZone
type DestinationExtent struct {
  Status *shared.ExtentStatus `thrift:"status,1" db:"status" json:"status,omitempty"`
  CreatedTimeMillis *int64 `thrift:"createdTimeMillis,2" db:"createdTimeMillis" json:"createdTimeMillis,omitempty"`
  StatusUpdatedTimeMillis *int64 `thrift:"statusUpdatedTimeMillis,3" db:"statusUpdatedTimeMillis" json:"statusUpdatedTimeMillis,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,4" db:"extentUUID" json:"extentUUID,omitempty"`
  InputHostUUID *string `thrift:"inputHostUUID,5" db:"inputHostUUID" json:"inputHostUUID,omitempty"`
  StoreUUIDs []string `thrift:"storeUUIDs,6" db:"storeUUIDs" json:"storeUUIDs,omitempty"`
  // unused fields # 7 to 8
  ConsumerGroupVisibility *string `thrift:"consumerGroupVisibility,9" db:"consumerGroupVisibility" json:"consumerGroupVisibility,omitempty"`
  OriginZone *string `thrift:"originZone,10" db:"originZone" json:"originZone,omitempty"`
}

func NewDestinationExtent() *DestinationExtent {
  return &DestinationExtent{}
}

var DestinationExtent_Status_DEFAULT shared.ExtentStatus
func (p *DestinationExtent) GetStatus() shared.ExtentStatus {
  if !p.IsSetStatus() {
    return DestinationExtent_Status_DEFAULT
  }
return *p.Status
}
var DestinationExtent_CreatedTimeMillis_DEFAULT int64
func (p *DestinationExtent) GetCreatedTimeMillis() int64 {
  if !p.IsSetCreatedTimeMillis() {
    return DestinationExtent_CreatedTimeMillis_DEFAULT
  }
return *p.CreatedTimeMillis
}
var DestinationExtent_StatusUpdatedTimeMillis_DEFAULT int64
func (p *DestinationExtent) GetStatusUpdatedTimeMillis() int64 {
  if !p.IsSetStatusUpdatedTimeMillis() {
    return DestinationExtent_StatusUpdatedTimeMillis_DEFAULT
  }
return *p.StatusUpdatedTimeMillis
}
var DestinationExtent_ExtentUUID_DEFAULT string
func (p *DestinationExtent) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return DestinationExtent_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var DestinationExtent_InputHostUUID_DEFAULT string
func (p *DestinationExtent) GetInputHostUUID() string {
  if !p.IsSetInputHostUUID() {
    return DestinationExtent_InputHostUUID_DEFAULT
  }
return *p.InputHostUUID
}
var DestinationExtent_StoreUUIDs_DEFAULT []string

func (p *DestinationExtent) GetStoreUUIDs() []string {
  return p.StoreUUIDs
}
var DestinationExtent_ConsumerGroupVisibility_DEFAULT string
func (p *DestinationExtent) GetConsumerGroupVisibility() string {
  if !p.IsSetConsumerGroupVisibility() {
    return DestinationExtent_ConsumerGroupVisibility_DEFAULT
  }
return *p.ConsumerGroupVisibility
}
var DestinationExtent_OriginZone_DEFAULT string
func (p *DestinationExtent) GetOriginZone() string {
  if !p.IsSetOriginZone() {
    return DestinationExtent_OriginZone_DEFAULT
  }
return *p.OriginZone
}
func (p *DestinationExtent) IsSetStatus() bool {
  return p.Status != nil
}

func (p *DestinationExtent) IsSetCreatedTimeMillis() bool {
  return p.CreatedTimeMillis != nil
}

func (p *DestinationExtent) IsSetStatusUpdatedTimeMillis() bool {
  return p.StatusUpdatedTimeMillis != nil
}

func (p *DestinationExtent) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *DestinationExtent) IsSetInputHostUUID() bool {
  return p.InputHostUUID != nil
}

func (p *DestinationExtent) IsSetStoreUUIDs() bool {
  return p.StoreUUIDs != nil
}

func (p *DestinationExtent) IsSetConsumerGroupVisibility() bool {
  return p.ConsumerGroupVisibility != nil
}

func (p *DestinationExtent) IsSetOriginZone() bool {
  return p.OriginZone != nil
}

func (p *DestinationExtent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationExtent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := shared.ExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *DestinationExtent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTimeMillis = &v
}
  return nil
}

func (p *DestinationExtent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StatusUpdatedTimeMillis = &v
}
  return nil
}

func (p *DestinationExtent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *DestinationExtent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.InputHostUUID = &v
}
  return nil
}

func (p *DestinationExtent)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StoreUUIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.StoreUUIDs = append(p.StoreUUIDs, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DestinationExtent)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ConsumerGroupVisibility = &v
}
  return nil
}

func (p *DestinationExtent)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.OriginZone = &v
}
  return nil
}

func (p *DestinationExtent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationExtent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationExtent) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedTimeMillis() {
    if err := oprot.WriteFieldBegin("createdTimeMillis", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTimeMillis: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreatedTimeMillis)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createdTimeMillis (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTimeMillis: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatusUpdatedTimeMillis() {
    if err := oprot.WriteFieldBegin("statusUpdatedTimeMillis", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:statusUpdatedTimeMillis: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StatusUpdatedTimeMillis)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.statusUpdatedTimeMillis (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:statusUpdatedTimeMillis: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extentUUID: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetInputHostUUID() {
    if err := oprot.WriteFieldBegin("inputHostUUID", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.InputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inputHostUUID (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inputHostUUID: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreUUIDs() {
    if err := oprot.WriteFieldBegin("storeUUIDs", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:storeUUIDs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StoreUUIDs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StoreUUIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:storeUUIDs: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupVisibility() {
    if err := oprot.WriteFieldBegin("consumerGroupVisibility", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:consumerGroupVisibility: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupVisibility)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupVisibility (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:consumerGroupVisibility: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetOriginZone() {
    if err := oprot.WriteFieldBegin("originZone", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:originZone: ", p), err) }
    if err := oprot.WriteString(string(*p.OriginZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.originZone (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:originZone: ", p), err) }
  }
  return err
}

func (p *DestinationExtent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationExtent(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - Status
//  - PageToken
//  - Limit
type ListDestinationExtentsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  Status *shared.ExtentStatus `thrift:"status,2" db:"status" json:"status,omitempty"`
  // unused fields # 3 to 9
  PageToken []byte `thrift:"pageToken,10" db:"pageToken" json:"pageToken,omitempty"`
  Limit *int64 `thrift:"limit,11" db:"limit" json:"limit,omitempty"`
}

func NewListDestinationExtentsRequest() *ListDestinationExtentsRequest {
  return &ListDestinationExtentsRequest{}
}

var ListDestinationExtentsRequest_DestinationUUID_DEFAULT string
func (p *ListDestinationExtentsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ListDestinationExtentsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ListDestinationExtentsRequest_Status_DEFAULT shared.ExtentStatus
func (p *ListDestinationExtentsRequest) GetStatus() shared.ExtentStatus {
  if !p.IsSetStatus() {
    return ListDestinationExtentsRequest_Status_DEFAULT
  }
return *p.Status
}
var ListDestinationExtentsRequest_PageToken_DEFAULT []byte

func (p *ListDestinationExtentsRequest) GetPageToken() []byte {
  return p.PageToken
}
var ListDestinationExtentsRequest_Limit_DEFAULT int64
func (p *ListDestinationExtentsRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return ListDestinationExtentsRequest_Limit_DEFAULT
  }
return *p.Limit
}
func (p *ListDestinationExtentsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ListDestinationExtentsRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ListDestinationExtentsRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ListDestinationExtentsRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *ListDestinationExtentsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListDestinationExtentsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ListDestinationExtentsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := shared.ExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ListDestinationExtentsRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ListDestinationExtentsRequest)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *ListDestinationExtentsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListDestinationExtentsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListDestinationExtentsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ListDestinationExtentsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  }
  return err
}

func (p *ListDestinationExtentsRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pageToken: ", p), err) }
  }
  return err
}

func (p *ListDestinationExtentsRequest) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:limit: ", p), err) }
  }
  return err
}

func (p *ListDestinationExtentsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListDestinationExtentsRequest(%+v)", *p)
}

// Attributes:
//  - Extents
//  - NextPageToken
type ListDestinationExtentsResult_ struct {
  Extents []*DestinationExtent `thrift:"extents,1" db:"extents" json:"extents,omitempty"`
  // unused fields # 2 to 9
  NextPageToken []byte `thrift:"nextPageToken,10" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewListDestinationExtentsResult_() *ListDestinationExtentsResult_ {
  return &ListDestinationExtentsResult_{}
}

var ListDestinationExtentsResult__Extents_DEFAULT []*DestinationExtent

func (p *ListDestinationExtentsResult_) GetExtents() []*DestinationExtent {
  return p.Extents
}
var ListDestinationExtentsResult__NextPageToken_DEFAULT []byte

func (p *ListDestinationExtentsResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ListDestinationExtentsResult_) IsSetExtents() bool {
  return p.Extents != nil
}

func (p *ListDestinationExtentsResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ListDestinationExtentsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListDestinationExtentsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DestinationExtent, 0, size)
  p.Extents =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &DestinationExtent{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Extents = append(p.Extents, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListDestinationExtentsResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ListDestinationExtentsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListDestinationExtentsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListDestinationExtentsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtents() {
    if err := oprot.WriteFieldBegin("extents", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extents: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extents)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extents {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extents: ", p), err) }
  }
  return err
}

func (p *ListDestinationExtentsResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ListDestinationExtentsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListDestinationExtentsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
type SealExtentRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
}

func NewSealExtentRequest() *SealExtentRequest {
  return &SealExtentRequest{}
}

var SealExtentRequest_DestinationUUID_DEFAULT string
func (p *SealExtentRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return SealExtentRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var SealExtentRequest_ExtentUUID_DEFAULT string
func (p *SealExtentRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return SealExtentRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
func (p *SealExtentRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *SealExtentRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *SealExtentRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SealExtentRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *SealExtentRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *SealExtentRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SealExtentRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SealExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *SealExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *SealExtentRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SealExtentRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ReplicaStats
//  - StoreUUID
//  - ReplicationStatus
type UpdateStoreExtentReplicaStatsRequest struct {
  ExtentUUID *string `thrift:"extentUUID,1" db:"extentUUID" json:"extentUUID,omitempty"`
  ReplicaStats []*shared.ExtentReplicaStats `thrift:"replicaStats,2" db:"replicaStats" json:"replicaStats,omitempty"`
  StoreUUID *string `thrift:"storeUUID,3" db:"storeUUID" json:"storeUUID,omitempty"`
  ReplicationStatus *shared.ExtentReplicaReplicationStatus `thrift:"replicationStatus,4" db:"replicationStatus" json:"replicationStatus,omitempty"`
}

func NewUpdateStoreExtentReplicaStatsRequest() *UpdateStoreExtentReplicaStatsRequest {
  return &UpdateStoreExtentReplicaStatsRequest{}
}

var UpdateStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT string
func (p *UpdateStoreExtentReplicaStatsRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return UpdateStoreExtentReplicaStatsRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var UpdateStoreExtentReplicaStatsRequest_ReplicaStats_DEFAULT []*shared.ExtentReplicaStats

func (p *UpdateStoreExtentReplicaStatsRequest) GetReplicaStats() []*shared.ExtentReplicaStats {
  return p.ReplicaStats
}
var UpdateStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT string
func (p *UpdateStoreExtentReplicaStatsRequest) GetStoreUUID() string {
  if !p.IsSetStoreUUID() {
    return UpdateStoreExtentReplicaStatsRequest_StoreUUID_DEFAULT
  }
return *p.StoreUUID
}
var UpdateStoreExtentReplicaStatsRequest_ReplicationStatus_DEFAULT shared.ExtentReplicaReplicationStatus
func (p *UpdateStoreExtentReplicaStatsRequest) GetReplicationStatus() shared.ExtentReplicaReplicationStatus {
  if !p.IsSetReplicationStatus() {
    return UpdateStoreExtentReplicaStatsRequest_ReplicationStatus_DEFAULT
  }
return *p.ReplicationStatus
}
func (p *UpdateStoreExtentReplicaStatsRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) IsSetReplicaStats() bool {
  return p.ReplicaStats != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) IsSetStoreUUID() bool {
  return p.StoreUUID != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) IsSetReplicationStatus() bool {
  return p.ReplicationStatus != nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*shared.ExtentReplicaStats, 0, size)
  p.ReplicaStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &shared.ExtentReplicaStats{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.ReplicaStats = append(p.ReplicaStats, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StoreUUID = &v
}
  return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := shared.ExtentReplicaReplicationStatus(v)
  p.ReplicationStatus = &temp
}
  return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateStoreExtentReplicaStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err) }
  }
  return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaStats() {
    if err := oprot.WriteFieldBegin("replicaStats", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replicaStats: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReplicaStats)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReplicaStats {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replicaStats: ", p), err) }
  }
  return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreUUID() {
    if err := oprot.WriteFieldBegin("storeUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storeUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.StoreUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storeUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storeUUID: ", p), err) }
  }
  return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicationStatus() {
    if err := oprot.WriteFieldBegin("replicationStatus", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:replicationStatus: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReplicationStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicationStatus (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:replicationStatus: ", p), err) }
  }
  return err
}

func (p *UpdateStoreExtentReplicaStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateStoreExtentReplicaStatsRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - InputHostUUID
//  - ReplicaStats
type UpdateExtentReplicaStatsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  InputHostUUID *string `thrift:"inputHostUUID,3" db:"inputHostUUID" json:"inputHostUUID,omitempty"`
  ReplicaStats []*shared.ExtentReplicaStats `thrift:"replicaStats,4" db:"replicaStats" json:"replicaStats,omitempty"`
}

func NewUpdateExtentReplicaStatsRequest() *UpdateExtentReplicaStatsRequest {
  return &UpdateExtentReplicaStatsRequest{}
}

var UpdateExtentReplicaStatsRequest_DestinationUUID_DEFAULT string
func (p *UpdateExtentReplicaStatsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return UpdateExtentReplicaStatsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var UpdateExtentReplicaStatsRequest_ExtentUUID_DEFAULT string
func (p *UpdateExtentReplicaStatsRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return UpdateExtentReplicaStatsRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var UpdateExtentReplicaStatsRequest_InputHostUUID_DEFAULT string
func (p *UpdateExtentReplicaStatsRequest) GetInputHostUUID() string {
  if !p.IsSetInputHostUUID() {
    return UpdateExtentReplicaStatsRequest_InputHostUUID_DEFAULT
  }
return *p.InputHostUUID
}
var UpdateExtentReplicaStatsRequest_ReplicaStats_DEFAULT []*shared.ExtentReplicaStats

func (p *UpdateExtentReplicaStatsRequest) GetReplicaStats() []*shared.ExtentReplicaStats {
  return p.ReplicaStats
}
func (p *UpdateExtentReplicaStatsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *UpdateExtentReplicaStatsRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *UpdateExtentReplicaStatsRequest) IsSetInputHostUUID() bool {
  return p.InputHostUUID != nil
}

func (p *UpdateExtentReplicaStatsRequest) IsSetReplicaStats() bool {
  return p.ReplicaStats != nil
}

func (p *UpdateExtentReplicaStatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateExtentReplicaStatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *UpdateExtentReplicaStatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *UpdateExtentReplicaStatsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InputHostUUID = &v
}
  return nil
}

func (p *UpdateExtentReplicaStatsRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*shared.ExtentReplicaStats, 0, size)
  p.ReplicaStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &shared.ExtentReplicaStats{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.ReplicaStats = append(p.ReplicaStats, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UpdateExtentReplicaStatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateExtentReplicaStatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateExtentReplicaStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *UpdateExtentReplicaStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *UpdateExtentReplicaStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInputHostUUID() {
    if err := oprot.WriteFieldBegin("inputHostUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.InputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.inputHostUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inputHostUUID: ", p), err) }
  }
  return err
}

func (p *UpdateExtentReplicaStatsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaStats() {
    if err := oprot.WriteFieldBegin("replicaStats", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:replicaStats: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReplicaStats)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ReplicaStats {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:replicaStats: ", p), err) }
  }
  return err
}

func (p *UpdateExtentReplicaStatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateExtentReplicaStatsRequest(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - OutputHostUUID
//  - ConnectedStoreUUID
//  - Status
//  - AckLevelAddress
//  - AckLevelSeqNo
//  - AckLevelSeqNoRate
//  - ReadLevelAddress
//  - ReadLevelSeqNo
//  - ReadLevelSeqNoRate
type SetAckOffsetRequest struct {
  ExtentUUID *string `thrift:"extentUUID,1" db:"extentUUID" json:"extentUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,2" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  OutputHostUUID *string `thrift:"outputHostUUID,3" db:"outputHostUUID" json:"outputHostUUID,omitempty"`
  ConnectedStoreUUID *string `thrift:"connectedStoreUUID,4" db:"connectedStoreUUID" json:"connectedStoreUUID,omitempty"`
  Status *ConsumerGroupExtentStatus `thrift:"status,5" db:"status" json:"status,omitempty"`
  AckLevelAddress *int64 `thrift:"ackLevelAddress,6" db:"ackLevelAddress" json:"ackLevelAddress,omitempty"`
  AckLevelSeqNo *int64 `thrift:"ackLevelSeqNo,7" db:"ackLevelSeqNo" json:"ackLevelSeqNo,omitempty"`
  AckLevelSeqNoRate *float64 `thrift:"ackLevelSeqNoRate,8" db:"ackLevelSeqNoRate" json:"ackLevelSeqNoRate,omitempty"`
  ReadLevelAddress *int64 `thrift:"readLevelAddress,9" db:"readLevelAddress" json:"readLevelAddress,omitempty"`
  ReadLevelSeqNo *int64 `thrift:"readLevelSeqNo,10" db:"readLevelSeqNo" json:"readLevelSeqNo,omitempty"`
  ReadLevelSeqNoRate *float64 `thrift:"readLevelSeqNoRate,11" db:"readLevelSeqNoRate" json:"readLevelSeqNoRate,omitempty"`
}

func NewSetAckOffsetRequest() *SetAckOffsetRequest {
  return &SetAckOffsetRequest{}
}

var SetAckOffsetRequest_ExtentUUID_DEFAULT string
func (p *SetAckOffsetRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return SetAckOffsetRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var SetAckOffsetRequest_ConsumerGroupUUID_DEFAULT string
func (p *SetAckOffsetRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return SetAckOffsetRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var SetAckOffsetRequest_OutputHostUUID_DEFAULT string
func (p *SetAckOffsetRequest) GetOutputHostUUID() string {
  if !p.IsSetOutputHostUUID() {
    return SetAckOffsetRequest_OutputHostUUID_DEFAULT
  }
return *p.OutputHostUUID
}
var SetAckOffsetRequest_ConnectedStoreUUID_DEFAULT string
func (p *SetAckOffsetRequest) GetConnectedStoreUUID() string {
  if !p.IsSetConnectedStoreUUID() {
    return SetAckOffsetRequest_ConnectedStoreUUID_DEFAULT
  }
return *p.ConnectedStoreUUID
}
var SetAckOffsetRequest_Status_DEFAULT ConsumerGroupExtentStatus
func (p *SetAckOffsetRequest) GetStatus() ConsumerGroupExtentStatus {
  if !p.IsSetStatus() {
    return SetAckOffsetRequest_Status_DEFAULT
  }
return *p.Status
}
var SetAckOffsetRequest_AckLevelAddress_DEFAULT int64
func (p *SetAckOffsetRequest) GetAckLevelAddress() int64 {
  if !p.IsSetAckLevelAddress() {
    return SetAckOffsetRequest_AckLevelAddress_DEFAULT
  }
return *p.AckLevelAddress
}
var SetAckOffsetRequest_AckLevelSeqNo_DEFAULT int64
func (p *SetAckOffsetRequest) GetAckLevelSeqNo() int64 {
  if !p.IsSetAckLevelSeqNo() {
    return SetAckOffsetRequest_AckLevelSeqNo_DEFAULT
  }
return *p.AckLevelSeqNo
}
var SetAckOffsetRequest_AckLevelSeqNoRate_DEFAULT float64
func (p *SetAckOffsetRequest) GetAckLevelSeqNoRate() float64 {
  if !p.IsSetAckLevelSeqNoRate() {
    return SetAckOffsetRequest_AckLevelSeqNoRate_DEFAULT
  }
return *p.AckLevelSeqNoRate
}
var SetAckOffsetRequest_ReadLevelAddress_DEFAULT int64
func (p *SetAckOffsetRequest) GetReadLevelAddress() int64 {
  if !p.IsSetReadLevelAddress() {
    return SetAckOffsetRequest_ReadLevelAddress_DEFAULT
  }
return *p.ReadLevelAddress
}
var SetAckOffsetRequest_ReadLevelSeqNo_DEFAULT int64
func (p *SetAckOffsetRequest) GetReadLevelSeqNo() int64 {
  if !p.IsSetReadLevelSeqNo() {
    return SetAckOffsetRequest_ReadLevelSeqNo_DEFAULT
  }
return *p.ReadLevelSeqNo
}
var SetAckOffsetRequest_ReadLevelSeqNoRate_DEFAULT float64
func (p *SetAckOffsetRequest) GetReadLevelSeqNoRate() float64 {
  if !p.IsSetReadLevelSeqNoRate() {
    return SetAckOffsetRequest_ReadLevelSeqNoRate_DEFAULT
  }
return *p.ReadLevelSeqNoRate
}
func (p *SetAckOffsetRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *SetAckOffsetRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *SetAckOffsetRequest) IsSetOutputHostUUID() bool {
  return p.OutputHostUUID != nil
}

func (p *SetAckOffsetRequest) IsSetConnectedStoreUUID() bool {
  return p.ConnectedStoreUUID != nil
}

func (p *SetAckOffsetRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SetAckOffsetRequest) IsSetAckLevelAddress() bool {
  return p.AckLevelAddress != nil
}

func (p *SetAckOffsetRequest) IsSetAckLevelSeqNo() bool {
  return p.AckLevelSeqNo != nil
}

func (p *SetAckOffsetRequest) IsSetAckLevelSeqNoRate() bool {
  return p.AckLevelSeqNoRate != nil
}

func (p *SetAckOffsetRequest) IsSetReadLevelAddress() bool {
  return p.ReadLevelAddress != nil
}

func (p *SetAckOffsetRequest) IsSetReadLevelSeqNo() bool {
  return p.ReadLevelSeqNo != nil
}

func (p *SetAckOffsetRequest) IsSetReadLevelSeqNoRate() bool {
  return p.ReadLevelSeqNoRate != nil
}

func (p *SetAckOffsetRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetAckOffsetRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OutputHostUUID = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConnectedStoreUUID = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ConsumerGroupExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AckLevelAddress = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AckLevelSeqNo = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AckLevelSeqNoRate = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ReadLevelAddress = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ReadLevelSeqNo = &v
}
  return nil
}

func (p *SetAckOffsetRequest)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ReadLevelSeqNoRate = &v
}
  return nil
}

func (p *SetAckOffsetRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetAckOffsetRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetAckOffsetRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostUUID() {
    if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outputHostUUID: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConnectedStoreUUID() {
    if err := oprot.WriteFieldBegin("connectedStoreUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:connectedStoreUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConnectedStoreUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.connectedStoreUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:connectedStoreUUID: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelAddress() {
    if err := oprot.WriteFieldBegin("ackLevelAddress", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ackLevelAddress: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AckLevelAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelAddress (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ackLevelAddress: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelSeqNo() {
    if err := oprot.WriteFieldBegin("ackLevelSeqNo", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ackLevelSeqNo: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AckLevelSeqNo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNo (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ackLevelSeqNo: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckLevelSeqNoRate() {
    if err := oprot.WriteFieldBegin("ackLevelSeqNoRate", thrift.DOUBLE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:ackLevelSeqNoRate: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.AckLevelSeqNoRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackLevelSeqNoRate (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:ackLevelSeqNoRate: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelAddress() {
    if err := oprot.WriteFieldBegin("readLevelAddress", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:readLevelAddress: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadLevelAddress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelAddress (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:readLevelAddress: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelSeqNo() {
    if err := oprot.WriteFieldBegin("readLevelSeqNo", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:readLevelSeqNo: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadLevelSeqNo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNo (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:readLevelSeqNo: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadLevelSeqNoRate() {
    if err := oprot.WriteFieldBegin("readLevelSeqNoRate", thrift.DOUBLE, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:readLevelSeqNoRate: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.ReadLevelSeqNoRate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readLevelSeqNoRate (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:readLevelSeqNoRate: ", p), err) }
  }
  return err
}

func (p *SetAckOffsetRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetAckOffsetRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroupUUID
//  - ExtentUUID
//  - Status
type UpdateConsumerGroupExtentStatusRequest struct {
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,1" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  Status *ConsumerGroupExtentStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
}

func NewUpdateConsumerGroupExtentStatusRequest() *UpdateConsumerGroupExtentStatusRequest {
  return &UpdateConsumerGroupExtentStatusRequest{}
}

var UpdateConsumerGroupExtentStatusRequest_ConsumerGroupUUID_DEFAULT string
func (p *UpdateConsumerGroupExtentStatusRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return UpdateConsumerGroupExtentStatusRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var UpdateConsumerGroupExtentStatusRequest_ExtentUUID_DEFAULT string
func (p *UpdateConsumerGroupExtentStatusRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return UpdateConsumerGroupExtentStatusRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var UpdateConsumerGroupExtentStatusRequest_Status_DEFAULT ConsumerGroupExtentStatus
func (p *UpdateConsumerGroupExtentStatusRequest) GetStatus() ConsumerGroupExtentStatus {
  if !p.IsSetStatus() {
    return UpdateConsumerGroupExtentStatusRequest_Status_DEFAULT
  }
return *p.Status
}
func (p *UpdateConsumerGroupExtentStatusRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConsumerGroupExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateConsumerGroupExtentStatusRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateConsumerGroupExtentStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupExtentStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupExtentStatusRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupExtentStatusRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateConsumerGroupExtentStatusRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - ConsumerGroupUUID
type ReadConsumerGroupExtentRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,3" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
}

func NewReadConsumerGroupExtentRequest() *ReadConsumerGroupExtentRequest {
  return &ReadConsumerGroupExtentRequest{}
}

var ReadConsumerGroupExtentRequest_DestinationUUID_DEFAULT string
func (p *ReadConsumerGroupExtentRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReadConsumerGroupExtentRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReadConsumerGroupExtentRequest_ExtentUUID_DEFAULT string
func (p *ReadConsumerGroupExtentRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReadConsumerGroupExtentRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ReadConsumerGroupExtentRequest_ConsumerGroupUUID_DEFAULT string
func (p *ReadConsumerGroupExtentRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ReadConsumerGroupExtentRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
func (p *ReadConsumerGroupExtentRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupExtentRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReadConsumerGroupExtentRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupExtentRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentRequest(%+v)", *p)
}

// Attributes:
//  - Extent
type ReadConsumerGroupExtentResult_ struct {
  Extent *ConsumerGroupExtent `thrift:"extent,1" db:"extent" json:"extent,omitempty"`
}

func NewReadConsumerGroupExtentResult_() *ReadConsumerGroupExtentResult_ {
  return &ReadConsumerGroupExtentResult_{}
}

var ReadConsumerGroupExtentResult__Extent_DEFAULT *ConsumerGroupExtent
func (p *ReadConsumerGroupExtentResult_) GetExtent() *ConsumerGroupExtent {
  if !p.IsSetExtent() {
    return ReadConsumerGroupExtentResult__Extent_DEFAULT
  }
return p.Extent
}
func (p *ReadConsumerGroupExtentResult_) IsSetExtent() bool {
  return p.Extent != nil
}

func (p *ReadConsumerGroupExtentResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.Extent = &ConsumerGroupExtent{}
  if err := p.Extent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extent), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtent() {
    if err := oprot.WriteFieldBegin("extent", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extent: ", p), err) }
    if err := p.Extent.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extent), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extent: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - ConsumerGroupUUID
//  - OutputHostUUID
type SetOutputHostRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,3" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  OutputHostUUID *string `thrift:"outputHostUUID,4" db:"outputHostUUID" json:"outputHostUUID,omitempty"`
}

func NewSetOutputHostRequest() *SetOutputHostRequest {
  return &SetOutputHostRequest{}
}

var SetOutputHostRequest_DestinationUUID_DEFAULT string
func (p *SetOutputHostRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return SetOutputHostRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var SetOutputHostRequest_ExtentUUID_DEFAULT string
func (p *SetOutputHostRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return SetOutputHostRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var SetOutputHostRequest_ConsumerGroupUUID_DEFAULT string
func (p *SetOutputHostRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return SetOutputHostRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var SetOutputHostRequest_OutputHostUUID_DEFAULT string
func (p *SetOutputHostRequest) GetOutputHostUUID() string {
  if !p.IsSetOutputHostUUID() {
    return SetOutputHostRequest_OutputHostUUID_DEFAULT
  }
return *p.OutputHostUUID
}
func (p *SetOutputHostRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *SetOutputHostRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *SetOutputHostRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *SetOutputHostRequest) IsSetOutputHostUUID() bool {
  return p.OutputHostUUID != nil
}

func (p *SetOutputHostRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetOutputHostRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *SetOutputHostRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *SetOutputHostRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *SetOutputHostRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutputHostUUID = &v
}
  return nil
}

func (p *SetOutputHostRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetOutputHostRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetOutputHostRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *SetOutputHostRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *SetOutputHostRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *SetOutputHostRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostUUID() {
    if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputHostUUID: ", p), err) }
  }
  return err
}

func (p *SetOutputHostRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetOutputHostRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - MaxResults
//  - OutputHostUUID
//  - Status
//  - PageToken
type ReadConsumerGroupExtentsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,2" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  MaxResults *int32 `thrift:"maxResults,3" db:"maxResults" json:"maxResults,omitempty"`
  OutputHostUUID *string `thrift:"outputHostUUID,4" db:"outputHostUUID" json:"outputHostUUID,omitempty"`
  Status *ConsumerGroupExtentStatus `thrift:"status,5" db:"status" json:"status,omitempty"`
  PageToken []byte `thrift:"pageToken,6" db:"pageToken" json:"pageToken,omitempty"`
}

func NewReadConsumerGroupExtentsRequest() *ReadConsumerGroupExtentsRequest {
  return &ReadConsumerGroupExtentsRequest{}
}

var ReadConsumerGroupExtentsRequest_DestinationUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReadConsumerGroupExtentsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReadConsumerGroupExtentsRequest_ConsumerGroupUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ReadConsumerGroupExtentsRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ReadConsumerGroupExtentsRequest_MaxResults_DEFAULT int32
func (p *ReadConsumerGroupExtentsRequest) GetMaxResults() int32 {
  if !p.IsSetMaxResults() {
    return ReadConsumerGroupExtentsRequest_MaxResults_DEFAULT
  }
return *p.MaxResults
}
var ReadConsumerGroupExtentsRequest_OutputHostUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsRequest) GetOutputHostUUID() string {
  if !p.IsSetOutputHostUUID() {
    return ReadConsumerGroupExtentsRequest_OutputHostUUID_DEFAULT
  }
return *p.OutputHostUUID
}
var ReadConsumerGroupExtentsRequest_Status_DEFAULT ConsumerGroupExtentStatus
func (p *ReadConsumerGroupExtentsRequest) GetStatus() ConsumerGroupExtentStatus {
  if !p.IsSetStatus() {
    return ReadConsumerGroupExtentsRequest_Status_DEFAULT
  }
return *p.Status
}
var ReadConsumerGroupExtentsRequest_PageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsRequest) GetPageToken() []byte {
  return p.PageToken
}
func (p *ReadConsumerGroupExtentsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetMaxResults() bool {
  return p.MaxResults != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetOutputHostUUID() bool {
  return p.OutputHostUUID != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ReadConsumerGroupExtentsRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ReadConsumerGroupExtentsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxResults = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutputHostUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ConsumerGroupExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ReadConsumerGroupExtentsRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ReadConsumerGroupExtentsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxResults() {
    if err := oprot.WriteFieldBegin("maxResults", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxResults: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxResults)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxResults (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxResults: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostUUID() {
    if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputHostUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageToken: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentsRequest(%+v)", *p)
}

// Attributes:
//  - Extents
//  - NextPageToken
type ReadConsumerGroupExtentsResult_ struct {
  Extents []*ConsumerGroupExtent `thrift:"extents,1" db:"extents" json:"extents,omitempty"`
  // unused fields # 2 to 9
  NextPageToken []byte `thrift:"nextPageToken,10" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewReadConsumerGroupExtentsResult_() *ReadConsumerGroupExtentsResult_ {
  return &ReadConsumerGroupExtentsResult_{}
}

var ReadConsumerGroupExtentsResult__Extents_DEFAULT []*ConsumerGroupExtent

func (p *ReadConsumerGroupExtentsResult_) GetExtents() []*ConsumerGroupExtent {
  return p.Extents
}
var ReadConsumerGroupExtentsResult__NextPageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ReadConsumerGroupExtentsResult_) IsSetExtents() bool {
  return p.Extents != nil
}

func (p *ReadConsumerGroupExtentsResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ReadConsumerGroupExtentsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupExtent, 0, size)
  p.Extents =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &ConsumerGroupExtent{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Extents = append(p.Extents, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ReadConsumerGroupExtentsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtents() {
    if err := oprot.WriteFieldBegin("extents", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extents: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extents)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extents {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extents: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - MaxResults
//  - OutputHostUUID
//  - Status
//  - PageToken
type ReadConsumerGroupExtentsLiteRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,2" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  MaxResults *int32 `thrift:"maxResults,3" db:"maxResults" json:"maxResults,omitempty"`
  OutputHostUUID *string `thrift:"outputHostUUID,4" db:"outputHostUUID" json:"outputHostUUID,omitempty"`
  Status *ConsumerGroupExtentStatus `thrift:"status,5" db:"status" json:"status,omitempty"`
  PageToken []byte `thrift:"pageToken,6" db:"pageToken" json:"pageToken,omitempty"`
}

func NewReadConsumerGroupExtentsLiteRequest() *ReadConsumerGroupExtentsLiteRequest {
  return &ReadConsumerGroupExtentsLiteRequest{}
}

var ReadConsumerGroupExtentsLiteRequest_DestinationUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsLiteRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReadConsumerGroupExtentsLiteRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReadConsumerGroupExtentsLiteRequest_ConsumerGroupUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsLiteRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ReadConsumerGroupExtentsLiteRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ReadConsumerGroupExtentsLiteRequest_MaxResults_DEFAULT int32
func (p *ReadConsumerGroupExtentsLiteRequest) GetMaxResults() int32 {
  if !p.IsSetMaxResults() {
    return ReadConsumerGroupExtentsLiteRequest_MaxResults_DEFAULT
  }
return *p.MaxResults
}
var ReadConsumerGroupExtentsLiteRequest_OutputHostUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsLiteRequest) GetOutputHostUUID() string {
  if !p.IsSetOutputHostUUID() {
    return ReadConsumerGroupExtentsLiteRequest_OutputHostUUID_DEFAULT
  }
return *p.OutputHostUUID
}
var ReadConsumerGroupExtentsLiteRequest_Status_DEFAULT ConsumerGroupExtentStatus
func (p *ReadConsumerGroupExtentsLiteRequest) GetStatus() ConsumerGroupExtentStatus {
  if !p.IsSetStatus() {
    return ReadConsumerGroupExtentsLiteRequest_Status_DEFAULT
  }
return *p.Status
}
var ReadConsumerGroupExtentsLiteRequest_PageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsLiteRequest) GetPageToken() []byte {
  return p.PageToken
}
func (p *ReadConsumerGroupExtentsLiteRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) IsSetMaxResults() bool {
  return p.MaxResults != nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) IsSetOutputHostUUID() bool {
  return p.OutputHostUUID != nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxResults = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutputHostUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ConsumerGroupExtentStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsLiteRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentsLiteRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxResults() {
    if err := oprot.WriteFieldBegin("maxResults", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxResults: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxResults)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxResults (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxResults: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostUUID() {
    if err := oprot.WriteFieldBegin("outputHostUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputHostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.OutputHostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputHostUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputHostUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageToken: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentsLiteRequest(%+v)", *p)
}

// Attributes:
//  - Extents
//  - NextPageToken
type ReadConsumerGroupExtentsLiteResult_ struct {
  Extents []*ConsumerGroupExtentLite `thrift:"extents,1" db:"extents" json:"extents,omitempty"`
  // unused fields # 2 to 9
  NextPageToken []byte `thrift:"nextPageToken,10" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewReadConsumerGroupExtentsLiteResult_() *ReadConsumerGroupExtentsLiteResult_ {
  return &ReadConsumerGroupExtentsLiteResult_{}
}

var ReadConsumerGroupExtentsLiteResult__Extents_DEFAULT []*ConsumerGroupExtentLite

func (p *ReadConsumerGroupExtentsLiteResult_) GetExtents() []*ConsumerGroupExtentLite {
  return p.Extents
}
var ReadConsumerGroupExtentsLiteResult__NextPageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsLiteResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ReadConsumerGroupExtentsLiteResult_) IsSetExtents() bool {
  return p.Extents != nil
}

func (p *ReadConsumerGroupExtentsLiteResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ReadConsumerGroupExtentsLiteResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsLiteResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupExtentLite, 0, size)
  p.Extents =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &ConsumerGroupExtentLite{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Extents = append(p.Extents, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsLiteResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ReadConsumerGroupExtentsLiteResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsLiteResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentsLiteResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtents() {
    if err := oprot.WriteFieldBegin("extents", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extents: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Extents)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Extents {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extents: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsLiteResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentsLiteResult_(%+v)", *p)
}

// Attributes:
//  - ExtentUUID
//  - PageToken
//  - Limit
type ReadConsumerGroupExtentsByExtUUIDRequest struct {
  ExtentUUID *string `thrift:"extentUUID,1" db:"extentUUID" json:"extentUUID,omitempty"`
  PageToken []byte `thrift:"pageToken,2" db:"pageToken" json:"pageToken,omitempty"`
  Limit *int64 `thrift:"limit,3" db:"limit" json:"limit,omitempty"`
}

func NewReadConsumerGroupExtentsByExtUUIDRequest() *ReadConsumerGroupExtentsByExtUUIDRequest {
  return &ReadConsumerGroupExtentsByExtUUIDRequest{}
}

var ReadConsumerGroupExtentsByExtUUIDRequest_ExtentUUID_DEFAULT string
func (p *ReadConsumerGroupExtentsByExtUUIDRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReadConsumerGroupExtentsByExtUUIDRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ReadConsumerGroupExtentsByExtUUIDRequest_PageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) GetPageToken() []byte {
  return p.PageToken
}
var ReadConsumerGroupExtentsByExtUUIDRequest_Limit_DEFAULT int64
func (p *ReadConsumerGroupExtentsByExtUUIDRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return ReadConsumerGroupExtentsByExtUUIDRequest_Limit_DEFAULT
  }
return *p.Limit
}
func (p *ReadConsumerGroupExtentsByExtUUIDRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsByExtUUIDRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageToken: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentsByExtUUIDRequest(%+v)", *p)
}

// Attributes:
//  - CgExtents
//  - NextPageToken
type ReadConsumerGroupExtentsByExtUUIDResult_ struct {
  CgExtents []*ConsumerGroupExtent `thrift:"cgExtents,1" db:"cgExtents" json:"cgExtents,omitempty"`
  NextPageToken []byte `thrift:"nextPageToken,2" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewReadConsumerGroupExtentsByExtUUIDResult_() *ReadConsumerGroupExtentsByExtUUIDResult_ {
  return &ReadConsumerGroupExtentsByExtUUIDResult_{}
}

var ReadConsumerGroupExtentsByExtUUIDResult__CgExtents_DEFAULT []*ConsumerGroupExtent

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) GetCgExtents() []*ConsumerGroupExtent {
  return p.CgExtents
}
var ReadConsumerGroupExtentsByExtUUIDResult__NextPageToken_DEFAULT []byte

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ReadConsumerGroupExtentsByExtUUIDResult_) IsSetCgExtents() bool {
  return p.CgExtents != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupExtent, 0, size)
  p.CgExtents =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &ConsumerGroupExtent{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.CgExtents = append(p.CgExtents, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupExtentsByExtUUIDResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCgExtents() {
    if err := oprot.WriteFieldBegin("cgExtents", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cgExtents: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CgExtents)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.CgExtents {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cgExtents: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupExtentsByExtUUIDResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupExtentsByExtUUIDResult_(%+v)", *p)
}

// Attributes:
//  - HostUUID
//  - HostAddr
//  - HostName
//  - TtlSeconds
type RegisterHostUUIDRequest struct {
  HostUUID *string `thrift:"hostUUID,1" db:"hostUUID" json:"hostUUID,omitempty"`
  HostAddr *string `thrift:"hostAddr,2" db:"hostAddr" json:"hostAddr,omitempty"`
  HostName *string `thrift:"hostName,3" db:"hostName" json:"hostName,omitempty"`
  TtlSeconds *int64 `thrift:"ttlSeconds,4" db:"ttlSeconds" json:"ttlSeconds,omitempty"`
}

func NewRegisterHostUUIDRequest() *RegisterHostUUIDRequest {
  return &RegisterHostUUIDRequest{}
}

var RegisterHostUUIDRequest_HostUUID_DEFAULT string
func (p *RegisterHostUUIDRequest) GetHostUUID() string {
  if !p.IsSetHostUUID() {
    return RegisterHostUUIDRequest_HostUUID_DEFAULT
  }
return *p.HostUUID
}
var RegisterHostUUIDRequest_HostAddr_DEFAULT string
func (p *RegisterHostUUIDRequest) GetHostAddr() string {
  if !p.IsSetHostAddr() {
    return RegisterHostUUIDRequest_HostAddr_DEFAULT
  }
return *p.HostAddr
}
var RegisterHostUUIDRequest_HostName_DEFAULT string
func (p *RegisterHostUUIDRequest) GetHostName() string {
  if !p.IsSetHostName() {
    return RegisterHostUUIDRequest_HostName_DEFAULT
  }
return *p.HostName
}
var RegisterHostUUIDRequest_TtlSeconds_DEFAULT int64
func (p *RegisterHostUUIDRequest) GetTtlSeconds() int64 {
  if !p.IsSetTtlSeconds() {
    return RegisterHostUUIDRequest_TtlSeconds_DEFAULT
  }
return *p.TtlSeconds
}
func (p *RegisterHostUUIDRequest) IsSetHostUUID() bool {
  return p.HostUUID != nil
}

func (p *RegisterHostUUIDRequest) IsSetHostAddr() bool {
  return p.HostAddr != nil
}

func (p *RegisterHostUUIDRequest) IsSetHostName() bool {
  return p.HostName != nil
}

func (p *RegisterHostUUIDRequest) IsSetTtlSeconds() bool {
  return p.TtlSeconds != nil
}

func (p *RegisterHostUUIDRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterHostUUIDRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostUUID = &v
}
  return nil
}

func (p *RegisterHostUUIDRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostAddr = &v
}
  return nil
}

func (p *RegisterHostUUIDRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HostName = &v
}
  return nil
}

func (p *RegisterHostUUIDRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TtlSeconds = &v
}
  return nil
}

func (p *RegisterHostUUIDRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterHostUUIDRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterHostUUIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostUUID() {
    if err := oprot.WriteFieldBegin("hostUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.HostUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostUUID: ", p), err) }
  }
  return err
}

func (p *RegisterHostUUIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAddr() {
    if err := oprot.WriteFieldBegin("hostAddr", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostAddr: ", p), err) }
    if err := oprot.WriteString(string(*p.HostAddr)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostAddr (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostAddr: ", p), err) }
  }
  return err
}

func (p *RegisterHostUUIDRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostName() {
    if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostName: ", p), err) }
    if err := oprot.WriteString(string(*p.HostName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostName: ", p), err) }
  }
  return err
}

func (p *RegisterHostUUIDRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTtlSeconds() {
    if err := oprot.WriteFieldBegin("ttlSeconds", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttlSeconds: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TtlSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ttlSeconds (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttlSeconds: ", p), err) }
  }
  return err
}

func (p *RegisterHostUUIDRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterHostUUIDRequest(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ExtentUUID
//  - NewDestinationUUID_
//  - ConsumerGroupVisibilityUUID
type MoveExtentRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,2" db:"extentUUID" json:"extentUUID,omitempty"`
  NewDestinationUUID_ *string `thrift:"newDestinationUUID,3" db:"newDestinationUUID" json:"newDestinationUUID,omitempty"`
  ConsumerGroupVisibilityUUID *string `thrift:"consumerGroupVisibilityUUID,4" db:"consumerGroupVisibilityUUID" json:"consumerGroupVisibilityUUID,omitempty"`
}

func NewMoveExtentRequest() *MoveExtentRequest {
  return &MoveExtentRequest{}
}

var MoveExtentRequest_DestinationUUID_DEFAULT string
func (p *MoveExtentRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return MoveExtentRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var MoveExtentRequest_ExtentUUID_DEFAULT string
func (p *MoveExtentRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return MoveExtentRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var MoveExtentRequest_NewDestinationUUID__DEFAULT string
func (p *MoveExtentRequest) GetNewDestinationUUID_() string {
  if !p.IsSetNewDestinationUUID_() {
    return MoveExtentRequest_NewDestinationUUID__DEFAULT
  }
return *p.NewDestinationUUID_
}
var MoveExtentRequest_ConsumerGroupVisibilityUUID_DEFAULT string
func (p *MoveExtentRequest) GetConsumerGroupVisibilityUUID() string {
  if !p.IsSetConsumerGroupVisibilityUUID() {
    return MoveExtentRequest_ConsumerGroupVisibilityUUID_DEFAULT
  }
return *p.ConsumerGroupVisibilityUUID
}
func (p *MoveExtentRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *MoveExtentRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *MoveExtentRequest) IsSetNewDestinationUUID_() bool {
  return p.NewDestinationUUID_ != nil
}

func (p *MoveExtentRequest) IsSetConsumerGroupVisibilityUUID() bool {
  return p.ConsumerGroupVisibilityUUID != nil
}

func (p *MoveExtentRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MoveExtentRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *MoveExtentRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *MoveExtentRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NewDestinationUUID_ = &v
}
  return nil
}

func (p *MoveExtentRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConsumerGroupVisibilityUUID = &v
}
  return nil
}

func (p *MoveExtentRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MoveExtentRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MoveExtentRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *MoveExtentRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:extentUUID: ", p), err) }
  }
  return err
}

func (p *MoveExtentRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNewDestinationUUID_() {
    if err := oprot.WriteFieldBegin("newDestinationUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newDestinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.NewDestinationUUID_)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.newDestinationUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newDestinationUUID: ", p), err) }
  }
  return err
}

func (p *MoveExtentRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupVisibilityUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupVisibilityUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupVisibilityUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupVisibilityUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupVisibilityUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupVisibilityUUID: ", p), err) }
  }
  return err
}

func (p *MoveExtentRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MoveExtentRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - Properties
type CreateHostInfoRequest struct {
  Hostname *string `thrift:"hostname,1" db:"hostname" json:"hostname,omitempty"`
  Properties map[string]string `thrift:"properties,2" db:"properties" json:"properties,omitempty"`
}

func NewCreateHostInfoRequest() *CreateHostInfoRequest {
  return &CreateHostInfoRequest{}
}

var CreateHostInfoRequest_Hostname_DEFAULT string
func (p *CreateHostInfoRequest) GetHostname() string {
  if !p.IsSetHostname() {
    return CreateHostInfoRequest_Hostname_DEFAULT
  }
return *p.Hostname
}
var CreateHostInfoRequest_Properties_DEFAULT map[string]string

func (p *CreateHostInfoRequest) GetProperties() map[string]string {
  return p.Properties
}
func (p *CreateHostInfoRequest) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *CreateHostInfoRequest) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *CreateHostInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateHostInfoRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *CreateHostInfoRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
var _val14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val14 = v
}
    p.Properties[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CreateHostInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateHostInfoRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  }
  return err
}

func (p *CreateHostInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetProperties() {
    if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Properties {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  }
  return err
}

func (p *CreateHostInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - Properties
type UpdateHostInfoRequest struct {
  Hostname *string `thrift:"hostname,1" db:"hostname" json:"hostname,omitempty"`
  Properties map[string]string `thrift:"properties,2" db:"properties" json:"properties,omitempty"`
}

func NewUpdateHostInfoRequest() *UpdateHostInfoRequest {
  return &UpdateHostInfoRequest{}
}

var UpdateHostInfoRequest_Hostname_DEFAULT string
func (p *UpdateHostInfoRequest) GetHostname() string {
  if !p.IsSetHostname() {
    return UpdateHostInfoRequest_Hostname_DEFAULT
  }
return *p.Hostname
}
var UpdateHostInfoRequest_Properties_DEFAULT map[string]string

func (p *UpdateHostInfoRequest) GetProperties() map[string]string {
  return p.Properties
}
func (p *UpdateHostInfoRequest) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *UpdateHostInfoRequest) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *UpdateHostInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateHostInfoRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *UpdateHostInfoRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.Properties[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateHostInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateHostInfoRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  }
  return err
}

func (p *UpdateHostInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetProperties() {
    if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Properties {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  }
  return err
}

func (p *UpdateHostInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - PropertyKey
type DeleteHostInfoRequest struct {
  Hostname *string `thrift:"hostname,1" db:"hostname" json:"hostname,omitempty"`
  PropertyKey *string `thrift:"propertyKey,2" db:"propertyKey" json:"propertyKey,omitempty"`
}

func NewDeleteHostInfoRequest() *DeleteHostInfoRequest {
  return &DeleteHostInfoRequest{}
}

var DeleteHostInfoRequest_Hostname_DEFAULT string
func (p *DeleteHostInfoRequest) GetHostname() string {
  if !p.IsSetHostname() {
    return DeleteHostInfoRequest_Hostname_DEFAULT
  }
return *p.Hostname
}
var DeleteHostInfoRequest_PropertyKey_DEFAULT string
func (p *DeleteHostInfoRequest) GetPropertyKey() string {
  if !p.IsSetPropertyKey() {
    return DeleteHostInfoRequest_PropertyKey_DEFAULT
  }
return *p.PropertyKey
}
func (p *DeleteHostInfoRequest) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *DeleteHostInfoRequest) IsSetPropertyKey() bool {
  return p.PropertyKey != nil
}

func (p *DeleteHostInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteHostInfoRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *DeleteHostInfoRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PropertyKey = &v
}
  return nil
}

func (p *DeleteHostInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteHostInfoRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  }
  return err
}

func (p *DeleteHostInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPropertyKey() {
    if err := oprot.WriteFieldBegin("propertyKey", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:propertyKey: ", p), err) }
    if err := oprot.WriteString(string(*p.PropertyKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.propertyKey (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:propertyKey: ", p), err) }
  }
  return err
}

func (p *DeleteHostInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
type ReadHostInfoRequest struct {
  Hostname *string `thrift:"hostname,1" db:"hostname" json:"hostname,omitempty"`
}

func NewReadHostInfoRequest() *ReadHostInfoRequest {
  return &ReadHostInfoRequest{}
}

var ReadHostInfoRequest_Hostname_DEFAULT string
func (p *ReadHostInfoRequest) GetHostname() string {
  if !p.IsSetHostname() {
    return ReadHostInfoRequest_Hostname_DEFAULT
  }
return *p.Hostname
}
func (p *ReadHostInfoRequest) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *ReadHostInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadHostInfoRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *ReadHostInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadHostInfoRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadHostInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  }
  return err
}

func (p *ReadHostInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadHostInfoRequest(%+v)", *p)
}

// Attributes:
//  - Hostname
//  - Properties
type ReadHostInfoResult_ struct {
  Hostname *string `thrift:"hostname,1" db:"hostname" json:"hostname,omitempty"`
  Properties map[string]string `thrift:"properties,2" db:"properties" json:"properties,omitempty"`
}

func NewReadHostInfoResult_() *ReadHostInfoResult_ {
  return &ReadHostInfoResult_{}
}

var ReadHostInfoResult__Hostname_DEFAULT string
func (p *ReadHostInfoResult_) GetHostname() string {
  if !p.IsSetHostname() {
    return ReadHostInfoResult__Hostname_DEFAULT
  }
return *p.Hostname
}
var ReadHostInfoResult__Properties_DEFAULT map[string]string

func (p *ReadHostInfoResult_) GetProperties() map[string]string {
  return p.Properties
}
func (p *ReadHostInfoResult_) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *ReadHostInfoResult_) IsSetProperties() bool {
  return p.Properties != nil
}

func (p *ReadHostInfoResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadHostInfoResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *ReadHostInfoResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Properties =  tMap
  for i := 0; i < size; i ++ {
var _key17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
var _val18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val18 = v
}
    p.Properties[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ReadHostInfoResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadHostInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadHostInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  }
  return err
}

func (p *ReadHostInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetProperties() {
    if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Properties {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err) }
  }
  return err
}

func (p *ReadHostInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadHostInfoResult_(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - ServiceVersion
//  - Sku
//  - Hostname
//  - ConfigKey
//  - ConfigValue
type ServiceConfigItem struct {
  ServiceName *string `thrift:"serviceName,1" db:"serviceName" json:"serviceName,omitempty"`
  ServiceVersion *string `thrift:"serviceVersion,2" db:"serviceVersion" json:"serviceVersion,omitempty"`
  Sku *string `thrift:"sku,3" db:"sku" json:"sku,omitempty"`
  Hostname *string `thrift:"hostname,4" db:"hostname" json:"hostname,omitempty"`
  ConfigKey *string `thrift:"configKey,5" db:"configKey" json:"configKey,omitempty"`
  ConfigValue *string `thrift:"configValue,6" db:"configValue" json:"configValue,omitempty"`
}

func NewServiceConfigItem() *ServiceConfigItem {
  return &ServiceConfigItem{}
}

var ServiceConfigItem_ServiceName_DEFAULT string
func (p *ServiceConfigItem) GetServiceName() string {
  if !p.IsSetServiceName() {
    return ServiceConfigItem_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var ServiceConfigItem_ServiceVersion_DEFAULT string
func (p *ServiceConfigItem) GetServiceVersion() string {
  if !p.IsSetServiceVersion() {
    return ServiceConfigItem_ServiceVersion_DEFAULT
  }
return *p.ServiceVersion
}
var ServiceConfigItem_Sku_DEFAULT string
func (p *ServiceConfigItem) GetSku() string {
  if !p.IsSetSku() {
    return ServiceConfigItem_Sku_DEFAULT
  }
return *p.Sku
}
var ServiceConfigItem_Hostname_DEFAULT string
func (p *ServiceConfigItem) GetHostname() string {
  if !p.IsSetHostname() {
    return ServiceConfigItem_Hostname_DEFAULT
  }
return *p.Hostname
}
var ServiceConfigItem_ConfigKey_DEFAULT string
func (p *ServiceConfigItem) GetConfigKey() string {
  if !p.IsSetConfigKey() {
    return ServiceConfigItem_ConfigKey_DEFAULT
  }
return *p.ConfigKey
}
var ServiceConfigItem_ConfigValue_DEFAULT string
func (p *ServiceConfigItem) GetConfigValue() string {
  if !p.IsSetConfigValue() {
    return ServiceConfigItem_ConfigValue_DEFAULT
  }
return *p.ConfigValue
}
func (p *ServiceConfigItem) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *ServiceConfigItem) IsSetServiceVersion() bool {
  return p.ServiceVersion != nil
}

func (p *ServiceConfigItem) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ServiceConfigItem) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *ServiceConfigItem) IsSetConfigKey() bool {
  return p.ConfigKey != nil
}

func (p *ServiceConfigItem) IsSetConfigValue() bool {
  return p.ConfigValue != nil
}

func (p *ServiceConfigItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceConfigItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *ServiceConfigItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceVersion = &v
}
  return nil
}

func (p *ServiceConfigItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sku = &v
}
  return nil
}

func (p *ServiceConfigItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *ServiceConfigItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ConfigKey = &v
}
  return nil
}

func (p *ServiceConfigItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ConfigValue = &v
}
  return nil
}

func (p *ServiceConfigItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceConfigItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceConfigItem) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  }
  return err
}

func (p *ServiceConfigItem) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceVersion() {
    if err := oprot.WriteFieldBegin("serviceVersion", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceVersion: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceVersion (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceVersion: ", p), err) }
  }
  return err
}

func (p *ServiceConfigItem) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sku: ", p), err) }
    if err := oprot.WriteString(string(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sku: ", p), err) }
  }
  return err
}

func (p *ServiceConfigItem) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err) }
  }
  return err
}

func (p *ServiceConfigItem) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigKey() {
    if err := oprot.WriteFieldBegin("configKey", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:configKey: ", p), err) }
    if err := oprot.WriteString(string(*p.ConfigKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.configKey (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:configKey: ", p), err) }
  }
  return err
}

func (p *ServiceConfigItem) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigValue() {
    if err := oprot.WriteFieldBegin("configValue", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:configValue: ", p), err) }
    if err := oprot.WriteString(string(*p.ConfigValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.configValue (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:configValue: ", p), err) }
  }
  return err
}

func (p *ServiceConfigItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceConfigItem(%+v)", *p)
}

// Attributes:
//  - ConfigItem
type CreateServiceConfigRequest struct {
  ConfigItem *ServiceConfigItem `thrift:"configItem,1" db:"configItem" json:"configItem,omitempty"`
}

func NewCreateServiceConfigRequest() *CreateServiceConfigRequest {
  return &CreateServiceConfigRequest{}
}

var CreateServiceConfigRequest_ConfigItem_DEFAULT *ServiceConfigItem
func (p *CreateServiceConfigRequest) GetConfigItem() *ServiceConfigItem {
  if !p.IsSetConfigItem() {
    return CreateServiceConfigRequest_ConfigItem_DEFAULT
  }
return p.ConfigItem
}
func (p *CreateServiceConfigRequest) IsSetConfigItem() bool {
  return p.ConfigItem != nil
}

func (p *CreateServiceConfigRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateServiceConfigRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.ConfigItem = &ServiceConfigItem{}
  if err := p.ConfigItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfigItem), err)
  }
  return nil
}

func (p *CreateServiceConfigRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateServiceConfigRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigItem() {
    if err := oprot.WriteFieldBegin("configItem", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:configItem: ", p), err) }
    if err := p.ConfigItem.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfigItem), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:configItem: ", p), err) }
  }
  return err
}

func (p *CreateServiceConfigRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ConfigItem
type UpdateServiceConfigRequest struct {
  ConfigItem *ServiceConfigItem `thrift:"configItem,1" db:"configItem" json:"configItem,omitempty"`
}

func NewUpdateServiceConfigRequest() *UpdateServiceConfigRequest {
  return &UpdateServiceConfigRequest{}
}

var UpdateServiceConfigRequest_ConfigItem_DEFAULT *ServiceConfigItem
func (p *UpdateServiceConfigRequest) GetConfigItem() *ServiceConfigItem {
  if !p.IsSetConfigItem() {
    return UpdateServiceConfigRequest_ConfigItem_DEFAULT
  }
return p.ConfigItem
}
func (p *UpdateServiceConfigRequest) IsSetConfigItem() bool {
  return p.ConfigItem != nil
}

func (p *UpdateServiceConfigRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateServiceConfigRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.ConfigItem = &ServiceConfigItem{}
  if err := p.ConfigItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfigItem), err)
  }
  return nil
}

func (p *UpdateServiceConfigRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateServiceConfigRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigItem() {
    if err := oprot.WriteFieldBegin("configItem", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:configItem: ", p), err) }
    if err := p.ConfigItem.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfigItem), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:configItem: ", p), err) }
  }
  return err
}

func (p *UpdateServiceConfigRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - ServiceVersion
//  - Sku
//  - Hostname
//  - ConfigKey
type DeleteServiceConfigRequest struct {
  ServiceName *string `thrift:"serviceName,1" db:"serviceName" json:"serviceName,omitempty"`
  ServiceVersion *string `thrift:"serviceVersion,2" db:"serviceVersion" json:"serviceVersion,omitempty"`
  Sku *string `thrift:"sku,3" db:"sku" json:"sku,omitempty"`
  Hostname *string `thrift:"hostname,4" db:"hostname" json:"hostname,omitempty"`
  ConfigKey *string `thrift:"configKey,5" db:"configKey" json:"configKey,omitempty"`
}

func NewDeleteServiceConfigRequest() *DeleteServiceConfigRequest {
  return &DeleteServiceConfigRequest{}
}

var DeleteServiceConfigRequest_ServiceName_DEFAULT string
func (p *DeleteServiceConfigRequest) GetServiceName() string {
  if !p.IsSetServiceName() {
    return DeleteServiceConfigRequest_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var DeleteServiceConfigRequest_ServiceVersion_DEFAULT string
func (p *DeleteServiceConfigRequest) GetServiceVersion() string {
  if !p.IsSetServiceVersion() {
    return DeleteServiceConfigRequest_ServiceVersion_DEFAULT
  }
return *p.ServiceVersion
}
var DeleteServiceConfigRequest_Sku_DEFAULT string
func (p *DeleteServiceConfigRequest) GetSku() string {
  if !p.IsSetSku() {
    return DeleteServiceConfigRequest_Sku_DEFAULT
  }
return *p.Sku
}
var DeleteServiceConfigRequest_Hostname_DEFAULT string
func (p *DeleteServiceConfigRequest) GetHostname() string {
  if !p.IsSetHostname() {
    return DeleteServiceConfigRequest_Hostname_DEFAULT
  }
return *p.Hostname
}
var DeleteServiceConfigRequest_ConfigKey_DEFAULT string
func (p *DeleteServiceConfigRequest) GetConfigKey() string {
  if !p.IsSetConfigKey() {
    return DeleteServiceConfigRequest_ConfigKey_DEFAULT
  }
return *p.ConfigKey
}
func (p *DeleteServiceConfigRequest) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *DeleteServiceConfigRequest) IsSetServiceVersion() bool {
  return p.ServiceVersion != nil
}

func (p *DeleteServiceConfigRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *DeleteServiceConfigRequest) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *DeleteServiceConfigRequest) IsSetConfigKey() bool {
  return p.ConfigKey != nil
}

func (p *DeleteServiceConfigRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteServiceConfigRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *DeleteServiceConfigRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceVersion = &v
}
  return nil
}

func (p *DeleteServiceConfigRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sku = &v
}
  return nil
}

func (p *DeleteServiceConfigRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *DeleteServiceConfigRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ConfigKey = &v
}
  return nil
}

func (p *DeleteServiceConfigRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteServiceConfigRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  }
  return err
}

func (p *DeleteServiceConfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceVersion() {
    if err := oprot.WriteFieldBegin("serviceVersion", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceVersion: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceVersion (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceVersion: ", p), err) }
  }
  return err
}

func (p *DeleteServiceConfigRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sku: ", p), err) }
    if err := oprot.WriteString(string(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sku: ", p), err) }
  }
  return err
}

func (p *DeleteServiceConfigRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err) }
  }
  return err
}

func (p *DeleteServiceConfigRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigKey() {
    if err := oprot.WriteFieldBegin("configKey", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:configKey: ", p), err) }
    if err := oprot.WriteString(string(*p.ConfigKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.configKey (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:configKey: ", p), err) }
  }
  return err
}

func (p *DeleteServiceConfigRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ServiceName
//  - ServiceVersion
//  - Sku
//  - Hostname
//  - ConfigKey
type ReadServiceConfigRequest struct {
  ServiceName *string `thrift:"serviceName,1" db:"serviceName" json:"serviceName,omitempty"`
  ServiceVersion *string `thrift:"serviceVersion,2" db:"serviceVersion" json:"serviceVersion,omitempty"`
  Sku *string `thrift:"sku,3" db:"sku" json:"sku,omitempty"`
  Hostname *string `thrift:"hostname,4" db:"hostname" json:"hostname,omitempty"`
  ConfigKey *string `thrift:"configKey,5" db:"configKey" json:"configKey,omitempty"`
}

func NewReadServiceConfigRequest() *ReadServiceConfigRequest {
  return &ReadServiceConfigRequest{}
}

var ReadServiceConfigRequest_ServiceName_DEFAULT string
func (p *ReadServiceConfigRequest) GetServiceName() string {
  if !p.IsSetServiceName() {
    return ReadServiceConfigRequest_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var ReadServiceConfigRequest_ServiceVersion_DEFAULT string
func (p *ReadServiceConfigRequest) GetServiceVersion() string {
  if !p.IsSetServiceVersion() {
    return ReadServiceConfigRequest_ServiceVersion_DEFAULT
  }
return *p.ServiceVersion
}
var ReadServiceConfigRequest_Sku_DEFAULT string
func (p *ReadServiceConfigRequest) GetSku() string {
  if !p.IsSetSku() {
    return ReadServiceConfigRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReadServiceConfigRequest_Hostname_DEFAULT string
func (p *ReadServiceConfigRequest) GetHostname() string {
  if !p.IsSetHostname() {
    return ReadServiceConfigRequest_Hostname_DEFAULT
  }
return *p.Hostname
}
var ReadServiceConfigRequest_ConfigKey_DEFAULT string
func (p *ReadServiceConfigRequest) GetConfigKey() string {
  if !p.IsSetConfigKey() {
    return ReadServiceConfigRequest_ConfigKey_DEFAULT
  }
return *p.ConfigKey
}
func (p *ReadServiceConfigRequest) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *ReadServiceConfigRequest) IsSetServiceVersion() bool {
  return p.ServiceVersion != nil
}

func (p *ReadServiceConfigRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReadServiceConfigRequest) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *ReadServiceConfigRequest) IsSetConfigKey() bool {
  return p.ConfigKey != nil
}

func (p *ReadServiceConfigRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadServiceConfigRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *ReadServiceConfigRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceVersion = &v
}
  return nil
}

func (p *ReadServiceConfigRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sku = &v
}
  return nil
}

func (p *ReadServiceConfigRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *ReadServiceConfigRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ConfigKey = &v
}
  return nil
}

func (p *ReadServiceConfigRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadServiceConfigRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadServiceConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  }
  return err
}

func (p *ReadServiceConfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceVersion() {
    if err := oprot.WriteFieldBegin("serviceVersion", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceVersion: ", p), err) }
    if err := oprot.WriteString(string(*p.ServiceVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceVersion (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceVersion: ", p), err) }
  }
  return err
}

func (p *ReadServiceConfigRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sku: ", p), err) }
    if err := oprot.WriteString(string(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sku: ", p), err) }
  }
  return err
}

func (p *ReadServiceConfigRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostname: ", p), err) }
  }
  return err
}

func (p *ReadServiceConfigRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigKey() {
    if err := oprot.WriteFieldBegin("configKey", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:configKey: ", p), err) }
    if err := oprot.WriteString(string(*p.ConfigKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.configKey (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:configKey: ", p), err) }
  }
  return err
}

func (p *ReadServiceConfigRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadServiceConfigRequest(%+v)", *p)
}

// Attributes:
//  - ConfigItems
type ReadServiceConfigResult_ struct {
  ConfigItems []*ServiceConfigItem `thrift:"configItems,1" db:"configItems" json:"configItems,omitempty"`
}

func NewReadServiceConfigResult_() *ReadServiceConfigResult_ {
  return &ReadServiceConfigResult_{}
}

var ReadServiceConfigResult__ConfigItems_DEFAULT []*ServiceConfigItem

func (p *ReadServiceConfigResult_) GetConfigItems() []*ServiceConfigItem {
  return p.ConfigItems
}
func (p *ReadServiceConfigResult_) IsSetConfigItems() bool {
  return p.ConfigItems != nil
}

func (p *ReadServiceConfigResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadServiceConfigResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ServiceConfigItem, 0, size)
  p.ConfigItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &ServiceConfigItem{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.ConfigItems = append(p.ConfigItems, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadServiceConfigResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadServiceConfigResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadServiceConfigResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigItems() {
    if err := oprot.WriteFieldBegin("configItems", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:configItems: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConfigItems)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ConfigItems {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:configItems: ", p), err) }
  }
  return err
}

func (p *ReadServiceConfigResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadServiceConfigResult_(%+v)", *p)
}

type MetadataExposable interface {
  // Parameters:
  //  - GetRequest
  ReadDestination(getRequest *shared.ReadDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - ListRequest
  ListDestinations(listRequest *shared.ListDestinationsRequest) (r *shared.ListDestinationsResult_, err error)
  // Parameters:
  //  - ListRequest
  ListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (r *shared.ListDestinationsResult_, err error)
  // Parameters:
  //  - Request
  ListExtentsStats(request *shared.ListExtentsStatsRequest) (r *shared.ListExtentsStatsResult_, err error)
  // Parameters:
  //  - Request
  ListInputHostExtentsStats(request *ListInputHostExtentsStatsRequest) (r *ListInputHostExtentsStatsResult_, err error)
  // Parameters:
  //  - Request
  ListStoreExtentsStats(request *ListStoreExtentsStatsRequest) (r *ListStoreExtentsStatsResult_, err error)
  // Parameters:
  //  - Request
  ReadExtentStats(request *ReadExtentStatsRequest) (r *ReadExtentStatsResult_, err error)
  // Parameters:
  //  - Request
  ReadConsumerGroupExtent(request *ReadConsumerGroupExtentRequest) (r *ReadConsumerGroupExtentResult_, err error)
  // Parameters:
  //  - Request
  ReadConsumerGroupExtents(request *ReadConsumerGroupExtentsRequest) (r *ReadConsumerGroupExtentsResult_, err error)
  // Parameters:
  //  - HostAddr
  HostAddrToUUID(hostAddr string) (r string, err error)
  // Parameters:
  //  - HostUUID
  UUIDToHostAddr(hostUUID string) (r string, err error)
  // Parameters:
  //  - Request
  ListHosts(request *ListHostsRequest) (r *ListHostsResult_, err error)
  // Parameters:
  //  - ListRequest
  ListAllConsumerGroups(listRequest *shared.ListConsumerGroupRequest) (r *shared.ListConsumerGroupResult_, err error)
  // Parameters:
  //  - ListRequest
  ListEntityOps(listRequest *ListEntityOpsRequest) (r *ListEntityOpsResult_, err error)
  // Parameters:
  //  - ListRequest
  ListConsumerGroups(listRequest *shared.ListConsumerGroupRequest) (r *shared.ListConsumerGroupResult_, err error)
  // Parameters:
  //  - Request
  ReadConsumerGroupExtentsByExtUUID(request *ReadConsumerGroupExtentsByExtUUIDRequest) (r *ReadConsumerGroupExtentsByExtUUIDResult_, err error)
  // Parameters:
  //  - GetRequest
  ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - Request
  ReadConsumerGroupByUUID(request *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - Request
  CreateServiceConfig(request *CreateServiceConfigRequest) (err error)
  // Parameters:
  //  - Request
  ReadServiceConfig(request *ReadServiceConfigRequest) (r *ReadServiceConfigResult_, err error)
  // Parameters:
  //  - Request
  UpdateServiceConfig(request *UpdateServiceConfigRequest) (err error)
  // Parameters:
  //  - Request
  DeleteServiceConfig(request *DeleteServiceConfigRequest) (err error)
}

type MetadataExposableClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewMetadataExposableClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetadataExposableClient {
  return &MetadataExposableClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMetadataExposableClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetadataExposableClient {
  return &MetadataExposableClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - GetRequest
func (p *MetadataExposableClient) ReadDestination(getRequest *shared.ReadDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendReadDestination(getRequest); err != nil { return }
  return p.recvReadDestination()
}

func (p *MetadataExposableClient) sendReadDestination(getRequest *shared.ReadDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadDestinationArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestination failed: invalid message type")
    return
  }
  result := MetadataExposableReadDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListDestinations(listRequest *shared.ListDestinationsRequest) (r *shared.ListDestinationsResult_, err error) {
  if err = p.sendListDestinations(listRequest); err != nil { return }
  return p.recvListDestinations()
}

func (p *MetadataExposableClient) sendListDestinations(listRequest *shared.ListDestinationsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listDestinations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListDestinationsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListDestinations() (value *shared.ListDestinationsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listDestinations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinations failed: invalid message type")
    return
  }
  result := MetadataExposableListDestinationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (r *shared.ListDestinationsResult_, err error) {
  if err = p.sendListDestinationsByUUID(listRequest); err != nil { return }
  return p.recvListDestinationsByUUID()
}

func (p *MetadataExposableClient) sendListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listDestinationsByUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListDestinationsByUUIDArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListDestinationsByUUID() (value *shared.ListDestinationsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listDestinationsByUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinationsByUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinationsByUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinationsByUUID failed: invalid message type")
    return
  }
  result := MetadataExposableListDestinationsByUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListExtentsStats(request *shared.ListExtentsStatsRequest) (r *shared.ListExtentsStatsResult_, err error) {
  if err = p.sendListExtentsStats(request); err != nil { return }
  return p.recvListExtentsStats()
}

func (p *MetadataExposableClient) sendListExtentsStats(request *shared.ListExtentsStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listExtentsStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListExtentsStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListExtentsStats() (value *shared.ListExtentsStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listExtentsStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listExtentsStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listExtentsStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listExtentsStats failed: invalid message type")
    return
  }
  result := MetadataExposableListExtentsStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListInputHostExtentsStats(request *ListInputHostExtentsStatsRequest) (r *ListInputHostExtentsStatsResult_, err error) {
  if err = p.sendListInputHostExtentsStats(request); err != nil { return }
  return p.recvListInputHostExtentsStats()
}

func (p *MetadataExposableClient) sendListInputHostExtentsStats(request *ListInputHostExtentsStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListInputHostExtentsStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListInputHostExtentsStats() (value *ListInputHostExtentsStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listInputHostExtentsStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listInputHostExtentsStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listInputHostExtentsStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listInputHostExtentsStats failed: invalid message type")
    return
  }
  result := MetadataExposableListInputHostExtentsStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListStoreExtentsStats(request *ListStoreExtentsStatsRequest) (r *ListStoreExtentsStatsResult_, err error) {
  if err = p.sendListStoreExtentsStats(request); err != nil { return }
  return p.recvListStoreExtentsStats()
}

func (p *MetadataExposableClient) sendListStoreExtentsStats(request *ListStoreExtentsStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listStoreExtentsStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListStoreExtentsStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListStoreExtentsStats() (value *ListStoreExtentsStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listStoreExtentsStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listStoreExtentsStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listStoreExtentsStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listStoreExtentsStats failed: invalid message type")
    return
  }
  result := MetadataExposableListStoreExtentsStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadExtentStats(request *ReadExtentStatsRequest) (r *ReadExtentStatsResult_, err error) {
  if err = p.sendReadExtentStats(request); err != nil { return }
  return p.recvReadExtentStats()
}

func (p *MetadataExposableClient) sendReadExtentStats(request *ReadExtentStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readExtentStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadExtentStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadExtentStats() (value *ReadExtentStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readExtentStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readExtentStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readExtentStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readExtentStats failed: invalid message type")
    return
  }
  result := MetadataExposableReadExtentStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupExtent(request *ReadConsumerGroupExtentRequest) (r *ReadConsumerGroupExtentResult_, err error) {
  if err = p.sendReadConsumerGroupExtent(request); err != nil { return }
  return p.recvReadConsumerGroupExtent()
}

func (p *MetadataExposableClient) sendReadConsumerGroupExtent(request *ReadConsumerGroupExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadConsumerGroupExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadConsumerGroupExtent() (value *ReadConsumerGroupExtentResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroupExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtent failed: invalid message type")
    return
  }
  result := MetadataExposableReadConsumerGroupExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupExtents(request *ReadConsumerGroupExtentsRequest) (r *ReadConsumerGroupExtentsResult_, err error) {
  if err = p.sendReadConsumerGroupExtents(request); err != nil { return }
  return p.recvReadConsumerGroupExtents()
}

func (p *MetadataExposableClient) sendReadConsumerGroupExtents(request *ReadConsumerGroupExtentsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadConsumerGroupExtentsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadConsumerGroupExtents() (value *ReadConsumerGroupExtentsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroupExtents" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtents failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtents failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtents failed: invalid message type")
    return
  }
  result := MetadataExposableReadConsumerGroupExtentsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - HostAddr
func (p *MetadataExposableClient) HostAddrToUUID(hostAddr string) (r string, err error) {
  if err = p.sendHostAddrToUUID(hostAddr); err != nil { return }
  return p.recvHostAddrToUUID()
}

func (p *MetadataExposableClient) sendHostAddrToUUID(hostAddr string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("hostAddrToUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableHostAddrToUUIDArgs{
  HostAddr : hostAddr,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvHostAddrToUUID() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "hostAddrToUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "hostAddrToUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "hostAddrToUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hostAddrToUUID failed: invalid message type")
    return
  }
  result := MetadataExposableHostAddrToUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.NotExistsError != nil {
    err = result.NotExistsError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - HostUUID
func (p *MetadataExposableClient) UUIDToHostAddr(hostUUID string) (r string, err error) {
  if err = p.sendUUIDToHostAddr(hostUUID); err != nil { return }
  return p.recvUUIDToHostAddr()
}

func (p *MetadataExposableClient) sendUUIDToHostAddr(hostUUID string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("uUIDToHostAddr", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableUUIDToHostAddrArgs{
  HostUUID : hostUUID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvUUIDToHostAddr() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "uUIDToHostAddr" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "uUIDToHostAddr failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "uUIDToHostAddr failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "uUIDToHostAddr failed: invalid message type")
    return
  }
  result := MetadataExposableUUIDToHostAddrResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.NotExistsError != nil {
    err = result.NotExistsError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ListHosts(request *ListHostsRequest) (r *ListHostsResult_, err error) {
  if err = p.sendListHosts(request); err != nil { return }
  return p.recvListHosts()
}

func (p *MetadataExposableClient) sendListHosts(request *ListHostsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListHostsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListHosts() (value *ListHostsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listHosts" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listHosts failed: invalid message type")
    return
  }
  result := MetadataExposableListHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListAllConsumerGroups(listRequest *shared.ListConsumerGroupRequest) (r *shared.ListConsumerGroupResult_, err error) {
  if err = p.sendListAllConsumerGroups(listRequest); err != nil { return }
  return p.recvListAllConsumerGroups()
}

func (p *MetadataExposableClient) sendListAllConsumerGroups(listRequest *shared.ListConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listAllConsumerGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListAllConsumerGroupsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListAllConsumerGroups() (value *shared.ListConsumerGroupResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listAllConsumerGroups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listAllConsumerGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listAllConsumerGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listAllConsumerGroups failed: invalid message type")
    return
  }
  result := MetadataExposableListAllConsumerGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListEntityOps(listRequest *ListEntityOpsRequest) (r *ListEntityOpsResult_, err error) {
  if err = p.sendListEntityOps(listRequest); err != nil { return }
  return p.recvListEntityOps()
}

func (p *MetadataExposableClient) sendListEntityOps(listRequest *ListEntityOpsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ListEntityOps", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListEntityOpsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListEntityOps() (value *ListEntityOpsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ListEntityOps" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ListEntityOps failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ListEntityOps failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error47 error
    error47, err = error46.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error47
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ListEntityOps failed: invalid message type")
    return
  }
  result := MetadataExposableListEntityOpsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *MetadataExposableClient) ListConsumerGroups(listRequest *shared.ListConsumerGroupRequest) (r *shared.ListConsumerGroupResult_, err error) {
  if err = p.sendListConsumerGroups(listRequest); err != nil { return }
  return p.recvListConsumerGroups()
}

func (p *MetadataExposableClient) sendListConsumerGroups(listRequest *shared.ListConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConsumerGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableListConsumerGroupsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvListConsumerGroups() (value *shared.ListConsumerGroupResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConsumerGroups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listConsumerGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listConsumerGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error49 error
    error49, err = error48.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error49
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConsumerGroups failed: invalid message type")
    return
  }
  result := MetadataExposableListConsumerGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupExtentsByExtUUID(request *ReadConsumerGroupExtentsByExtUUIDRequest) (r *ReadConsumerGroupExtentsByExtUUIDResult_, err error) {
  if err = p.sendReadConsumerGroupExtentsByExtUUID(request); err != nil { return }
  return p.recvReadConsumerGroupExtentsByExtUUID()
}

func (p *MetadataExposableClient) sendReadConsumerGroupExtentsByExtUUID(request *ReadConsumerGroupExtentsByExtUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadConsumerGroupExtentsByExtUUID() (value *ReadConsumerGroupExtentsByExtUUIDResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroupExtentsByExtUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtentsByExtUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtentsByExtUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error51 error
    error51, err = error50.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error51
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtentsByExtUUID failed: invalid message type")
    return
  }
  result := MetadataExposableReadConsumerGroupExtentsByExtUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetRequest
func (p *MetadataExposableClient) ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendReadConsumerGroup(getRequest); err != nil { return }
  return p.recvReadConsumerGroup()
}

func (p *MetadataExposableClient) sendReadConsumerGroup(getRequest *ReadConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadConsumerGroupArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error53 error
    error53, err = error52.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error53
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroup failed: invalid message type")
    return
  }
  result := MetadataExposableReadConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadConsumerGroupByUUID(request *ReadConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendReadConsumerGroupByUUID(request); err != nil { return }
  return p.recvReadConsumerGroupByUUID()
}

func (p *MetadataExposableClient) sendReadConsumerGroupByUUID(request *ReadConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadConsumerGroupByUUIDArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadConsumerGroupByUUID() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroupByUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupByUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupByUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error55 error
    error55, err = error54.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error55
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupByUUID failed: invalid message type")
    return
  }
  result := MetadataExposableReadConsumerGroupByUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) CreateServiceConfig(request *CreateServiceConfigRequest) (err error) {
  if err = p.sendCreateServiceConfig(request); err != nil { return }
  return p.recvCreateServiceConfig()
}

func (p *MetadataExposableClient) sendCreateServiceConfig(request *CreateServiceConfigRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createServiceConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableCreateServiceConfigArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvCreateServiceConfig() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createServiceConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createServiceConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createServiceConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error57 error
    error57, err = error56.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error57
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createServiceConfig failed: invalid message type")
    return
  }
  result := MetadataExposableCreateServiceConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) ReadServiceConfig(request *ReadServiceConfigRequest) (r *ReadServiceConfigResult_, err error) {
  if err = p.sendReadServiceConfig(request); err != nil { return }
  return p.recvReadServiceConfig()
}

func (p *MetadataExposableClient) sendReadServiceConfig(request *ReadServiceConfigRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readServiceConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableReadServiceConfigArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvReadServiceConfig() (value *ReadServiceConfigResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readServiceConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readServiceConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readServiceConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error59 error
    error59, err = error58.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error59
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readServiceConfig failed: invalid message type")
    return
  }
  result := MetadataExposableReadServiceConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) UpdateServiceConfig(request *UpdateServiceConfigRequest) (err error) {
  if err = p.sendUpdateServiceConfig(request); err != nil { return }
  return p.recvUpdateServiceConfig()
}

func (p *MetadataExposableClient) sendUpdateServiceConfig(request *UpdateServiceConfigRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateServiceConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableUpdateServiceConfigArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvUpdateServiceConfig() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateServiceConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateServiceConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateServiceConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error61 error
    error61, err = error60.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error61
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateServiceConfig failed: invalid message type")
    return
  }
  result := MetadataExposableUpdateServiceConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataExposableClient) DeleteServiceConfig(request *DeleteServiceConfigRequest) (err error) {
  if err = p.sendDeleteServiceConfig(request); err != nil { return }
  return p.recvDeleteServiceConfig()
}

func (p *MetadataExposableClient) sendDeleteServiceConfig(request *DeleteServiceConfigRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteServiceConfig", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataExposableDeleteServiceConfigArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataExposableClient) recvDeleteServiceConfig() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteServiceConfig" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteServiceConfig failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteServiceConfig failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error63 error
    error63, err = error62.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error63
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteServiceConfig failed: invalid message type")
    return
  }
  result := MetadataExposableDeleteServiceConfigResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}


type MetadataExposableProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MetadataExposable
}

func (p *MetadataExposableProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MetadataExposableProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MetadataExposableProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMetadataExposableProcessor(handler MetadataExposable) *MetadataExposableProcessor {

  self64 := &MetadataExposableProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self64.processorMap["readDestination"] = &metadataExposableProcessorReadDestination{handler:handler}
  self64.processorMap["listDestinations"] = &metadataExposableProcessorListDestinations{handler:handler}
  self64.processorMap["listDestinationsByUUID"] = &metadataExposableProcessorListDestinationsByUUID{handler:handler}
  self64.processorMap["listExtentsStats"] = &metadataExposableProcessorListExtentsStats{handler:handler}
  self64.processorMap["listInputHostExtentsStats"] = &metadataExposableProcessorListInputHostExtentsStats{handler:handler}
  self64.processorMap["listStoreExtentsStats"] = &metadataExposableProcessorListStoreExtentsStats{handler:handler}
  self64.processorMap["readExtentStats"] = &metadataExposableProcessorReadExtentStats{handler:handler}
  self64.processorMap["readConsumerGroupExtent"] = &metadataExposableProcessorReadConsumerGroupExtent{handler:handler}
  self64.processorMap["readConsumerGroupExtents"] = &metadataExposableProcessorReadConsumerGroupExtents{handler:handler}
  self64.processorMap["hostAddrToUUID"] = &metadataExposableProcessorHostAddrToUUID{handler:handler}
  self64.processorMap["uUIDToHostAddr"] = &metadataExposableProcessorUUIDToHostAddr{handler:handler}
  self64.processorMap["listHosts"] = &metadataExposableProcessorListHosts{handler:handler}
  self64.processorMap["listAllConsumerGroups"] = &metadataExposableProcessorListAllConsumerGroups{handler:handler}
  self64.processorMap["ListEntityOps"] = &metadataExposableProcessorListEntityOps{handler:handler}
  self64.processorMap["listConsumerGroups"] = &metadataExposableProcessorListConsumerGroups{handler:handler}
  self64.processorMap["readConsumerGroupExtentsByExtUUID"] = &metadataExposableProcessorReadConsumerGroupExtentsByExtUUID{handler:handler}
  self64.processorMap["readConsumerGroup"] = &metadataExposableProcessorReadConsumerGroup{handler:handler}
  self64.processorMap["readConsumerGroupByUUID"] = &metadataExposableProcessorReadConsumerGroupByUUID{handler:handler}
  self64.processorMap["createServiceConfig"] = &metadataExposableProcessorCreateServiceConfig{handler:handler}
  self64.processorMap["readServiceConfig"] = &metadataExposableProcessorReadServiceConfig{handler:handler}
  self64.processorMap["updateServiceConfig"] = &metadataExposableProcessorUpdateServiceConfig{handler:handler}
  self64.processorMap["deleteServiceConfig"] = &metadataExposableProcessorDeleteServiceConfig{handler:handler}
return self64
}

func (p *MetadataExposableProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x65 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x65.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x65

}

type metadataExposableProcessorReadDestination struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.ReadDestination(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestination: " + err2.Error())
    oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListDestinations struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListDestinations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListDestinationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListDestinationsResult{}
var retval *shared.ListDestinationsResult_
  var err2 error
  if retval, err2 = p.handler.ListDestinations(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinations: " + err2.Error())
    oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listDestinations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListDestinationsByUUID struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListDestinationsByUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListDestinationsByUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listDestinationsByUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListDestinationsByUUIDResult{}
var retval *shared.ListDestinationsResult_
  var err2 error
  if retval, err2 = p.handler.ListDestinationsByUUID(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinationsByUUID: " + err2.Error())
    oprot.WriteMessageBegin("listDestinationsByUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listDestinationsByUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListExtentsStats struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListExtentsStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListExtentsStatsResult{}
var retval *shared.ListExtentsStatsResult_
  var err2 error
  if retval, err2 = p.handler.ListExtentsStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listExtentsStats: " + err2.Error())
    oprot.WriteMessageBegin("listExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listExtentsStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListInputHostExtentsStats struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListInputHostExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListInputHostExtentsStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListInputHostExtentsStatsResult{}
var retval *ListInputHostExtentsStatsResult_
  var err2 error
  if retval, err2 = p.handler.ListInputHostExtentsStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listInputHostExtentsStats: " + err2.Error())
    oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listInputHostExtentsStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListStoreExtentsStats struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListStoreExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListStoreExtentsStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listStoreExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListStoreExtentsStatsResult{}
var retval *ListStoreExtentsStatsResult_
  var err2 error
  if retval, err2 = p.handler.ListStoreExtentsStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listStoreExtentsStats: " + err2.Error())
    oprot.WriteMessageBegin("listStoreExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listStoreExtentsStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadExtentStats struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadExtentStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadExtentStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readExtentStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadExtentStatsResult{}
var retval *ReadExtentStatsResult_
  var err2 error
  if retval, err2 = p.handler.ReadExtentStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readExtentStats: " + err2.Error())
    oprot.WriteMessageBegin("readExtentStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readExtentStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadConsumerGroupExtent struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadConsumerGroupExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadConsumerGroupExtentResult{}
var retval *ReadConsumerGroupExtentResult_
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroupExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtent: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroupExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadConsumerGroupExtents struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupExtents) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadConsumerGroupExtentsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadConsumerGroupExtentsResult{}
var retval *ReadConsumerGroupExtentsResult_
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroupExtents(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtents: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroupExtents", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorHostAddrToUUID struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorHostAddrToUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableHostAddrToUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("hostAddrToUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableHostAddrToUUIDResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.HostAddrToUUID(args.HostAddr); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.NotExistsError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hostAddrToUUID: " + err2.Error())
    oprot.WriteMessageBegin("hostAddrToUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("hostAddrToUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorUUIDToHostAddr struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorUUIDToHostAddr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableUUIDToHostAddrArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("uUIDToHostAddr", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableUUIDToHostAddrResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.UUIDToHostAddr(args.HostUUID); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.NotExistsError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uUIDToHostAddr: " + err2.Error())
    oprot.WriteMessageBegin("uUIDToHostAddr", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("uUIDToHostAddr", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListHosts struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListHostsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListHostsResult{}
var retval *ListHostsResult_
  var err2 error
  if retval, err2 = p.handler.ListHosts(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listHosts: " + err2.Error())
    oprot.WriteMessageBegin("listHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listHosts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListAllConsumerGroups struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListAllConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListAllConsumerGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listAllConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListAllConsumerGroupsResult{}
var retval *shared.ListConsumerGroupResult_
  var err2 error
  if retval, err2 = p.handler.ListAllConsumerGroups(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listAllConsumerGroups: " + err2.Error())
    oprot.WriteMessageBegin("listAllConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listAllConsumerGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListEntityOps struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListEntityOps) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListEntityOpsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ListEntityOps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListEntityOpsResult{}
var retval *ListEntityOpsResult_
  var err2 error
  if retval, err2 = p.handler.ListEntityOps(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEntityOps: " + err2.Error())
    oprot.WriteMessageBegin("ListEntityOps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ListEntityOps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorListConsumerGroups struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorListConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableListConsumerGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableListConsumerGroupsResult{}
var retval *shared.ListConsumerGroupResult_
  var err2 error
  if retval, err2 = p.handler.ListConsumerGroups(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConsumerGroups: " + err2.Error())
    oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listConsumerGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadConsumerGroupExtentsByExtUUID struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupExtentsByExtUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadConsumerGroupExtentsByExtUUIDResult{}
var retval *ReadConsumerGroupExtentsByExtUUIDResult_
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroupExtentsByExtUUID(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtentsByExtUUID: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroupExtentsByExtUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadConsumerGroup struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadConsumerGroupResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroup(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadConsumerGroupByUUID struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadConsumerGroupByUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadConsumerGroupByUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadConsumerGroupByUUIDResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroupByUUID(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupByUUID: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroupByUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorCreateServiceConfig struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorCreateServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableCreateServiceConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableCreateServiceConfigResult{}
  var err2 error
  if err2 = p.handler.CreateServiceConfig(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createServiceConfig: " + err2.Error())
    oprot.WriteMessageBegin("createServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createServiceConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorReadServiceConfig struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorReadServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableReadServiceConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableReadServiceConfigResult{}
var retval *ReadServiceConfigResult_
  var err2 error
  if retval, err2 = p.handler.ReadServiceConfig(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readServiceConfig: " + err2.Error())
    oprot.WriteMessageBegin("readServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readServiceConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorUpdateServiceConfig struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorUpdateServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableUpdateServiceConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableUpdateServiceConfigResult{}
  var err2 error
  if err2 = p.handler.UpdateServiceConfig(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateServiceConfig: " + err2.Error())
    oprot.WriteMessageBegin("updateServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateServiceConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataExposableProcessorDeleteServiceConfig struct {
  handler MetadataExposable
}

func (p *metadataExposableProcessorDeleteServiceConfig) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataExposableDeleteServiceConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataExposableDeleteServiceConfigResult{}
  var err2 error
  if err2 = p.handler.DeleteServiceConfig(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteServiceConfig: " + err2.Error())
    oprot.WriteMessageBegin("deleteServiceConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteServiceConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GetRequest
type MetadataExposableReadDestinationArgs struct {
  GetRequest *shared.ReadDestinationRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewMetadataExposableReadDestinationArgs() *MetadataExposableReadDestinationArgs {
  return &MetadataExposableReadDestinationArgs{}
}

var MetadataExposableReadDestinationArgs_GetRequest_DEFAULT *shared.ReadDestinationRequest
func (p *MetadataExposableReadDestinationArgs) GetGetRequest() *shared.ReadDestinationRequest {
  if !p.IsSetGetRequest() {
    return MetadataExposableReadDestinationArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *MetadataExposableReadDestinationArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *MetadataExposableReadDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &shared.ReadDestinationRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *MetadataExposableReadDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataExposableReadDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableReadDestinationResult() *MetadataExposableReadDestinationResult {
  return &MetadataExposableReadDestinationResult{}
}

var MetadataExposableReadDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *MetadataExposableReadDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return MetadataExposableReadDestinationResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataExposableReadDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataExposableReadDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataExposableReadDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataExposableReadDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataExposableReadDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataExposableReadDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataExposableReadDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataExposableReadDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadDestinationResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListDestinationsArgs struct {
  ListRequest *shared.ListDestinationsRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewMetadataExposableListDestinationsArgs() *MetadataExposableListDestinationsArgs {
  return &MetadataExposableListDestinationsArgs{}
}

var MetadataExposableListDestinationsArgs_ListRequest_DEFAULT *shared.ListDestinationsRequest
func (p *MetadataExposableListDestinationsArgs) GetListRequest() *shared.ListDestinationsRequest {
  if !p.IsSetListRequest() {
    return MetadataExposableListDestinationsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *MetadataExposableListDestinationsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *MetadataExposableListDestinationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListDestinationsRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListDestinationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *MetadataExposableListDestinationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListDestinationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataExposableListDestinationsResult struct {
  Success *shared.ListDestinationsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableListDestinationsResult() *MetadataExposableListDestinationsResult {
  return &MetadataExposableListDestinationsResult{}
}

var MetadataExposableListDestinationsResult_Success_DEFAULT *shared.ListDestinationsResult_
func (p *MetadataExposableListDestinationsResult) GetSuccess() *shared.ListDestinationsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListDestinationsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListDestinationsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListDestinationsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListDestinationsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListDestinationsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListDestinationsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataExposableListDestinationsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataExposableListDestinationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListDestinationsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListDestinationsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataExposableListDestinationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListDestinationsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListDestinationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListDestinationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListDestinationsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListDestinationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListDestinationsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListDestinationsByUUIDArgs struct {
  ListRequest *shared.ListDestinationsByUUIDRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewMetadataExposableListDestinationsByUUIDArgs() *MetadataExposableListDestinationsByUUIDArgs {
  return &MetadataExposableListDestinationsByUUIDArgs{}
}

var MetadataExposableListDestinationsByUUIDArgs_ListRequest_DEFAULT *shared.ListDestinationsByUUIDRequest
func (p *MetadataExposableListDestinationsByUUIDArgs) GetListRequest() *shared.ListDestinationsByUUIDRequest {
  if !p.IsSetListRequest() {
    return MetadataExposableListDestinationsByUUIDArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *MetadataExposableListDestinationsByUUIDArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListDestinationsByUUIDRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinationsByUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *MetadataExposableListDestinationsByUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListDestinationsByUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataExposableListDestinationsByUUIDResult struct {
  Success *shared.ListDestinationsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableListDestinationsByUUIDResult() *MetadataExposableListDestinationsByUUIDResult {
  return &MetadataExposableListDestinationsByUUIDResult{}
}

var MetadataExposableListDestinationsByUUIDResult_Success_DEFAULT *shared.ListDestinationsResult_
func (p *MetadataExposableListDestinationsByUUIDResult) GetSuccess() *shared.ListDestinationsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListDestinationsByUUIDResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListDestinationsByUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListDestinationsByUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListDestinationsByUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListDestinationsByUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListDestinationsByUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataExposableListDestinationsByUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataExposableListDestinationsByUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListDestinationsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinationsByUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListDestinationsByUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListDestinationsByUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListDestinationsByUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListDestinationsByUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListDestinationsByUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListExtentsStatsArgs struct {
  Request *shared.ListExtentsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableListExtentsStatsArgs() *MetadataExposableListExtentsStatsArgs {
  return &MetadataExposableListExtentsStatsArgs{}
}

var MetadataExposableListExtentsStatsArgs_Request_DEFAULT *shared.ListExtentsStatsRequest
func (p *MetadataExposableListExtentsStatsArgs) GetRequest() *shared.ListExtentsStatsRequest {
  if !p.IsSetRequest() {
    return MetadataExposableListExtentsStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableListExtentsStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableListExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListExtentsStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.ListExtentsStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableListExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listExtentsStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableListExtentsStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataExposableListExtentsStatsResult struct {
  Success *shared.ListExtentsStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableListExtentsStatsResult() *MetadataExposableListExtentsStatsResult {
  return &MetadataExposableListExtentsStatsResult{}
}

var MetadataExposableListExtentsStatsResult_Success_DEFAULT *shared.ListExtentsStatsResult_
func (p *MetadataExposableListExtentsStatsResult) GetSuccess() *shared.ListExtentsStatsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListExtentsStatsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListExtentsStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListExtentsStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListExtentsStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListExtentsStatsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataExposableListExtentsStatsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataExposableListExtentsStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListExtentsStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListExtentsStatsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataExposableListExtentsStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListExtentsStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListExtentsStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListExtentsStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListExtentsStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataExposableListExtentsStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listExtentsStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListExtentsStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListInputHostExtentsStatsArgs struct {
  Request *ListInputHostExtentsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableListInputHostExtentsStatsArgs() *MetadataExposableListInputHostExtentsStatsArgs {
  return &MetadataExposableListInputHostExtentsStatsArgs{}
}

var MetadataExposableListInputHostExtentsStatsArgs_Request_DEFAULT *ListInputHostExtentsStatsRequest
func (p *MetadataExposableListInputHostExtentsStatsArgs) GetRequest() *ListInputHostExtentsStatsRequest {
  if !p.IsSetRequest() {
    return MetadataExposableListInputHostExtentsStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableListInputHostExtentsStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ListInputHostExtentsStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listInputHostExtentsStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableListInputHostExtentsStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListInputHostExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListInputHostExtentsStatsResult struct {
  Success *ListInputHostExtentsStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableListInputHostExtentsStatsResult() *MetadataExposableListInputHostExtentsStatsResult {
  return &MetadataExposableListInputHostExtentsStatsResult{}
}

var MetadataExposableListInputHostExtentsStatsResult_Success_DEFAULT *ListInputHostExtentsStatsResult_
func (p *MetadataExposableListInputHostExtentsStatsResult) GetSuccess() *ListInputHostExtentsStatsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListInputHostExtentsStatsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListInputHostExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListInputHostExtentsStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListInputHostExtentsStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListInputHostExtentsStatsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListInputHostExtentsStatsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableListInputHostExtentsStatsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableListInputHostExtentsStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListInputHostExtentsStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listInputHostExtentsStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListInputHostExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListInputHostExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListInputHostExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListInputHostExtentsStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListInputHostExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListStoreExtentsStatsArgs struct {
  Request *ListStoreExtentsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableListStoreExtentsStatsArgs() *MetadataExposableListStoreExtentsStatsArgs {
  return &MetadataExposableListStoreExtentsStatsArgs{}
}

var MetadataExposableListStoreExtentsStatsArgs_Request_DEFAULT *ListStoreExtentsStatsRequest
func (p *MetadataExposableListStoreExtentsStatsArgs) GetRequest() *ListStoreExtentsStatsRequest {
  if !p.IsSetRequest() {
    return MetadataExposableListStoreExtentsStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableListStoreExtentsStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ListStoreExtentsStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listStoreExtentsStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableListStoreExtentsStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListStoreExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListStoreExtentsStatsResult struct {
  Success *ListStoreExtentsStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableListStoreExtentsStatsResult() *MetadataExposableListStoreExtentsStatsResult {
  return &MetadataExposableListStoreExtentsStatsResult{}
}

var MetadataExposableListStoreExtentsStatsResult_Success_DEFAULT *ListStoreExtentsStatsResult_
func (p *MetadataExposableListStoreExtentsStatsResult) GetSuccess() *ListStoreExtentsStatsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListStoreExtentsStatsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListStoreExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListStoreExtentsStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListStoreExtentsStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListStoreExtentsStatsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListStoreExtentsStatsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableListStoreExtentsStatsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableListStoreExtentsStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListStoreExtentsStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listStoreExtentsStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListStoreExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListStoreExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListStoreExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListStoreExtentsStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListStoreExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadExtentStatsArgs struct {
  Request *ReadExtentStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableReadExtentStatsArgs() *MetadataExposableReadExtentStatsArgs {
  return &MetadataExposableReadExtentStatsArgs{}
}

var MetadataExposableReadExtentStatsArgs_Request_DEFAULT *ReadExtentStatsRequest
func (p *MetadataExposableReadExtentStatsArgs) GetRequest() *ReadExtentStatsRequest {
  if !p.IsSetRequest() {
    return MetadataExposableReadExtentStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableReadExtentStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableReadExtentStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadExtentStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadExtentStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableReadExtentStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readExtentStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadExtentStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableReadExtentStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadExtentStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadExtentStatsResult struct {
  Success *ReadExtentStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableReadExtentStatsResult() *MetadataExposableReadExtentStatsResult {
  return &MetadataExposableReadExtentStatsResult{}
}

var MetadataExposableReadExtentStatsResult_Success_DEFAULT *ReadExtentStatsResult_
func (p *MetadataExposableReadExtentStatsResult) GetSuccess() *ReadExtentStatsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableReadExtentStatsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadExtentStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadExtentStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadExtentStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadExtentStatsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadExtentStatsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableReadExtentStatsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableReadExtentStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadExtentStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadExtentStatsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableReadExtentStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadExtentStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadExtentStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadExtentStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadExtentStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableReadExtentStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readExtentStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadExtentStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadExtentStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadExtentStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadExtentStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadExtentStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupExtentArgs struct {
  Request *ReadConsumerGroupExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableReadConsumerGroupExtentArgs() *MetadataExposableReadConsumerGroupExtentArgs {
  return &MetadataExposableReadConsumerGroupExtentArgs{}
}

var MetadataExposableReadConsumerGroupExtentArgs_Request_DEFAULT *ReadConsumerGroupExtentRequest
func (p *MetadataExposableReadConsumerGroupExtentArgs) GetRequest() *ReadConsumerGroupExtentRequest {
  if !p.IsSetRequest() {
    return MetadataExposableReadConsumerGroupExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableReadConsumerGroupExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadConsumerGroupExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadConsumerGroupExtentResult struct {
  Success *ReadConsumerGroupExtentResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupExtentResult() *MetadataExposableReadConsumerGroupExtentResult {
  return &MetadataExposableReadConsumerGroupExtentResult{}
}

var MetadataExposableReadConsumerGroupExtentResult_Success_DEFAULT *ReadConsumerGroupExtentResult_
func (p *MetadataExposableReadConsumerGroupExtentResult) GetSuccess() *ReadConsumerGroupExtentResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableReadConsumerGroupExtentResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadConsumerGroupExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadConsumerGroupExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadConsumerGroupExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadConsumerGroupExtentResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadConsumerGroupExtentResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableReadConsumerGroupExtentResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableReadConsumerGroupExtentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadConsumerGroupExtentResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupExtentsArgs struct {
  Request *ReadConsumerGroupExtentsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableReadConsumerGroupExtentsArgs() *MetadataExposableReadConsumerGroupExtentsArgs {
  return &MetadataExposableReadConsumerGroupExtentsArgs{}
}

var MetadataExposableReadConsumerGroupExtentsArgs_Request_DEFAULT *ReadConsumerGroupExtentsRequest
func (p *MetadataExposableReadConsumerGroupExtentsArgs) GetRequest() *ReadConsumerGroupExtentsRequest {
  if !p.IsSetRequest() {
    return MetadataExposableReadConsumerGroupExtentsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableReadConsumerGroupExtentsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadConsumerGroupExtentsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtents_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadConsumerGroupExtentsResult struct {
  Success *ReadConsumerGroupExtentsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupExtentsResult() *MetadataExposableReadConsumerGroupExtentsResult {
  return &MetadataExposableReadConsumerGroupExtentsResult{}
}

var MetadataExposableReadConsumerGroupExtentsResult_Success_DEFAULT *ReadConsumerGroupExtentsResult_
func (p *MetadataExposableReadConsumerGroupExtentsResult) GetSuccess() *ReadConsumerGroupExtentsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableReadConsumerGroupExtentsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadConsumerGroupExtentsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadConsumerGroupExtentsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadConsumerGroupExtentsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadConsumerGroupExtentsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadConsumerGroupExtentsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableReadConsumerGroupExtentsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableReadConsumerGroupExtentsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadConsumerGroupExtentsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtents_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsResult(%+v)", *p)
}

// Attributes:
//  - HostAddr
type MetadataExposableHostAddrToUUIDArgs struct {
  HostAddr string `thrift:"hostAddr,1" db:"hostAddr" json:"hostAddr"`
}

func NewMetadataExposableHostAddrToUUIDArgs() *MetadataExposableHostAddrToUUIDArgs {
  return &MetadataExposableHostAddrToUUIDArgs{}
}


func (p *MetadataExposableHostAddrToUUIDArgs) GetHostAddr() string {
  return p.HostAddr
}
func (p *MetadataExposableHostAddrToUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableHostAddrToUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostAddr = v
}
  return nil
}

func (p *MetadataExposableHostAddrToUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("hostAddrToUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableHostAddrToUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostAddr", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddr: ", p), err) }
  if err := oprot.WriteString(string(p.HostAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostAddr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddr: ", p), err) }
  return err
}

func (p *MetadataExposableHostAddrToUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableHostAddrToUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotExistsError
//  - InternalError
type MetadataExposableHostAddrToUUIDResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,1" db:"notExistsError" json:"notExistsError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableHostAddrToUUIDResult() *MetadataExposableHostAddrToUUIDResult {
  return &MetadataExposableHostAddrToUUIDResult{}
}

var MetadataExposableHostAddrToUUIDResult_Success_DEFAULT string
func (p *MetadataExposableHostAddrToUUIDResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MetadataExposableHostAddrToUUIDResult_Success_DEFAULT
  }
return *p.Success
}
var MetadataExposableHostAddrToUUIDResult_NotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataExposableHostAddrToUUIDResult) GetNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetNotExistsError() {
    return MetadataExposableHostAddrToUUIDResult_NotExistsError_DEFAULT
  }
return p.NotExistsError
}
var MetadataExposableHostAddrToUUIDResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableHostAddrToUUIDResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableHostAddrToUUIDResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableHostAddrToUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableHostAddrToUUIDResult) IsSetNotExistsError() bool {
  return p.NotExistsError != nil
}

func (p *MetadataExposableHostAddrToUUIDResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableHostAddrToUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableHostAddrToUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MetadataExposableHostAddrToUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.NotExistsError = &shared.EntityNotExistsError{}
  if err := p.NotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
  }
  return nil
}

func (p *MetadataExposableHostAddrToUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("hostAddrToUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableHostAddrToUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableHostAddrToUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotExistsError() {
    if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notExistsError: ", p), err) }
    if err := p.NotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableHostAddrToUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableHostAddrToUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableHostAddrToUUIDResult(%+v)", *p)
}

// Attributes:
//  - HostUUID
type MetadataExposableUUIDToHostAddrArgs struct {
  HostUUID string `thrift:"hostUUID,1" db:"hostUUID" json:"hostUUID"`
}

func NewMetadataExposableUUIDToHostAddrArgs() *MetadataExposableUUIDToHostAddrArgs {
  return &MetadataExposableUUIDToHostAddrArgs{}
}


func (p *MetadataExposableUUIDToHostAddrArgs) GetHostUUID() string {
  return p.HostUUID
}
func (p *MetadataExposableUUIDToHostAddrArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableUUIDToHostAddrArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostUUID = v
}
  return nil
}

func (p *MetadataExposableUUIDToHostAddrArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("uUIDToHostAddr_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableUUIDToHostAddrArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostUUID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostUUID: ", p), err) }
  if err := oprot.WriteString(string(p.HostUUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostUUID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostUUID: ", p), err) }
  return err
}

func (p *MetadataExposableUUIDToHostAddrArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableUUIDToHostAddrArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - NotExistsError
//  - InternalError
type MetadataExposableUUIDToHostAddrResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,1" db:"notExistsError" json:"notExistsError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableUUIDToHostAddrResult() *MetadataExposableUUIDToHostAddrResult {
  return &MetadataExposableUUIDToHostAddrResult{}
}

var MetadataExposableUUIDToHostAddrResult_Success_DEFAULT string
func (p *MetadataExposableUUIDToHostAddrResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MetadataExposableUUIDToHostAddrResult_Success_DEFAULT
  }
return *p.Success
}
var MetadataExposableUUIDToHostAddrResult_NotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataExposableUUIDToHostAddrResult) GetNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetNotExistsError() {
    return MetadataExposableUUIDToHostAddrResult_NotExistsError_DEFAULT
  }
return p.NotExistsError
}
var MetadataExposableUUIDToHostAddrResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableUUIDToHostAddrResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableUUIDToHostAddrResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableUUIDToHostAddrResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableUUIDToHostAddrResult) IsSetNotExistsError() bool {
  return p.NotExistsError != nil
}

func (p *MetadataExposableUUIDToHostAddrResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableUUIDToHostAddrResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableUUIDToHostAddrResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MetadataExposableUUIDToHostAddrResult)  ReadField1(iprot thrift.TProtocol) error {
  p.NotExistsError = &shared.EntityNotExistsError{}
  if err := p.NotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
  }
  return nil
}

func (p *MetadataExposableUUIDToHostAddrResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("uUIDToHostAddr_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableUUIDToHostAddrResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableUUIDToHostAddrResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotExistsError() {
    if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notExistsError: ", p), err) }
    if err := p.NotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableUUIDToHostAddrResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableUUIDToHostAddrResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableUUIDToHostAddrResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableListHostsArgs struct {
  Request *ListHostsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableListHostsArgs() *MetadataExposableListHostsArgs {
  return &MetadataExposableListHostsArgs{}
}

var MetadataExposableListHostsArgs_Request_DEFAULT *ListHostsRequest
func (p *MetadataExposableListHostsArgs) GetRequest() *ListHostsRequest {
  if !p.IsSetRequest() {
    return MetadataExposableListHostsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableListHostsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableListHostsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListHostsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ListHostsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableListHostsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableListHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListHostsResult struct {
  Success *ListHostsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableListHostsResult() *MetadataExposableListHostsResult {
  return &MetadataExposableListHostsResult{}
}

var MetadataExposableListHostsResult_Success_DEFAULT *ListHostsResult_
func (p *MetadataExposableListHostsResult) GetSuccess() *ListHostsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListHostsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListHostsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListHostsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListHostsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListHostsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListHostsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableListHostsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableListHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListHostsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListHostsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableListHostsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListHostsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListHostsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListHostsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListHostsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableListHostsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListHostsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListAllConsumerGroupsArgs struct {
  ListRequest *shared.ListConsumerGroupRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewMetadataExposableListAllConsumerGroupsArgs() *MetadataExposableListAllConsumerGroupsArgs {
  return &MetadataExposableListAllConsumerGroupsArgs{}
}

var MetadataExposableListAllConsumerGroupsArgs_ListRequest_DEFAULT *shared.ListConsumerGroupRequest
func (p *MetadataExposableListAllConsumerGroupsArgs) GetListRequest() *shared.ListConsumerGroupRequest {
  if !p.IsSetListRequest() {
    return MetadataExposableListAllConsumerGroupsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *MetadataExposableListAllConsumerGroupsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListConsumerGroupRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listAllConsumerGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *MetadataExposableListAllConsumerGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListAllConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListAllConsumerGroupsResult struct {
  Success *shared.ListConsumerGroupResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableListAllConsumerGroupsResult() *MetadataExposableListAllConsumerGroupsResult {
  return &MetadataExposableListAllConsumerGroupsResult{}
}

var MetadataExposableListAllConsumerGroupsResult_Success_DEFAULT *shared.ListConsumerGroupResult_
func (p *MetadataExposableListAllConsumerGroupsResult) GetSuccess() *shared.ListConsumerGroupResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListAllConsumerGroupsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListAllConsumerGroupsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListAllConsumerGroupsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListAllConsumerGroupsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListAllConsumerGroupsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListAllConsumerGroupsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableListAllConsumerGroupsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableListAllConsumerGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListConsumerGroupResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listAllConsumerGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListAllConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListAllConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListAllConsumerGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListAllConsumerGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListAllConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListEntityOpsArgs struct {
  ListRequest *ListEntityOpsRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewMetadataExposableListEntityOpsArgs() *MetadataExposableListEntityOpsArgs {
  return &MetadataExposableListEntityOpsArgs{}
}

var MetadataExposableListEntityOpsArgs_ListRequest_DEFAULT *ListEntityOpsRequest
func (p *MetadataExposableListEntityOpsArgs) GetListRequest() *ListEntityOpsRequest {
  if !p.IsSetListRequest() {
    return MetadataExposableListEntityOpsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *MetadataExposableListEntityOpsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *MetadataExposableListEntityOpsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListEntityOpsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &ListEntityOpsRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *MetadataExposableListEntityOpsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListEntityOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListEntityOpsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *MetadataExposableListEntityOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListEntityOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListEntityOpsResult struct {
  Success *ListEntityOpsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableListEntityOpsResult() *MetadataExposableListEntityOpsResult {
  return &MetadataExposableListEntityOpsResult{}
}

var MetadataExposableListEntityOpsResult_Success_DEFAULT *ListEntityOpsResult_
func (p *MetadataExposableListEntityOpsResult) GetSuccess() *ListEntityOpsResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListEntityOpsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListEntityOpsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListEntityOpsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListEntityOpsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListEntityOpsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListEntityOpsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableListEntityOpsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableListEntityOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListEntityOpsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListEntityOpsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableListEntityOpsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListEntityOpsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListEntityOpsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListEntityOpsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListEntityOpsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableListEntityOpsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListEntityOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListEntityOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListEntityOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListEntityOpsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListEntityOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListEntityOpsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type MetadataExposableListConsumerGroupsArgs struct {
  ListRequest *shared.ListConsumerGroupRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewMetadataExposableListConsumerGroupsArgs() *MetadataExposableListConsumerGroupsArgs {
  return &MetadataExposableListConsumerGroupsArgs{}
}

var MetadataExposableListConsumerGroupsArgs_ListRequest_DEFAULT *shared.ListConsumerGroupRequest
func (p *MetadataExposableListConsumerGroupsArgs) GetListRequest() *shared.ListConsumerGroupRequest {
  if !p.IsSetListRequest() {
    return MetadataExposableListConsumerGroupsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *MetadataExposableListConsumerGroupsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *MetadataExposableListConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListConsumerGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListConsumerGroupRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *MetadataExposableListConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listConsumerGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *MetadataExposableListConsumerGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableListConsumerGroupsResult struct {
  Success *shared.ListConsumerGroupResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableListConsumerGroupsResult() *MetadataExposableListConsumerGroupsResult {
  return &MetadataExposableListConsumerGroupsResult{}
}

var MetadataExposableListConsumerGroupsResult_Success_DEFAULT *shared.ListConsumerGroupResult_
func (p *MetadataExposableListConsumerGroupsResult) GetSuccess() *shared.ListConsumerGroupResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableListConsumerGroupsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableListConsumerGroupsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableListConsumerGroupsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableListConsumerGroupsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableListConsumerGroupsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableListConsumerGroupsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableListConsumerGroupsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableListConsumerGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableListConsumerGroupsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableListConsumerGroupsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableListConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableListConsumerGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListConsumerGroupResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableListConsumerGroupsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableListConsumerGroupsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableListConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listConsumerGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableListConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListConsumerGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableListConsumerGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableListConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs struct {
  Request *ReadConsumerGroupExtentsByExtUUIDRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableReadConsumerGroupExtentsByExtUUIDArgs() *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs {
  return &MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs{}
}

var MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs_Request_DEFAULT *ReadConsumerGroupExtentsByExtUUIDRequest
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) GetRequest() *ReadConsumerGroupExtentsByExtUUIDRequest {
  if !p.IsSetRequest() {
    return MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadConsumerGroupExtentsByExtUUIDRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtentsByExtUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsByExtUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type MetadataExposableReadConsumerGroupExtentsByExtUUIDResult struct {
  Success *ReadConsumerGroupExtentsByExtUUIDResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupExtentsByExtUUIDResult() *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult {
  return &MetadataExposableReadConsumerGroupExtentsByExtUUIDResult{}
}

var MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_Success_DEFAULT *ReadConsumerGroupExtentsByExtUUIDResult_
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) GetSuccess() *ReadConsumerGroupExtentsByExtUUIDResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return MetadataExposableReadConsumerGroupExtentsByExtUUIDResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadConsumerGroupExtentsByExtUUIDResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtentsByExtUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupExtentsByExtUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupExtentsByExtUUIDResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type MetadataExposableReadConsumerGroupArgs struct {
  GetRequest *ReadConsumerGroupRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewMetadataExposableReadConsumerGroupArgs() *MetadataExposableReadConsumerGroupArgs {
  return &MetadataExposableReadConsumerGroupArgs{}
}

var MetadataExposableReadConsumerGroupArgs_GetRequest_DEFAULT *ReadConsumerGroupRequest
func (p *MetadataExposableReadConsumerGroupArgs) GetGetRequest() *ReadConsumerGroupRequest {
  if !p.IsSetGetRequest() {
    return MetadataExposableReadConsumerGroupArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *MetadataExposableReadConsumerGroupArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *MetadataExposableReadConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &ReadConsumerGroupRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *MetadataExposableReadConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataExposableReadConsumerGroupResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupResult() *MetadataExposableReadConsumerGroupResult {
  return &MetadataExposableReadConsumerGroupResult{}
}

var MetadataExposableReadConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *MetadataExposableReadConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return MetadataExposableReadConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataExposableReadConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataExposableReadConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataExposableReadConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataExposableReadConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataExposableReadConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataExposableReadConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataExposableReadConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadConsumerGroupByUUIDArgs struct {
  Request *ReadConsumerGroupRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableReadConsumerGroupByUUIDArgs() *MetadataExposableReadConsumerGroupByUUIDArgs {
  return &MetadataExposableReadConsumerGroupByUUIDArgs{}
}

var MetadataExposableReadConsumerGroupByUUIDArgs_Request_DEFAULT *ReadConsumerGroupRequest
func (p *MetadataExposableReadConsumerGroupByUUIDArgs) GetRequest() *ReadConsumerGroupRequest {
  if !p.IsSetRequest() {
    return MetadataExposableReadConsumerGroupByUUIDArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableReadConsumerGroupByUUIDArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadConsumerGroupRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupByUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupByUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - EntityError
//  - InternalServiceError
type MetadataExposableReadConsumerGroupByUUIDResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,2" db:"entityError" json:"entityError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataExposableReadConsumerGroupByUUIDResult() *MetadataExposableReadConsumerGroupByUUIDResult {
  return &MetadataExposableReadConsumerGroupByUUIDResult{}
}

var MetadataExposableReadConsumerGroupByUUIDResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return MetadataExposableReadConsumerGroupByUUIDResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadConsumerGroupByUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataExposableReadConsumerGroupByUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataExposableReadConsumerGroupByUUIDResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataExposableReadConsumerGroupByUUIDResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataExposableReadConsumerGroupByUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadConsumerGroupByUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataExposableReadConsumerGroupByUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupByUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadConsumerGroupByUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadConsumerGroupByUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableCreateServiceConfigArgs struct {
  Request *CreateServiceConfigRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableCreateServiceConfigArgs() *MetadataExposableCreateServiceConfigArgs {
  return &MetadataExposableCreateServiceConfigArgs{}
}

var MetadataExposableCreateServiceConfigArgs_Request_DEFAULT *CreateServiceConfigRequest
func (p *MetadataExposableCreateServiceConfigArgs) GetRequest() *CreateServiceConfigRequest {
  if !p.IsSetRequest() {
    return MetadataExposableCreateServiceConfigArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableCreateServiceConfigArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableCreateServiceConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableCreateServiceConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CreateServiceConfigRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableCreateServiceConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createServiceConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableCreateServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableCreateServiceConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableCreateServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataExposableCreateServiceConfigResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataExposableCreateServiceConfigResult() *MetadataExposableCreateServiceConfigResult {
  return &MetadataExposableCreateServiceConfigResult{}
}

var MetadataExposableCreateServiceConfigResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableCreateServiceConfigResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataExposableCreateServiceConfigResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataExposableCreateServiceConfigResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataExposableCreateServiceConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableCreateServiceConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataExposableCreateServiceConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createServiceConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableCreateServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataExposableCreateServiceConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableCreateServiceConfigResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableReadServiceConfigArgs struct {
  Request *ReadServiceConfigRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableReadServiceConfigArgs() *MetadataExposableReadServiceConfigArgs {
  return &MetadataExposableReadServiceConfigArgs{}
}

var MetadataExposableReadServiceConfigArgs_Request_DEFAULT *ReadServiceConfigRequest
func (p *MetadataExposableReadServiceConfigArgs) GetRequest() *ReadServiceConfigRequest {
  if !p.IsSetRequest() {
    return MetadataExposableReadServiceConfigArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableReadServiceConfigArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableReadServiceConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadServiceConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadServiceConfigRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableReadServiceConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readServiceConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableReadServiceConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type MetadataExposableReadServiceConfigResult struct {
  Success *ReadServiceConfigResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataExposableReadServiceConfigResult() *MetadataExposableReadServiceConfigResult {
  return &MetadataExposableReadServiceConfigResult{}
}

var MetadataExposableReadServiceConfigResult_Success_DEFAULT *ReadServiceConfigResult_
func (p *MetadataExposableReadServiceConfigResult) GetSuccess() *ReadServiceConfigResult_ {
  if !p.IsSetSuccess() {
    return MetadataExposableReadServiceConfigResult_Success_DEFAULT
  }
return p.Success
}
var MetadataExposableReadServiceConfigResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableReadServiceConfigResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataExposableReadServiceConfigResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataExposableReadServiceConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataExposableReadServiceConfigResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataExposableReadServiceConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableReadServiceConfigResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadServiceConfigResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataExposableReadServiceConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataExposableReadServiceConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readServiceConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableReadServiceConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataExposableReadServiceConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableReadServiceConfigResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableUpdateServiceConfigArgs struct {
  Request *UpdateServiceConfigRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableUpdateServiceConfigArgs() *MetadataExposableUpdateServiceConfigArgs {
  return &MetadataExposableUpdateServiceConfigArgs{}
}

var MetadataExposableUpdateServiceConfigArgs_Request_DEFAULT *UpdateServiceConfigRequest
func (p *MetadataExposableUpdateServiceConfigArgs) GetRequest() *UpdateServiceConfigRequest {
  if !p.IsSetRequest() {
    return MetadataExposableUpdateServiceConfigArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableUpdateServiceConfigArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableUpdateServiceConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateServiceConfigRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateServiceConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableUpdateServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableUpdateServiceConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableUpdateServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataExposableUpdateServiceConfigResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataExposableUpdateServiceConfigResult() *MetadataExposableUpdateServiceConfigResult {
  return &MetadataExposableUpdateServiceConfigResult{}
}

var MetadataExposableUpdateServiceConfigResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableUpdateServiceConfigResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataExposableUpdateServiceConfigResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataExposableUpdateServiceConfigResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataExposableUpdateServiceConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableUpdateServiceConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataExposableUpdateServiceConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateServiceConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableUpdateServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataExposableUpdateServiceConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableUpdateServiceConfigResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataExposableDeleteServiceConfigArgs struct {
  Request *DeleteServiceConfigRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataExposableDeleteServiceConfigArgs() *MetadataExposableDeleteServiceConfigArgs {
  return &MetadataExposableDeleteServiceConfigArgs{}
}

var MetadataExposableDeleteServiceConfigArgs_Request_DEFAULT *DeleteServiceConfigRequest
func (p *MetadataExposableDeleteServiceConfigArgs) GetRequest() *DeleteServiceConfigRequest {
  if !p.IsSetRequest() {
    return MetadataExposableDeleteServiceConfigArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataExposableDeleteServiceConfigArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataExposableDeleteServiceConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableDeleteServiceConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &DeleteServiceConfigRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataExposableDeleteServiceConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteServiceConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableDeleteServiceConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataExposableDeleteServiceConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableDeleteServiceConfigArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataExposableDeleteServiceConfigResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataExposableDeleteServiceConfigResult() *MetadataExposableDeleteServiceConfigResult {
  return &MetadataExposableDeleteServiceConfigResult{}
}

var MetadataExposableDeleteServiceConfigResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataExposableDeleteServiceConfigResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataExposableDeleteServiceConfigResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataExposableDeleteServiceConfigResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataExposableDeleteServiceConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataExposableDeleteServiceConfigResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataExposableDeleteServiceConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteServiceConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataExposableDeleteServiceConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataExposableDeleteServiceConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataExposableDeleteServiceConfigResult(%+v)", *p)
}


type MetadataService interface {
MetadataExposable

  // *** Destination CRUD *********************
  // 
  // Parameters:
  //  - CreateRequest
  CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - CreateRequest
  CreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateDestinationDLQCursors(updateRequest *UpdateDestinationDLQCursorsRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - DeleteRequest
  DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error)
  // Parameters:
  //  - DeleteRequest
  DeleteDestinationUUID(deleteRequest *DeleteDestinationUUIDRequest) (err error)
  // *** ConsumerGroup CRUD *******************
  // 
  // Parameters:
  //  - CreateRequest
  CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - CreateRequest
  CreateConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - DeleteRequest
  DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error)
  // *** Extent Management *******************
  // 
  // Parameters:
  //  - Request
  CreateExtent(request *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error)
  // Parameters:
  //  - Request
  UpdateExtentStats(request *UpdateExtentStatsRequest) (r *UpdateExtentStatsResult_, err error)
  // Parameters:
  //  - Request
  ReadStoreExtentReplicaStats(request *ReadStoreExtentReplicaStatsRequest) (r *ReadStoreExtentReplicaStatsResult_, err error)
  // Parameters:
  //  - Request
  SealExtent(request *SealExtentRequest) (err error)
  // Parameters:
  //  - Request
  UpdateExtentReplicaStats(request *UpdateExtentReplicaStatsRequest) (err error)
  // Parameters:
  //  - Request
  UpdateStoreExtentReplicaStats(request *UpdateStoreExtentReplicaStatsRequest) (err error)
  // Parameters:
  //  - Request
  MoveExtent(request *MoveExtentRequest) (err error)
  // Parameters:
  //  - Request
  ListDestinationExtents(request *ListDestinationExtentsRequest) (r *ListDestinationExtentsResult_, err error)
  // Parameters:
  //  - Request
  ReadConsumerGroupExtentsLite(request *ReadConsumerGroupExtentsLiteRequest) (r *ReadConsumerGroupExtentsLiteResult_, err error)
  // *** Consumer Group Extent Management *******************
  // 
  // Parameters:
  //  - Request
  SetAckOffset(request *SetAckOffsetRequest) (err error)
  // Parameters:
  //  - Request
  UpdateConsumerGroupExtentStatus(request *UpdateConsumerGroupExtentStatusRequest) (err error)
  // Parameters:
  //  - Request
  CreateConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest) (err error)
  // Parameters:
  //  - Request
  SetOutputHost(request *SetOutputHostRequest) (err error)
  // Parameters:
  //  - Request
  RegisterHostUUID(request *RegisterHostUUIDRequest) (err error)
  // ** Hardware Info and Config Management ***
  // 
  // Parameters:
  //  - Request
  CreateHostInfo(request *CreateHostInfoRequest) (err error)
  // Parameters:
  //  - Request
  UpdateHostInfo(request *UpdateHostInfoRequest) (err error)
  // Parameters:
  //  - Request
  DeleteHostInfo(request *DeleteHostInfoRequest) (err error)
  // Parameters:
  //  - Request
  ReadHostInfo(request *ReadHostInfoRequest) (r *ReadHostInfoResult_, err error)
}

type MetadataServiceClient struct {
  *MetadataExposableClient
}

func NewMetadataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetadataServiceClient {
  return &MetadataServiceClient{MetadataExposableClient: NewMetadataExposableClientFactory(t, f)}}

func NewMetadataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetadataServiceClient {
  return &MetadataServiceClient{MetadataExposableClient: NewMetadataExposableClientProtocol(t, iprot, oprot)}
}

// *** Destination CRUD *********************
// 
// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendCreateDestination(createRequest); err != nil { return }
  return p.recvCreateDestination()
}

func (p *MetadataServiceClient) sendCreateDestination(createRequest *shared.CreateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateDestinationArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error188 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error189 error
    error189, err = error188.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error189
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestination failed: invalid message type")
    return
  }
  result := MetadataServiceCreateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendCreateDestinationUUID(createRequest); err != nil { return }
  return p.recvCreateDestinationUUID()
}

func (p *MetadataServiceClient) sendCreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createDestinationUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateDestinationUUIDArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateDestinationUUID() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createDestinationUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestinationUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestinationUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error190 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error191 error
    error191, err = error190.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error191
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestinationUUID failed: invalid message type")
    return
  }
  result := MetadataServiceCreateDestinationUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *MetadataServiceClient) UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendUpdateDestination(updateRequest); err != nil { return }
  return p.recvUpdateDestination()
}

func (p *MetadataServiceClient) sendUpdateDestination(updateRequest *shared.UpdateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateDestinationArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error192 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error193 error
    error193, err = error192.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error193
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *MetadataServiceClient) UpdateDestinationDLQCursors(updateRequest *UpdateDestinationDLQCursorsRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendUpdateDestinationDLQCursors(updateRequest); err != nil { return }
  return p.recvUpdateDestinationDLQCursors()
}

func (p *MetadataServiceClient) sendUpdateDestinationDLQCursors(updateRequest *UpdateDestinationDLQCursorsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateDestinationDLQCursorsArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateDestinationDLQCursors() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateDestinationDLQCursors" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestinationDLQCursors failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestinationDLQCursors failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error194 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error195 error
    error195, err = error194.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error195
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestinationDLQCursors failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateDestinationDLQCursorsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DeleteRequest
func (p *MetadataServiceClient) DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
  if err = p.sendDeleteDestination(deleteRequest); err != nil { return }
  return p.recvDeleteDestination()
}

func (p *MetadataServiceClient) sendDeleteDestination(deleteRequest *shared.DeleteDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceDeleteDestinationArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvDeleteDestination() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error196 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error197 error
    error197, err = error196.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error197
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
    return
  }
  result := MetadataServiceDeleteDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - DeleteRequest
func (p *MetadataServiceClient) DeleteDestinationUUID(deleteRequest *DeleteDestinationUUIDRequest) (err error) {
  if err = p.sendDeleteDestinationUUID(deleteRequest); err != nil { return }
  return p.recvDeleteDestinationUUID()
}

func (p *MetadataServiceClient) sendDeleteDestinationUUID(deleteRequest *DeleteDestinationUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteDestinationUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceDeleteDestinationUUIDArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvDeleteDestinationUUID() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteDestinationUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestinationUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestinationUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error198 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error199 error
    error199, err = error198.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error199
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestinationUUID failed: invalid message type")
    return
  }
  result := MetadataServiceDeleteDestinationUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// *** ConsumerGroup CRUD *******************
// 
// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendCreateConsumerGroup(createRequest); err != nil { return }
  return p.recvCreateConsumerGroup()
}

func (p *MetadataServiceClient) sendCreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateConsumerGroupArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error200 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error201 error
    error201, err = error200.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error201
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroup failed: invalid message type")
    return
  }
  result := MetadataServiceCreateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.EntityNotExistsError != nil {
    err = result.EntityNotExistsError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - CreateRequest
func (p *MetadataServiceClient) CreateConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendCreateConsumerGroupUUID(createRequest); err != nil { return }
  return p.recvCreateConsumerGroupUUID()
}

func (p *MetadataServiceClient) sendCreateConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("CreateConsumerGroupUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateConsumerGroupUUIDArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateConsumerGroupUUID() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "CreateConsumerGroupUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "CreateConsumerGroupUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "CreateConsumerGroupUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error202 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error203 error
    error203, err = error202.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error203
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "CreateConsumerGroupUUID failed: invalid message type")
    return
  }
  result := MetadataServiceCreateConsumerGroupUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.EntityNotExistsError != nil {
    err = result.EntityNotExistsError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *MetadataServiceClient) UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendUpdateConsumerGroup(updateRequest); err != nil { return }
  return p.recvUpdateConsumerGroup()
}

func (p *MetadataServiceClient) sendUpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateConsumerGroupArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error204 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error205 error
    error205, err = error204.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error205
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DeleteRequest
func (p *MetadataServiceClient) DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
  if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil { return }
  return p.recvDeleteConsumerGroup()
}

func (p *MetadataServiceClient) sendDeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceDeleteConsumerGroupArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvDeleteConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error206 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error207 error
    error207, err = error206.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error207
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
    return
  }
  result := MetadataServiceDeleteConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// *** Extent Management *******************
// 
// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateExtent(request *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error) {
  if err = p.sendCreateExtent(request); err != nil { return }
  return p.recvCreateExtent()
}

func (p *MetadataServiceClient) sendCreateExtent(request *shared.CreateExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateExtent() (value *shared.CreateExtentResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error208 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error209 error
    error209, err = error208.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error209
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createExtent failed: invalid message type")
    return
  }
  result := MetadataServiceCreateExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateExtentStats(request *UpdateExtentStatsRequest) (r *UpdateExtentStatsResult_, err error) {
  if err = p.sendUpdateExtentStats(request); err != nil { return }
  return p.recvUpdateExtentStats()
}

func (p *MetadataServiceClient) sendUpdateExtentStats(request *UpdateExtentStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateExtentStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateExtentStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateExtentStats() (value *UpdateExtentStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateExtentStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExtentStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExtentStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error210 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error211 error
    error211, err = error210.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error211
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExtentStats failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateExtentStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.EntityNotExistsError != nil {
    err = result.EntityNotExistsError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ReadStoreExtentReplicaStats(request *ReadStoreExtentReplicaStatsRequest) (r *ReadStoreExtentReplicaStatsResult_, err error) {
  if err = p.sendReadStoreExtentReplicaStats(request); err != nil { return }
  return p.recvReadStoreExtentReplicaStats()
}

func (p *MetadataServiceClient) sendReadStoreExtentReplicaStats(request *ReadStoreExtentReplicaStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceReadStoreExtentReplicaStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvReadStoreExtentReplicaStats() (value *ReadStoreExtentReplicaStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readStoreExtentReplicaStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readStoreExtentReplicaStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readStoreExtentReplicaStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error212 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error213 error
    error213, err = error212.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error213
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readStoreExtentReplicaStats failed: invalid message type")
    return
  }
  result := MetadataServiceReadStoreExtentReplicaStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) SealExtent(request *SealExtentRequest) (err error) {
  if err = p.sendSealExtent(request); err != nil { return }
  return p.recvSealExtent()
}

func (p *MetadataServiceClient) sendSealExtent(request *SealExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("sealExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceSealExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvSealExtent() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "sealExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sealExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sealExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error214 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error215 error
    error215, err = error214.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error215
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sealExtent failed: invalid message type")
    return
  }
  result := MetadataServiceSealExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.IllegalStateError != nil {
    err = result.IllegalStateError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateExtentReplicaStats(request *UpdateExtentReplicaStatsRequest) (err error) {
  if err = p.sendUpdateExtentReplicaStats(request); err != nil { return }
  return p.recvUpdateExtentReplicaStats()
}

func (p *MetadataServiceClient) sendUpdateExtentReplicaStats(request *UpdateExtentReplicaStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateExtentReplicaStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateExtentReplicaStats() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateExtentReplicaStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateExtentReplicaStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateExtentReplicaStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error216 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error217 error
    error217, err = error216.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error217
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateExtentReplicaStats failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateExtentReplicaStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateStoreExtentReplicaStats(request *UpdateStoreExtentReplicaStatsRequest) (err error) {
  if err = p.sendUpdateStoreExtentReplicaStats(request); err != nil { return }
  return p.recvUpdateStoreExtentReplicaStats()
}

func (p *MetadataServiceClient) sendUpdateStoreExtentReplicaStats(request *UpdateStoreExtentReplicaStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateStoreExtentReplicaStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateStoreExtentReplicaStats() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateStoreExtentReplicaStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateStoreExtentReplicaStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateStoreExtentReplicaStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error218 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error219 error
    error219, err = error218.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error219
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateStoreExtentReplicaStats failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateStoreExtentReplicaStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) MoveExtent(request *MoveExtentRequest) (err error) {
  if err = p.sendMoveExtent(request); err != nil { return }
  return p.recvMoveExtent()
}

func (p *MetadataServiceClient) sendMoveExtent(request *MoveExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("moveExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceMoveExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvMoveExtent() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "moveExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "moveExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "moveExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error220 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error221 error
    error221, err = error220.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error221
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "moveExtent failed: invalid message type")
    return
  }
  result := MetadataServiceMoveExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.IllegalStateError != nil {
    err = result.IllegalStateError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ListDestinationExtents(request *ListDestinationExtentsRequest) (r *ListDestinationExtentsResult_, err error) {
  if err = p.sendListDestinationExtents(request); err != nil { return }
  return p.recvListDestinationExtents()
}

func (p *MetadataServiceClient) sendListDestinationExtents(request *ListDestinationExtentsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listDestinationExtents", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceListDestinationExtentsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvListDestinationExtents() (value *ListDestinationExtentsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listDestinationExtents" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinationExtents failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinationExtents failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error222 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error223 error
    error223, err = error222.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error223
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinationExtents failed: invalid message type")
    return
  }
  result := MetadataServiceListDestinationExtentsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ReadConsumerGroupExtentsLite(request *ReadConsumerGroupExtentsLiteRequest) (r *ReadConsumerGroupExtentsLiteResult_, err error) {
  if err = p.sendReadConsumerGroupExtentsLite(request); err != nil { return }
  return p.recvReadConsumerGroupExtentsLite()
}

func (p *MetadataServiceClient) sendReadConsumerGroupExtentsLite(request *ReadConsumerGroupExtentsLiteRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroupExtentsLite", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceReadConsumerGroupExtentsLiteArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvReadConsumerGroupExtentsLite() (value *ReadConsumerGroupExtentsLiteResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroupExtentsLite" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupExtentsLite failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupExtentsLite failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error224 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error225 error
    error225, err = error224.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error225
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupExtentsLite failed: invalid message type")
    return
  }
  result := MetadataServiceReadConsumerGroupExtentsLiteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// *** Consumer Group Extent Management *******************
// 
// Parameters:
//  - Request
func (p *MetadataServiceClient) SetAckOffset(request *SetAckOffsetRequest) (err error) {
  if err = p.sendSetAckOffset(request); err != nil { return }
  return p.recvSetAckOffset()
}

func (p *MetadataServiceClient) sendSetAckOffset(request *SetAckOffsetRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setAckOffset", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceSetAckOffsetArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvSetAckOffset() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setAckOffset" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setAckOffset failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setAckOffset failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error226 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error227 error
    error227, err = error226.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error227
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setAckOffset failed: invalid message type")
    return
  }
  result := MetadataServiceSetAckOffsetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateConsumerGroupExtentStatus(request *UpdateConsumerGroupExtentStatusRequest) (err error) {
  if err = p.sendUpdateConsumerGroupExtentStatus(request); err != nil { return }
  return p.recvUpdateConsumerGroupExtentStatus()
}

func (p *MetadataServiceClient) sendUpdateConsumerGroupExtentStatus(request *UpdateConsumerGroupExtentStatusRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateConsumerGroupExtentStatusArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateConsumerGroupExtentStatus() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateConsumerGroupExtentStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroupExtentStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroupExtentStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error228 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error229 error
    error229, err = error228.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error229
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroupExtentStatus failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateConsumerGroupExtentStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.NotExistsError != nil {
    err = result.NotExistsError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest) (err error) {
  if err = p.sendCreateConsumerGroupExtent(request); err != nil { return }
  return p.recvCreateConsumerGroupExtent()
}

func (p *MetadataServiceClient) sendCreateConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateConsumerGroupExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateConsumerGroupExtent() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createConsumerGroupExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroupExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroupExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error230 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error231 error
    error231, err = error230.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error231
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroupExtent failed: invalid message type")
    return
  }
  result := MetadataServiceCreateConsumerGroupExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) SetOutputHost(request *SetOutputHostRequest) (err error) {
  if err = p.sendSetOutputHost(request); err != nil { return }
  return p.recvSetOutputHost()
}

func (p *MetadataServiceClient) sendSetOutputHost(request *SetOutputHostRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setOutputHost", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceSetOutputHostArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvSetOutputHost() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setOutputHost" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setOutputHost failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setOutputHost failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error232 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error233 error
    error233, err = error232.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error233
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setOutputHost failed: invalid message type")
    return
  }
  result := MetadataServiceSetOutputHostResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) RegisterHostUUID(request *RegisterHostUUIDRequest) (err error) {
  if err = p.sendRegisterHostUUID(request); err != nil { return }
  return p.recvRegisterHostUUID()
}

func (p *MetadataServiceClient) sendRegisterHostUUID(request *RegisterHostUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("registerHostUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceRegisterHostUUIDArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvRegisterHostUUID() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "registerHostUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerHostUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerHostUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error234 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error235 error
    error235, err = error234.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error235
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerHostUUID failed: invalid message type")
    return
  }
  result := MetadataServiceRegisterHostUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}

// ** Hardware Info and Config Management ***
// 
// Parameters:
//  - Request
func (p *MetadataServiceClient) CreateHostInfo(request *CreateHostInfoRequest) (err error) {
  if err = p.sendCreateHostInfo(request); err != nil { return }
  return p.recvCreateHostInfo()
}

func (p *MetadataServiceClient) sendCreateHostInfo(request *CreateHostInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createHostInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceCreateHostInfoArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvCreateHostInfo() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createHostInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createHostInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createHostInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error236 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error237 error
    error237, err = error236.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error237
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createHostInfo failed: invalid message type")
    return
  }
  result := MetadataServiceCreateHostInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) UpdateHostInfo(request *UpdateHostInfoRequest) (err error) {
  if err = p.sendUpdateHostInfo(request); err != nil { return }
  return p.recvUpdateHostInfo()
}

func (p *MetadataServiceClient) sendUpdateHostInfo(request *UpdateHostInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateHostInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceUpdateHostInfoArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvUpdateHostInfo() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateHostInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateHostInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateHostInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error238 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error239 error
    error239, err = error238.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error239
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateHostInfo failed: invalid message type")
    return
  }
  result := MetadataServiceUpdateHostInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) DeleteHostInfo(request *DeleteHostInfoRequest) (err error) {
  if err = p.sendDeleteHostInfo(request); err != nil { return }
  return p.recvDeleteHostInfo()
}

func (p *MetadataServiceClient) sendDeleteHostInfo(request *DeleteHostInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteHostInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceDeleteHostInfoArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvDeleteHostInfo() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteHostInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteHostInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteHostInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error240 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error241 error
    error241, err = error240.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error241
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteHostInfo failed: invalid message type")
    return
  }
  result := MetadataServiceDeleteHostInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *MetadataServiceClient) ReadHostInfo(request *ReadHostInfoRequest) (r *ReadHostInfoResult_, err error) {
  if err = p.sendReadHostInfo(request); err != nil { return }
  return p.recvReadHostInfo()
}

func (p *MetadataServiceClient) sendReadHostInfo(request *ReadHostInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readHostInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MetadataServiceReadHostInfoArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MetadataServiceClient) recvReadHostInfo() (value *ReadHostInfoResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readHostInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readHostInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readHostInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error242 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error243 error
    error243, err = error242.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error243
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readHostInfo failed: invalid message type")
    return
  }
  result := MetadataServiceReadHostInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Error != nil {
    err = result.Error
    return 
  }
  value = result.GetSuccess()
  return
}


type MetadataServiceProcessor struct {
  *MetadataExposableProcessor
}

func NewMetadataServiceProcessor(handler MetadataService) *MetadataServiceProcessor {
  self244 := &MetadataServiceProcessor{NewMetadataExposableProcessor(handler)}
  self244.AddToProcessorMap("createDestination", &metadataServiceProcessorCreateDestination{handler:handler})
  self244.AddToProcessorMap("createDestinationUUID", &metadataServiceProcessorCreateDestinationUUID{handler:handler})
  self244.AddToProcessorMap("updateDestination", &metadataServiceProcessorUpdateDestination{handler:handler})
  self244.AddToProcessorMap("updateDestinationDLQCursors", &metadataServiceProcessorUpdateDestinationDLQCursors{handler:handler})
  self244.AddToProcessorMap("deleteDestination", &metadataServiceProcessorDeleteDestination{handler:handler})
  self244.AddToProcessorMap("deleteDestinationUUID", &metadataServiceProcessorDeleteDestinationUUID{handler:handler})
  self244.AddToProcessorMap("createConsumerGroup", &metadataServiceProcessorCreateConsumerGroup{handler:handler})
  self244.AddToProcessorMap("CreateConsumerGroupUUID", &metadataServiceProcessorCreateConsumerGroupUUID{handler:handler})
  self244.AddToProcessorMap("updateConsumerGroup", &metadataServiceProcessorUpdateConsumerGroup{handler:handler})
  self244.AddToProcessorMap("deleteConsumerGroup", &metadataServiceProcessorDeleteConsumerGroup{handler:handler})
  self244.AddToProcessorMap("createExtent", &metadataServiceProcessorCreateExtent{handler:handler})
  self244.AddToProcessorMap("updateExtentStats", &metadataServiceProcessorUpdateExtentStats{handler:handler})
  self244.AddToProcessorMap("readStoreExtentReplicaStats", &metadataServiceProcessorReadStoreExtentReplicaStats{handler:handler})
  self244.AddToProcessorMap("sealExtent", &metadataServiceProcessorSealExtent{handler:handler})
  self244.AddToProcessorMap("updateExtentReplicaStats", &metadataServiceProcessorUpdateExtentReplicaStats{handler:handler})
  self244.AddToProcessorMap("updateStoreExtentReplicaStats", &metadataServiceProcessorUpdateStoreExtentReplicaStats{handler:handler})
  self244.AddToProcessorMap("moveExtent", &metadataServiceProcessorMoveExtent{handler:handler})
  self244.AddToProcessorMap("listDestinationExtents", &metadataServiceProcessorListDestinationExtents{handler:handler})
  self244.AddToProcessorMap("readConsumerGroupExtentsLite", &metadataServiceProcessorReadConsumerGroupExtentsLite{handler:handler})
  self244.AddToProcessorMap("setAckOffset", &metadataServiceProcessorSetAckOffset{handler:handler})
  self244.AddToProcessorMap("updateConsumerGroupExtentStatus", &metadataServiceProcessorUpdateConsumerGroupExtentStatus{handler:handler})
  self244.AddToProcessorMap("createConsumerGroupExtent", &metadataServiceProcessorCreateConsumerGroupExtent{handler:handler})
  self244.AddToProcessorMap("setOutputHost", &metadataServiceProcessorSetOutputHost{handler:handler})
  self244.AddToProcessorMap("registerHostUUID", &metadataServiceProcessorRegisterHostUUID{handler:handler})
  self244.AddToProcessorMap("createHostInfo", &metadataServiceProcessorCreateHostInfo{handler:handler})
  self244.AddToProcessorMap("updateHostInfo", &metadataServiceProcessorUpdateHostInfo{handler:handler})
  self244.AddToProcessorMap("deleteHostInfo", &metadataServiceProcessorDeleteHostInfo{handler:handler})
  self244.AddToProcessorMap("readHostInfo", &metadataServiceProcessorReadHostInfo{handler:handler})
  return self244
}

type metadataServiceProcessorCreateDestination struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.CreateDestination(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestination: " + err2.Error())
    oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorCreateDestinationUUID struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateDestinationUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateDestinationUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateDestinationUUIDResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.CreateDestinationUUID(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestinationUUID: " + err2.Error())
    oprot.WriteMessageBegin("createDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createDestinationUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateDestination struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: " + err2.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateDestinationDLQCursors struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateDestinationDLQCursors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateDestinationDLQCursorsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateDestinationDLQCursorsResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.UpdateDestinationDLQCursors(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestinationDLQCursors: " + err2.Error())
    oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateDestinationDLQCursors", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorDeleteDestination struct {
  handler MetadataService
}

func (p *metadataServiceProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceDeleteDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceDeleteDestinationResult{}
  var err2 error
  if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: " + err2.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorDeleteDestinationUUID struct {
  handler MetadataService
}

func (p *metadataServiceProcessorDeleteDestinationUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceDeleteDestinationUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceDeleteDestinationUUIDResult{}
  var err2 error
  if err2 = p.handler.DeleteDestinationUUID(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestinationUUID: " + err2.Error())
    oprot.WriteMessageBegin("deleteDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteDestinationUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorCreateConsumerGroup struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateConsumerGroupResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.CreateConsumerGroup(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistsError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorCreateConsumerGroupUUID struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateConsumerGroupUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateConsumerGroupUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateConsumerGroupUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateConsumerGroupUUIDResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.CreateConsumerGroupUUID(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistsError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateConsumerGroupUUID: " + err2.Error())
    oprot.WriteMessageBegin("CreateConsumerGroupUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CreateConsumerGroupUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateConsumerGroup struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateConsumerGroupResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorDeleteConsumerGroup struct {
  handler MetadataService
}

func (p *metadataServiceProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceDeleteConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceDeleteConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorCreateExtent struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateExtentResult{}
var retval *shared.CreateExtentResult_
  var err2 error
  if retval, err2 = p.handler.CreateExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createExtent: " + err2.Error())
    oprot.WriteMessageBegin("createExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateExtentStats struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateExtentStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateExtentStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateExtentStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateExtentStatsResult{}
var retval *UpdateExtentStatsResult_
  var err2 error
  if retval, err2 = p.handler.UpdateExtentStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.EntityNotExistsError:
  result.EntityNotExistsError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtentStats: " + err2.Error())
    oprot.WriteMessageBegin("updateExtentStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateExtentStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorReadStoreExtentReplicaStats struct {
  handler MetadataService
}

func (p *metadataServiceProcessorReadStoreExtentReplicaStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceReadStoreExtentReplicaStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceReadStoreExtentReplicaStatsResult{}
var retval *ReadStoreExtentReplicaStatsResult_
  var err2 error
  if retval, err2 = p.handler.ReadStoreExtentReplicaStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readStoreExtentReplicaStats: " + err2.Error())
    oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readStoreExtentReplicaStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorSealExtent struct {
  handler MetadataService
}

func (p *metadataServiceProcessorSealExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceSealExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sealExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceSealExtentResult{}
  var err2 error
  if err2 = p.handler.SealExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *IllegalStateError:
  result.IllegalStateError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sealExtent: " + err2.Error())
    oprot.WriteMessageBegin("sealExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sealExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateExtentReplicaStats struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateExtentReplicaStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateExtentReplicaStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateExtentReplicaStatsResult{}
  var err2 error
  if err2 = p.handler.UpdateExtentReplicaStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtentReplicaStats: " + err2.Error())
    oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateExtentReplicaStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateStoreExtentReplicaStats struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateStoreExtentReplicaStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateStoreExtentReplicaStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateStoreExtentReplicaStatsResult{}
  var err2 error
  if err2 = p.handler.UpdateStoreExtentReplicaStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateStoreExtentReplicaStats: " + err2.Error())
    oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateStoreExtentReplicaStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorMoveExtent struct {
  handler MetadataService
}

func (p *metadataServiceProcessorMoveExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceMoveExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("moveExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceMoveExtentResult{}
  var err2 error
  if err2 = p.handler.MoveExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *IllegalStateError:
  result.IllegalStateError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing moveExtent: " + err2.Error())
    oprot.WriteMessageBegin("moveExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("moveExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorListDestinationExtents struct {
  handler MetadataService
}

func (p *metadataServiceProcessorListDestinationExtents) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceListDestinationExtentsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listDestinationExtents", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceListDestinationExtentsResult{}
var retval *ListDestinationExtentsResult_
  var err2 error
  if retval, err2 = p.handler.ListDestinationExtents(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinationExtents: " + err2.Error())
    oprot.WriteMessageBegin("listDestinationExtents", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listDestinationExtents", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorReadConsumerGroupExtentsLite struct {
  handler MetadataService
}

func (p *metadataServiceProcessorReadConsumerGroupExtentsLite) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceReadConsumerGroupExtentsLiteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtentsLite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceReadConsumerGroupExtentsLiteResult{}
var retval *ReadConsumerGroupExtentsLiteResult_
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroupExtentsLite(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupExtentsLite: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroupExtentsLite", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroupExtentsLite", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorSetAckOffset struct {
  handler MetadataService
}

func (p *metadataServiceProcessorSetAckOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceSetAckOffsetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setAckOffset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceSetAckOffsetResult{}
  var err2 error
  if err2 = p.handler.SetAckOffset(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setAckOffset: " + err2.Error())
    oprot.WriteMessageBegin("setAckOffset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setAckOffset", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateConsumerGroupExtentStatus struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateConsumerGroupExtentStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateConsumerGroupExtentStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateConsumerGroupExtentStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateConsumerGroupExtentStatus(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.NotExistsError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroupExtentStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorCreateConsumerGroupExtent struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateConsumerGroupExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateConsumerGroupExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateConsumerGroupExtentResult{}
  var err2 error
  if err2 = p.handler.CreateConsumerGroupExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroupExtent: " + err2.Error())
    oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorSetOutputHost struct {
  handler MetadataService
}

func (p *metadataServiceProcessorSetOutputHost) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceSetOutputHostArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setOutputHost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceSetOutputHostResult{}
  var err2 error
  if err2 = p.handler.SetOutputHost(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setOutputHost: " + err2.Error())
    oprot.WriteMessageBegin("setOutputHost", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setOutputHost", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorRegisterHostUUID struct {
  handler MetadataService
}

func (p *metadataServiceProcessorRegisterHostUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceRegisterHostUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerHostUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceRegisterHostUUIDResult{}
  var err2 error
  if err2 = p.handler.RegisterHostUUID(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerHostUUID: " + err2.Error())
    oprot.WriteMessageBegin("registerHostUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("registerHostUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorCreateHostInfo struct {
  handler MetadataService
}

func (p *metadataServiceProcessorCreateHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceCreateHostInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceCreateHostInfoResult{}
  var err2 error
  if err2 = p.handler.CreateHostInfo(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createHostInfo: " + err2.Error())
    oprot.WriteMessageBegin("createHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createHostInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorUpdateHostInfo struct {
  handler MetadataService
}

func (p *metadataServiceProcessorUpdateHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceUpdateHostInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceUpdateHostInfoResult{}
  var err2 error
  if err2 = p.handler.UpdateHostInfo(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateHostInfo: " + err2.Error())
    oprot.WriteMessageBegin("updateHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateHostInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorDeleteHostInfo struct {
  handler MetadataService
}

func (p *metadataServiceProcessorDeleteHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceDeleteHostInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceDeleteHostInfoResult{}
  var err2 error
  if err2 = p.handler.DeleteHostInfo(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteHostInfo: " + err2.Error())
    oprot.WriteMessageBegin("deleteHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteHostInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type metadataServiceProcessorReadHostInfo struct {
  handler MetadataService
}

func (p *metadataServiceProcessorReadHostInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MetadataServiceReadHostInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MetadataServiceReadHostInfoResult{}
var retval *ReadHostInfoResult_
  var err2 error
  if retval, err2 = p.handler.ReadHostInfo(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readHostInfo: " + err2.Error())
    oprot.WriteMessageBegin("readHostInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readHostInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CreateRequest
type MetadataServiceCreateDestinationArgs struct {
  CreateRequest *shared.CreateDestinationRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewMetadataServiceCreateDestinationArgs() *MetadataServiceCreateDestinationArgs {
  return &MetadataServiceCreateDestinationArgs{}
}

var MetadataServiceCreateDestinationArgs_CreateRequest_DEFAULT *shared.CreateDestinationRequest
func (p *MetadataServiceCreateDestinationArgs) GetCreateRequest() *shared.CreateDestinationRequest {
  if !p.IsSetCreateRequest() {
    return MetadataServiceCreateDestinationArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *MetadataServiceCreateDestinationArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *MetadataServiceCreateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateDestinationRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *MetadataServiceCreateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type MetadataServiceCreateDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateDestinationResult() *MetadataServiceCreateDestinationResult {
  return &MetadataServiceCreateDestinationResult{}
}

var MetadataServiceCreateDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *MetadataServiceCreateDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceCreateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceCreateDestinationResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *MetadataServiceCreateDestinationResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return MetadataServiceCreateDestinationResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var MetadataServiceCreateDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceCreateDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceCreateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceCreateDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceCreateDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceCreateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceCreateDestinationResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceCreateDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateDestinationResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type MetadataServiceCreateDestinationUUIDArgs struct {
  CreateRequest *shared.CreateDestinationUUIDRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewMetadataServiceCreateDestinationUUIDArgs() *MetadataServiceCreateDestinationUUIDArgs {
  return &MetadataServiceCreateDestinationUUIDArgs{}
}

var MetadataServiceCreateDestinationUUIDArgs_CreateRequest_DEFAULT *shared.CreateDestinationUUIDRequest
func (p *MetadataServiceCreateDestinationUUIDArgs) GetCreateRequest() *shared.CreateDestinationUUIDRequest {
  if !p.IsSetCreateRequest() {
    return MetadataServiceCreateDestinationUUIDArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *MetadataServiceCreateDestinationUUIDArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateDestinationUUIDRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestinationUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *MetadataServiceCreateDestinationUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateDestinationUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type MetadataServiceCreateDestinationUUIDResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateDestinationUUIDResult() *MetadataServiceCreateDestinationUUIDResult {
  return &MetadataServiceCreateDestinationUUIDResult{}
}

var MetadataServiceCreateDestinationUUIDResult_Success_DEFAULT *shared.DestinationDescription
func (p *MetadataServiceCreateDestinationUUIDResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceCreateDestinationUUIDResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceCreateDestinationUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *MetadataServiceCreateDestinationUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return MetadataServiceCreateDestinationUUIDResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var MetadataServiceCreateDestinationUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceCreateDestinationUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceCreateDestinationUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceCreateDestinationUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateDestinationUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceCreateDestinationUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceCreateDestinationUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestinationUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateDestinationUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateDestinationUUIDResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type MetadataServiceUpdateDestinationArgs struct {
  UpdateRequest *shared.UpdateDestinationRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewMetadataServiceUpdateDestinationArgs() *MetadataServiceUpdateDestinationArgs {
  return &MetadataServiceUpdateDestinationArgs{}
}

var MetadataServiceUpdateDestinationArgs_UpdateRequest_DEFAULT *shared.UpdateDestinationRequest
func (p *MetadataServiceUpdateDestinationArgs) GetUpdateRequest() *shared.UpdateDestinationRequest {
  if !p.IsSetUpdateRequest() {
    return MetadataServiceUpdateDestinationArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *MetadataServiceUpdateDestinationArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *MetadataServiceUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateDestinationRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateDestinationResult() *MetadataServiceUpdateDestinationResult {
  return &MetadataServiceUpdateDestinationResult{}
}

var MetadataServiceUpdateDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *MetadataServiceUpdateDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceUpdateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceUpdateDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceUpdateDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataServiceUpdateDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataServiceUpdateDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceUpdateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceUpdateDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataServiceUpdateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type MetadataServiceUpdateDestinationDLQCursorsArgs struct {
  UpdateRequest *UpdateDestinationDLQCursorsRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewMetadataServiceUpdateDestinationDLQCursorsArgs() *MetadataServiceUpdateDestinationDLQCursorsArgs {
  return &MetadataServiceUpdateDestinationDLQCursorsArgs{}
}

var MetadataServiceUpdateDestinationDLQCursorsArgs_UpdateRequest_DEFAULT *UpdateDestinationDLQCursorsRequest
func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) GetUpdateRequest() *UpdateDestinationDLQCursorsRequest {
  if !p.IsSetUpdateRequest() {
    return MetadataServiceUpdateDestinationDLQCursorsArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &UpdateDestinationDLQCursorsRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestinationDLQCursors_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateDestinationDLQCursorsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateDestinationDLQCursorsResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateDestinationDLQCursorsResult() *MetadataServiceUpdateDestinationDLQCursorsResult {
  return &MetadataServiceUpdateDestinationDLQCursorsResult{}
}

var MetadataServiceUpdateDestinationDLQCursorsResult_Success_DEFAULT *shared.DestinationDescription
func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceUpdateDestinationDLQCursorsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceUpdateDestinationDLQCursorsResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataServiceUpdateDestinationDLQCursorsResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataServiceUpdateDestinationDLQCursorsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateDestinationDLQCursorsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateDestinationDLQCursorsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateDestinationDLQCursorsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateDestinationDLQCursorsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestinationDLQCursors_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateDestinationDLQCursorsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateDestinationDLQCursorsResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type MetadataServiceDeleteDestinationArgs struct {
  DeleteRequest *shared.DeleteDestinationRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewMetadataServiceDeleteDestinationArgs() *MetadataServiceDeleteDestinationArgs {
  return &MetadataServiceDeleteDestinationArgs{}
}

var MetadataServiceDeleteDestinationArgs_DeleteRequest_DEFAULT *shared.DeleteDestinationRequest
func (p *MetadataServiceDeleteDestinationArgs) GetDeleteRequest() *shared.DeleteDestinationRequest {
  if !p.IsSetDeleteRequest() {
    return MetadataServiceDeleteDestinationArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *MetadataServiceDeleteDestinationArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *MetadataServiceDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteDestinationRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *MetadataServiceDeleteDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceDeleteDestinationResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceDeleteDestinationResult() *MetadataServiceDeleteDestinationResult {
  return &MetadataServiceDeleteDestinationResult{}
}

var MetadataServiceDeleteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceDeleteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataServiceDeleteDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataServiceDeleteDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceDeleteDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceDeleteDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceDeleteDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceDeleteDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceDeleteDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceDeleteDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataServiceDeleteDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceDeleteDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type MetadataServiceDeleteDestinationUUIDArgs struct {
  DeleteRequest *DeleteDestinationUUIDRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewMetadataServiceDeleteDestinationUUIDArgs() *MetadataServiceDeleteDestinationUUIDArgs {
  return &MetadataServiceDeleteDestinationUUIDArgs{}
}

var MetadataServiceDeleteDestinationUUIDArgs_DeleteRequest_DEFAULT *DeleteDestinationUUIDRequest
func (p *MetadataServiceDeleteDestinationUUIDArgs) GetDeleteRequest() *DeleteDestinationUUIDRequest {
  if !p.IsSetDeleteRequest() {
    return MetadataServiceDeleteDestinationUUIDArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *MetadataServiceDeleteDestinationUUIDArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &DeleteDestinationUUIDRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestinationUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *MetadataServiceDeleteDestinationUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteDestinationUUIDArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceDeleteDestinationUUIDResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceDeleteDestinationUUIDResult() *MetadataServiceDeleteDestinationUUIDResult {
  return &MetadataServiceDeleteDestinationUUIDResult{}
}

var MetadataServiceDeleteDestinationUUIDResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceDeleteDestinationUUIDResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataServiceDeleteDestinationUUIDResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataServiceDeleteDestinationUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceDeleteDestinationUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceDeleteDestinationUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceDeleteDestinationUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceDeleteDestinationUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceDeleteDestinationUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceDeleteDestinationUUIDResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestinationUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteDestinationUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteDestinationUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteDestinationUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteDestinationUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteDestinationUUIDResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type MetadataServiceCreateConsumerGroupArgs struct {
  CreateRequest *shared.CreateConsumerGroupRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewMetadataServiceCreateConsumerGroupArgs() *MetadataServiceCreateConsumerGroupArgs {
  return &MetadataServiceCreateConsumerGroupArgs{}
}

var MetadataServiceCreateConsumerGroupArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupRequest
func (p *MetadataServiceCreateConsumerGroupArgs) GetCreateRequest() *shared.CreateConsumerGroupRequest {
  if !p.IsSetCreateRequest() {
    return MetadataServiceCreateConsumerGroupArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *MetadataServiceCreateConsumerGroupArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateConsumerGroupRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *MetadataServiceCreateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - EntityNotExistsError
//  - InternalServiceError
type MetadataServiceCreateConsumerGroupResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  EntityNotExistsError *shared.EntityNotExistsError `thrift:"entityNotExistsError,3" db:"entityNotExistsError" json:"entityNotExistsError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,4" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateConsumerGroupResult() *MetadataServiceCreateConsumerGroupResult {
  return &MetadataServiceCreateConsumerGroupResult{}
}

var MetadataServiceCreateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *MetadataServiceCreateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceCreateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceCreateConsumerGroupResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *MetadataServiceCreateConsumerGroupResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return MetadataServiceCreateConsumerGroupResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var MetadataServiceCreateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceCreateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceCreateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceCreateConsumerGroupResult_EntityNotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceCreateConsumerGroupResult) GetEntityNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistsError() {
    return MetadataServiceCreateConsumerGroupResult_EntityNotExistsError_DEFAULT
  }
return p.EntityNotExistsError
}
var MetadataServiceCreateConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceCreateConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceCreateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetEntityNotExistsError() bool {
  return p.EntityNotExistsError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistsError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult)  ReadField4(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistsError() {
    if err := oprot.WriteFieldBegin("entityNotExistsError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistsError: ", p), err) }
    if err := p.EntityNotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type MetadataServiceCreateConsumerGroupUUIDArgs struct {
  CreateRequest *shared.CreateConsumerGroupUUIDRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewMetadataServiceCreateConsumerGroupUUIDArgs() *MetadataServiceCreateConsumerGroupUUIDArgs {
  return &MetadataServiceCreateConsumerGroupUUIDArgs{}
}

var MetadataServiceCreateConsumerGroupUUIDArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupUUIDRequest
func (p *MetadataServiceCreateConsumerGroupUUIDArgs) GetCreateRequest() *shared.CreateConsumerGroupUUIDRequest {
  if !p.IsSetCreateRequest() {
    return MetadataServiceCreateConsumerGroupUUIDArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *MetadataServiceCreateConsumerGroupUUIDArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateConsumerGroupUUIDRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateConsumerGroupUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *MetadataServiceCreateConsumerGroupUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateConsumerGroupUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - EntityNotExistsError
//  - InternalServiceError
type MetadataServiceCreateConsumerGroupUUIDResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  EntityNotExistsError *shared.EntityNotExistsError `thrift:"entityNotExistsError,3" db:"entityNotExistsError" json:"entityNotExistsError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,4" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateConsumerGroupUUIDResult() *MetadataServiceCreateConsumerGroupUUIDResult {
  return &MetadataServiceCreateConsumerGroupUUIDResult{}
}

var MetadataServiceCreateConsumerGroupUUIDResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *MetadataServiceCreateConsumerGroupUUIDResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceCreateConsumerGroupUUIDResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceCreateConsumerGroupUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *MetadataServiceCreateConsumerGroupUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return MetadataServiceCreateConsumerGroupUUIDResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var MetadataServiceCreateConsumerGroupUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceCreateConsumerGroupUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceCreateConsumerGroupUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceCreateConsumerGroupUUIDResult_EntityNotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceCreateConsumerGroupUUIDResult) GetEntityNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistsError() {
    return MetadataServiceCreateConsumerGroupUUIDResult_EntityNotExistsError_DEFAULT
  }
return p.EntityNotExistsError
}
var MetadataServiceCreateConsumerGroupUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateConsumerGroupUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceCreateConsumerGroupUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceCreateConsumerGroupUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) IsSetEntityNotExistsError() bool {
  return p.EntityNotExistsError != nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.EntityNotExistsError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult)  ReadField4(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateConsumerGroupUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistsError() {
    if err := oprot.WriteFieldBegin("entityNotExistsError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistsError: ", p), err) }
    if err := p.EntityNotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateConsumerGroupUUIDResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type MetadataServiceUpdateConsumerGroupArgs struct {
  UpdateRequest *shared.UpdateConsumerGroupRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewMetadataServiceUpdateConsumerGroupArgs() *MetadataServiceUpdateConsumerGroupArgs {
  return &MetadataServiceUpdateConsumerGroupArgs{}
}

var MetadataServiceUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *shared.UpdateConsumerGroupRequest
func (p *MetadataServiceUpdateConsumerGroupArgs) GetUpdateRequest() *shared.UpdateConsumerGroupRequest {
  if !p.IsSetUpdateRequest() {
    return MetadataServiceUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *MetadataServiceUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateConsumerGroupRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateConsumerGroupResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateConsumerGroupResult() *MetadataServiceUpdateConsumerGroupResult {
  return &MetadataServiceUpdateConsumerGroupResult{}
}

var MetadataServiceUpdateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *MetadataServiceUpdateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return MetadataServiceUpdateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceUpdateConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceUpdateConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataServiceUpdateConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataServiceUpdateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceUpdateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type MetadataServiceDeleteConsumerGroupArgs struct {
  DeleteRequest *shared.DeleteConsumerGroupRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewMetadataServiceDeleteConsumerGroupArgs() *MetadataServiceDeleteConsumerGroupArgs {
  return &MetadataServiceDeleteConsumerGroupArgs{}
}

var MetadataServiceDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *shared.DeleteConsumerGroupRequest
func (p *MetadataServiceDeleteConsumerGroupArgs) GetDeleteRequest() *shared.DeleteConsumerGroupRequest {
  if !p.IsSetDeleteRequest() {
    return MetadataServiceDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *MetadataServiceDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteConsumerGroupRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *MetadataServiceDeleteConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type MetadataServiceDeleteConsumerGroupResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceDeleteConsumerGroupResult() *MetadataServiceDeleteConsumerGroupResult {
  return &MetadataServiceDeleteConsumerGroupResult{}
}

var MetadataServiceDeleteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceDeleteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return MetadataServiceDeleteConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var MetadataServiceDeleteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceDeleteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceDeleteConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceDeleteConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceDeleteConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceDeleteConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceDeleteConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateExtentArgs struct {
  Request *shared.CreateExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceCreateExtentArgs() *MetadataServiceCreateExtentArgs {
  return &MetadataServiceCreateExtentArgs{}
}

var MetadataServiceCreateExtentArgs_Request_DEFAULT *shared.CreateExtentRequest
func (p *MetadataServiceCreateExtentArgs) GetRequest() *shared.CreateExtentRequest {
  if !p.IsSetRequest() {
    return MetadataServiceCreateExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceCreateExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceCreateExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.CreateExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceCreateExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - EntityExistsError
//  - InternalServiceError
type MetadataServiceCreateExtentResult struct {
  Success *shared.CreateExtentResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,2" db:"entityExistsError" json:"entityExistsError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateExtentResult() *MetadataServiceCreateExtentResult {
  return &MetadataServiceCreateExtentResult{}
}

var MetadataServiceCreateExtentResult_Success_DEFAULT *shared.CreateExtentResult_
func (p *MetadataServiceCreateExtentResult) GetSuccess() *shared.CreateExtentResult_ {
  if !p.IsSetSuccess() {
    return MetadataServiceCreateExtentResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceCreateExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceCreateExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceCreateExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceCreateExtentResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *MetadataServiceCreateExtentResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return MetadataServiceCreateExtentResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var MetadataServiceCreateExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceCreateExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceCreateExtentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceCreateExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceCreateExtentResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *MetadataServiceCreateExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.CreateExtentResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceCreateExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateExtentStatsArgs struct {
  Request *UpdateExtentStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceUpdateExtentStatsArgs() *MetadataServiceUpdateExtentStatsArgs {
  return &MetadataServiceUpdateExtentStatsArgs{}
}

var MetadataServiceUpdateExtentStatsArgs_Request_DEFAULT *UpdateExtentStatsRequest
func (p *MetadataServiceUpdateExtentStatsArgs) GetRequest() *UpdateExtentStatsRequest {
  if !p.IsSetRequest() {
    return MetadataServiceUpdateExtentStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceUpdateExtentStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateExtentStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExtentStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateExtentStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateExtentStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - EntityNotExistsError
//  - InternalServiceError
type MetadataServiceUpdateExtentStatsResult struct {
  Success *UpdateExtentStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  EntityNotExistsError *shared.EntityNotExistsError `thrift:"entityNotExistsError,2" db:"entityNotExistsError" json:"entityNotExistsError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateExtentStatsResult() *MetadataServiceUpdateExtentStatsResult {
  return &MetadataServiceUpdateExtentStatsResult{}
}

var MetadataServiceUpdateExtentStatsResult_Success_DEFAULT *UpdateExtentStatsResult_
func (p *MetadataServiceUpdateExtentStatsResult) GetSuccess() *UpdateExtentStatsResult_ {
  if !p.IsSetSuccess() {
    return MetadataServiceUpdateExtentStatsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceUpdateExtentStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateExtentStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateExtentStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateExtentStatsResult_EntityNotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceUpdateExtentStatsResult) GetEntityNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetEntityNotExistsError() {
    return MetadataServiceUpdateExtentStatsResult_EntityNotExistsError_DEFAULT
  }
return p.EntityNotExistsError
}
var MetadataServiceUpdateExtentStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateExtentStatsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateExtentStatsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceUpdateExtentStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) IsSetEntityNotExistsError() bool {
  return p.EntityNotExistsError != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateExtentStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UpdateExtentStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityNotExistsError = &shared.EntityNotExistsError{}
  if err := p.EntityNotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistsError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExtentStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityNotExistsError() {
    if err := oprot.WriteFieldBegin("entityNotExistsError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityNotExistsError: ", p), err) }
    if err := p.EntityNotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityNotExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateExtentStatsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateExtentStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateExtentStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceReadStoreExtentReplicaStatsArgs struct {
  Request *ReadStoreExtentReplicaStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceReadStoreExtentReplicaStatsArgs() *MetadataServiceReadStoreExtentReplicaStatsArgs {
  return &MetadataServiceReadStoreExtentReplicaStatsArgs{}
}

var MetadataServiceReadStoreExtentReplicaStatsArgs_Request_DEFAULT *ReadStoreExtentReplicaStatsRequest
func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) GetRequest() *ReadStoreExtentReplicaStatsRequest {
  if !p.IsSetRequest() {
    return MetadataServiceReadStoreExtentReplicaStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadStoreExtentReplicaStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readStoreExtentReplicaStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceReadStoreExtentReplicaStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataServiceReadStoreExtentReplicaStatsResult struct {
  Success *ReadStoreExtentReplicaStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceReadStoreExtentReplicaStatsResult() *MetadataServiceReadStoreExtentReplicaStatsResult {
  return &MetadataServiceReadStoreExtentReplicaStatsResult{}
}

var MetadataServiceReadStoreExtentReplicaStatsResult_Success_DEFAULT *ReadStoreExtentReplicaStatsResult_
func (p *MetadataServiceReadStoreExtentReplicaStatsResult) GetSuccess() *ReadStoreExtentReplicaStatsResult_ {
  if !p.IsSetSuccess() {
    return MetadataServiceReadStoreExtentReplicaStatsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceReadStoreExtentReplicaStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceReadStoreExtentReplicaStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceReadStoreExtentReplicaStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceReadStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceReadStoreExtentReplicaStatsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceReadStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceReadStoreExtentReplicaStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadStoreExtentReplicaStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readStoreExtentReplicaStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadStoreExtentReplicaStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceReadStoreExtentReplicaStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceSealExtentArgs struct {
  Request *SealExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceSealExtentArgs() *MetadataServiceSealExtentArgs {
  return &MetadataServiceSealExtentArgs{}
}

var MetadataServiceSealExtentArgs_Request_DEFAULT *SealExtentRequest
func (p *MetadataServiceSealExtentArgs) GetRequest() *SealExtentRequest {
  if !p.IsSetRequest() {
    return MetadataServiceSealExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceSealExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceSealExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceSealExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SealExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceSealExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sealExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceSealExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceSealExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceSealExtentArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - IllegalStateError
//  - InternalServiceError
type MetadataServiceSealExtentResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  IllegalStateError *IllegalStateError `thrift:"illegalStateError,2" db:"illegalStateError" json:"illegalStateError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceSealExtentResult() *MetadataServiceSealExtentResult {
  return &MetadataServiceSealExtentResult{}
}

var MetadataServiceSealExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceSealExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceSealExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceSealExtentResult_IllegalStateError_DEFAULT *IllegalStateError
func (p *MetadataServiceSealExtentResult) GetIllegalStateError() *IllegalStateError {
  if !p.IsSetIllegalStateError() {
    return MetadataServiceSealExtentResult_IllegalStateError_DEFAULT
  }
return p.IllegalStateError
}
var MetadataServiceSealExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceSealExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceSealExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceSealExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceSealExtentResult) IsSetIllegalStateError() bool {
  return p.IllegalStateError != nil
}

func (p *MetadataServiceSealExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceSealExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceSealExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceSealExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.IllegalStateError = &IllegalStateError{}
  if err := p.IllegalStateError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IllegalStateError), err)
  }
  return nil
}

func (p *MetadataServiceSealExtentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceSealExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sealExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceSealExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceSealExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIllegalStateError() {
    if err := oprot.WriteFieldBegin("illegalStateError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:illegalStateError: ", p), err) }
    if err := p.IllegalStateError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IllegalStateError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:illegalStateError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceSealExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceSealExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceSealExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateExtentReplicaStatsArgs struct {
  Request *UpdateExtentReplicaStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceUpdateExtentReplicaStatsArgs() *MetadataServiceUpdateExtentReplicaStatsArgs {
  return &MetadataServiceUpdateExtentReplicaStatsArgs{}
}

var MetadataServiceUpdateExtentReplicaStatsArgs_Request_DEFAULT *UpdateExtentReplicaStatsRequest
func (p *MetadataServiceUpdateExtentReplicaStatsArgs) GetRequest() *UpdateExtentReplicaStatsRequest {
  if !p.IsSetRequest() {
    return MetadataServiceUpdateExtentReplicaStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceUpdateExtentReplicaStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateExtentReplicaStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExtentReplicaStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateExtentReplicaStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateExtentReplicaStatsArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateExtentReplicaStatsResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateExtentReplicaStatsResult() *MetadataServiceUpdateExtentReplicaStatsResult {
  return &MetadataServiceUpdateExtentReplicaStatsResult{}
}

var MetadataServiceUpdateExtentReplicaStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateExtentReplicaStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateExtentReplicaStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateExtentReplicaStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateExtentReplicaStatsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateExtentReplicaStatsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceUpdateExtentReplicaStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExtentReplicaStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateExtentReplicaStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateExtentReplicaStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateStoreExtentReplicaStatsArgs struct {
  Request *UpdateStoreExtentReplicaStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceUpdateStoreExtentReplicaStatsArgs() *MetadataServiceUpdateStoreExtentReplicaStatsArgs {
  return &MetadataServiceUpdateStoreExtentReplicaStatsArgs{}
}

var MetadataServiceUpdateStoreExtentReplicaStatsArgs_Request_DEFAULT *UpdateStoreExtentReplicaStatsRequest
func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) GetRequest() *UpdateStoreExtentReplicaStatsRequest {
  if !p.IsSetRequest() {
    return MetadataServiceUpdateStoreExtentReplicaStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateStoreExtentReplicaStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateStoreExtentReplicaStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateStoreExtentReplicaStatsArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
type MetadataServiceUpdateStoreExtentReplicaStatsResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceUpdateStoreExtentReplicaStatsResult() *MetadataServiceUpdateStoreExtentReplicaStatsResult {
  return &MetadataServiceUpdateStoreExtentReplicaStatsResult{}
}

var MetadataServiceUpdateStoreExtentReplicaStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateStoreExtentReplicaStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateStoreExtentReplicaStatsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateStoreExtentReplicaStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateStoreExtentReplicaStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateStoreExtentReplicaStatsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceMoveExtentArgs struct {
  Request *MoveExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceMoveExtentArgs() *MetadataServiceMoveExtentArgs {
  return &MetadataServiceMoveExtentArgs{}
}

var MetadataServiceMoveExtentArgs_Request_DEFAULT *MoveExtentRequest
func (p *MetadataServiceMoveExtentArgs) GetRequest() *MoveExtentRequest {
  if !p.IsSetRequest() {
    return MetadataServiceMoveExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceMoveExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceMoveExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceMoveExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &MoveExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceMoveExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moveExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceMoveExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceMoveExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceMoveExtentArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - IllegalStateError
//  - InternalServiceError
type MetadataServiceMoveExtentResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  IllegalStateError *IllegalStateError `thrift:"illegalStateError,2" db:"illegalStateError" json:"illegalStateError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceMoveExtentResult() *MetadataServiceMoveExtentResult {
  return &MetadataServiceMoveExtentResult{}
}

var MetadataServiceMoveExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceMoveExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceMoveExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceMoveExtentResult_IllegalStateError_DEFAULT *IllegalStateError
func (p *MetadataServiceMoveExtentResult) GetIllegalStateError() *IllegalStateError {
  if !p.IsSetIllegalStateError() {
    return MetadataServiceMoveExtentResult_IllegalStateError_DEFAULT
  }
return p.IllegalStateError
}
var MetadataServiceMoveExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceMoveExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceMoveExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceMoveExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceMoveExtentResult) IsSetIllegalStateError() bool {
  return p.IllegalStateError != nil
}

func (p *MetadataServiceMoveExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceMoveExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceMoveExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceMoveExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.IllegalStateError = &IllegalStateError{}
  if err := p.IllegalStateError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IllegalStateError), err)
  }
  return nil
}

func (p *MetadataServiceMoveExtentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceMoveExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("moveExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceMoveExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceMoveExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIllegalStateError() {
    if err := oprot.WriteFieldBegin("illegalStateError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:illegalStateError: ", p), err) }
    if err := p.IllegalStateError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IllegalStateError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:illegalStateError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceMoveExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceMoveExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceMoveExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceListDestinationExtentsArgs struct {
  Request *ListDestinationExtentsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceListDestinationExtentsArgs() *MetadataServiceListDestinationExtentsArgs {
  return &MetadataServiceListDestinationExtentsArgs{}
}

var MetadataServiceListDestinationExtentsArgs_Request_DEFAULT *ListDestinationExtentsRequest
func (p *MetadataServiceListDestinationExtentsArgs) GetRequest() *ListDestinationExtentsRequest {
  if !p.IsSetRequest() {
    return MetadataServiceListDestinationExtentsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceListDestinationExtentsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceListDestinationExtentsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceListDestinationExtentsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ListDestinationExtentsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceListDestinationExtentsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinationExtents_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceListDestinationExtentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceListDestinationExtentsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceListDestinationExtentsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataServiceListDestinationExtentsResult struct {
  Success *ListDestinationExtentsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceListDestinationExtentsResult() *MetadataServiceListDestinationExtentsResult {
  return &MetadataServiceListDestinationExtentsResult{}
}

var MetadataServiceListDestinationExtentsResult_Success_DEFAULT *ListDestinationExtentsResult_
func (p *MetadataServiceListDestinationExtentsResult) GetSuccess() *ListDestinationExtentsResult_ {
  if !p.IsSetSuccess() {
    return MetadataServiceListDestinationExtentsResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceListDestinationExtentsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceListDestinationExtentsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceListDestinationExtentsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceListDestinationExtentsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceListDestinationExtentsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceListDestinationExtentsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceListDestinationExtentsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceListDestinationExtentsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceListDestinationExtentsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceListDestinationExtentsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceListDestinationExtentsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListDestinationExtentsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceListDestinationExtentsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceListDestinationExtentsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceListDestinationExtentsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinationExtents_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceListDestinationExtentsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceListDestinationExtentsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceListDestinationExtentsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceListDestinationExtentsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceListDestinationExtentsResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceReadConsumerGroupExtentsLiteArgs struct {
  Request *ReadConsumerGroupExtentsLiteRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceReadConsumerGroupExtentsLiteArgs() *MetadataServiceReadConsumerGroupExtentsLiteArgs {
  return &MetadataServiceReadConsumerGroupExtentsLiteArgs{}
}

var MetadataServiceReadConsumerGroupExtentsLiteArgs_Request_DEFAULT *ReadConsumerGroupExtentsLiteRequest
func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs) GetRequest() *ReadConsumerGroupExtentsLiteRequest {
  if !p.IsSetRequest() {
    return MetadataServiceReadConsumerGroupExtentsLiteArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadConsumerGroupExtentsLiteRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtentsLite_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceReadConsumerGroupExtentsLiteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type MetadataServiceReadConsumerGroupExtentsLiteResult struct {
  Success *ReadConsumerGroupExtentsLiteResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceReadConsumerGroupExtentsLiteResult() *MetadataServiceReadConsumerGroupExtentsLiteResult {
  return &MetadataServiceReadConsumerGroupExtentsLiteResult{}
}

var MetadataServiceReadConsumerGroupExtentsLiteResult_Success_DEFAULT *ReadConsumerGroupExtentsLiteResult_
func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) GetSuccess() *ReadConsumerGroupExtentsLiteResult_ {
  if !p.IsSetSuccess() {
    return MetadataServiceReadConsumerGroupExtentsLiteResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceReadConsumerGroupExtentsLiteResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceReadConsumerGroupExtentsLiteResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceReadConsumerGroupExtentsLiteResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceReadConsumerGroupExtentsLiteResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadConsumerGroupExtentsLiteResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupExtentsLite_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadConsumerGroupExtentsLiteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceReadConsumerGroupExtentsLiteResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceSetAckOffsetArgs struct {
  Request *SetAckOffsetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceSetAckOffsetArgs() *MetadataServiceSetAckOffsetArgs {
  return &MetadataServiceSetAckOffsetArgs{}
}

var MetadataServiceSetAckOffsetArgs_Request_DEFAULT *SetAckOffsetRequest
func (p *MetadataServiceSetAckOffsetArgs) GetRequest() *SetAckOffsetRequest {
  if !p.IsSetRequest() {
    return MetadataServiceSetAckOffsetArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceSetAckOffsetArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceSetAckOffsetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceSetAckOffsetArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SetAckOffsetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceSetAckOffsetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setAckOffset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceSetAckOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceSetAckOffsetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceSetAckOffsetArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type MetadataServiceSetAckOffsetResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceSetAckOffsetResult() *MetadataServiceSetAckOffsetResult {
  return &MetadataServiceSetAckOffsetResult{}
}

var MetadataServiceSetAckOffsetResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceSetAckOffsetResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceSetAckOffsetResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceSetAckOffsetResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceSetAckOffsetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceSetAckOffsetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceSetAckOffsetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setAckOffset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceSetAckOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceSetAckOffsetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceSetAckOffsetResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateConsumerGroupExtentStatusArgs struct {
  Request *UpdateConsumerGroupExtentStatusRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceUpdateConsumerGroupExtentStatusArgs() *MetadataServiceUpdateConsumerGroupExtentStatusArgs {
  return &MetadataServiceUpdateConsumerGroupExtentStatusArgs{}
}

var MetadataServiceUpdateConsumerGroupExtentStatusArgs_Request_DEFAULT *UpdateConsumerGroupExtentStatusRequest
func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) GetRequest() *UpdateConsumerGroupExtentStatusRequest {
  if !p.IsSetRequest() {
    return MetadataServiceUpdateConsumerGroupExtentStatusArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateConsumerGroupExtentStatusRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroupExtentStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateConsumerGroupExtentStatusArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
//  - NotExistsError
type MetadataServiceUpdateConsumerGroupExtentStatusResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,3" db:"notExistsError" json:"notExistsError,omitempty"`
}

func NewMetadataServiceUpdateConsumerGroupExtentStatusResult() *MetadataServiceUpdateConsumerGroupExtentStatusResult {
  return &MetadataServiceUpdateConsumerGroupExtentStatusResult{}
}

var MetadataServiceUpdateConsumerGroupExtentStatusResult_RequestError_DEFAULT *shared.BadRequestError
func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return MetadataServiceUpdateConsumerGroupExtentStatusResult_RequestError_DEFAULT
  }
return p.RequestError
}
var MetadataServiceUpdateConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceUpdateConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var MetadataServiceUpdateConsumerGroupExtentStatusResult_NotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) GetNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetNotExistsError() {
    return MetadataServiceUpdateConsumerGroupExtentStatusResult_NotExistsError_DEFAULT
  }
return p.NotExistsError
}
func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) IsSetNotExistsError() bool {
  return p.NotExistsError != nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult)  ReadField3(iprot thrift.TProtocol) error {
  p.NotExistsError = &shared.EntityNotExistsError{}
  if err := p.NotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
  }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroupExtentStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotExistsError() {
    if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notExistsError: ", p), err) }
    if err := p.NotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notExistsError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateConsumerGroupExtentStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateConsumerGroupExtentStatusResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateConsumerGroupExtentArgs struct {
  Request *shared.CreateConsumerGroupExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceCreateConsumerGroupExtentArgs() *MetadataServiceCreateConsumerGroupExtentArgs {
  return &MetadataServiceCreateConsumerGroupExtentArgs{}
}

var MetadataServiceCreateConsumerGroupExtentArgs_Request_DEFAULT *shared.CreateConsumerGroupExtentRequest
func (p *MetadataServiceCreateConsumerGroupExtentArgs) GetRequest() *shared.CreateConsumerGroupExtentRequest {
  if !p.IsSetRequest() {
    return MetadataServiceCreateConsumerGroupExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceCreateConsumerGroupExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.CreateConsumerGroupExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroupExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceCreateConsumerGroupExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateConsumerGroupExtentArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type MetadataServiceCreateConsumerGroupExtentResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceCreateConsumerGroupExtentResult() *MetadataServiceCreateConsumerGroupExtentResult {
  return &MetadataServiceCreateConsumerGroupExtentResult{}
}

var MetadataServiceCreateConsumerGroupExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateConsumerGroupExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceCreateConsumerGroupExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceCreateConsumerGroupExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroupExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateConsumerGroupExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateConsumerGroupExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceSetOutputHostArgs struct {
  Request *SetOutputHostRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceSetOutputHostArgs() *MetadataServiceSetOutputHostArgs {
  return &MetadataServiceSetOutputHostArgs{}
}

var MetadataServiceSetOutputHostArgs_Request_DEFAULT *SetOutputHostRequest
func (p *MetadataServiceSetOutputHostArgs) GetRequest() *SetOutputHostRequest {
  if !p.IsSetRequest() {
    return MetadataServiceSetOutputHostArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceSetOutputHostArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceSetOutputHostArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceSetOutputHostArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SetOutputHostRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceSetOutputHostArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setOutputHost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceSetOutputHostArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceSetOutputHostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceSetOutputHostArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type MetadataServiceSetOutputHostResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewMetadataServiceSetOutputHostResult() *MetadataServiceSetOutputHostResult {
  return &MetadataServiceSetOutputHostResult{}
}

var MetadataServiceSetOutputHostResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceSetOutputHostResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return MetadataServiceSetOutputHostResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *MetadataServiceSetOutputHostResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *MetadataServiceSetOutputHostResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceSetOutputHostResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *MetadataServiceSetOutputHostResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setOutputHost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceSetOutputHostResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *MetadataServiceSetOutputHostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceSetOutputHostResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceRegisterHostUUIDArgs struct {
  Request *RegisterHostUUIDRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceRegisterHostUUIDArgs() *MetadataServiceRegisterHostUUIDArgs {
  return &MetadataServiceRegisterHostUUIDArgs{}
}

var MetadataServiceRegisterHostUUIDArgs_Request_DEFAULT *RegisterHostUUIDRequest
func (p *MetadataServiceRegisterHostUUIDArgs) GetRequest() *RegisterHostUUIDRequest {
  if !p.IsSetRequest() {
    return MetadataServiceRegisterHostUUIDArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceRegisterHostUUIDArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceRegisterHostUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &RegisterHostUUIDRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerHostUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceRegisterHostUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceRegisterHostUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceRegisterHostUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceRegisterHostUUIDResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataServiceRegisterHostUUIDResult() *MetadataServiceRegisterHostUUIDResult {
  return &MetadataServiceRegisterHostUUIDResult{}
}

var MetadataServiceRegisterHostUUIDResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceRegisterHostUUIDResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataServiceRegisterHostUUIDResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataServiceRegisterHostUUIDResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataServiceRegisterHostUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceRegisterHostUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataServiceRegisterHostUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerHostUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceRegisterHostUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataServiceRegisterHostUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceRegisterHostUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceCreateHostInfoArgs struct {
  Request *CreateHostInfoRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceCreateHostInfoArgs() *MetadataServiceCreateHostInfoArgs {
  return &MetadataServiceCreateHostInfoArgs{}
}

var MetadataServiceCreateHostInfoArgs_Request_DEFAULT *CreateHostInfoRequest
func (p *MetadataServiceCreateHostInfoArgs) GetRequest() *CreateHostInfoRequest {
  if !p.IsSetRequest() {
    return MetadataServiceCreateHostInfoArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceCreateHostInfoArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceCreateHostInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateHostInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CreateHostInfoRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceCreateHostInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createHostInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceCreateHostInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceCreateHostInfoResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataServiceCreateHostInfoResult() *MetadataServiceCreateHostInfoResult {
  return &MetadataServiceCreateHostInfoResult{}
}

var MetadataServiceCreateHostInfoResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceCreateHostInfoResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataServiceCreateHostInfoResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataServiceCreateHostInfoResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataServiceCreateHostInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceCreateHostInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataServiceCreateHostInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createHostInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceCreateHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataServiceCreateHostInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceCreateHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceUpdateHostInfoArgs struct {
  Request *UpdateHostInfoRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceUpdateHostInfoArgs() *MetadataServiceUpdateHostInfoArgs {
  return &MetadataServiceUpdateHostInfoArgs{}
}

var MetadataServiceUpdateHostInfoArgs_Request_DEFAULT *UpdateHostInfoRequest
func (p *MetadataServiceUpdateHostInfoArgs) GetRequest() *UpdateHostInfoRequest {
  if !p.IsSetRequest() {
    return MetadataServiceUpdateHostInfoArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceUpdateHostInfoArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceUpdateHostInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateHostInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateHostInfoRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceUpdateHostInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateHostInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceUpdateHostInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceUpdateHostInfoResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataServiceUpdateHostInfoResult() *MetadataServiceUpdateHostInfoResult {
  return &MetadataServiceUpdateHostInfoResult{}
}

var MetadataServiceUpdateHostInfoResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceUpdateHostInfoResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataServiceUpdateHostInfoResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataServiceUpdateHostInfoResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataServiceUpdateHostInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceUpdateHostInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataServiceUpdateHostInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateHostInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceUpdateHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataServiceUpdateHostInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceUpdateHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceDeleteHostInfoArgs struct {
  Request *DeleteHostInfoRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceDeleteHostInfoArgs() *MetadataServiceDeleteHostInfoArgs {
  return &MetadataServiceDeleteHostInfoArgs{}
}

var MetadataServiceDeleteHostInfoArgs_Request_DEFAULT *DeleteHostInfoRequest
func (p *MetadataServiceDeleteHostInfoArgs) GetRequest() *DeleteHostInfoRequest {
  if !p.IsSetRequest() {
    return MetadataServiceDeleteHostInfoArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceDeleteHostInfoArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceDeleteHostInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteHostInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &DeleteHostInfoRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceDeleteHostInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteHostInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceDeleteHostInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Error
type MetadataServiceDeleteHostInfoResult struct {
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataServiceDeleteHostInfoResult() *MetadataServiceDeleteHostInfoResult {
  return &MetadataServiceDeleteHostInfoResult{}
}

var MetadataServiceDeleteHostInfoResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceDeleteHostInfoResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataServiceDeleteHostInfoResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataServiceDeleteHostInfoResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataServiceDeleteHostInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceDeleteHostInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataServiceDeleteHostInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteHostInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceDeleteHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataServiceDeleteHostInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceDeleteHostInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type MetadataServiceReadHostInfoArgs struct {
  Request *ReadHostInfoRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewMetadataServiceReadHostInfoArgs() *MetadataServiceReadHostInfoArgs {
  return &MetadataServiceReadHostInfoArgs{}
}

var MetadataServiceReadHostInfoArgs_Request_DEFAULT *ReadHostInfoRequest
func (p *MetadataServiceReadHostInfoArgs) GetRequest() *ReadHostInfoRequest {
  if !p.IsSetRequest() {
    return MetadataServiceReadHostInfoArgs_Request_DEFAULT
  }
return p.Request
}
func (p *MetadataServiceReadHostInfoArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *MetadataServiceReadHostInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceReadHostInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReadHostInfoRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *MetadataServiceReadHostInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readHostInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceReadHostInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *MetadataServiceReadHostInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceReadHostInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type MetadataServiceReadHostInfoResult struct {
  Success *ReadHostInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *shared.InternalServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMetadataServiceReadHostInfoResult() *MetadataServiceReadHostInfoResult {
  return &MetadataServiceReadHostInfoResult{}
}

var MetadataServiceReadHostInfoResult_Success_DEFAULT *ReadHostInfoResult_
func (p *MetadataServiceReadHostInfoResult) GetSuccess() *ReadHostInfoResult_ {
  if !p.IsSetSuccess() {
    return MetadataServiceReadHostInfoResult_Success_DEFAULT
  }
return p.Success
}
var MetadataServiceReadHostInfoResult_Error_DEFAULT *shared.InternalServiceError
func (p *MetadataServiceReadHostInfoResult) GetError() *shared.InternalServiceError {
  if !p.IsSetError() {
    return MetadataServiceReadHostInfoResult_Error_DEFAULT
  }
return p.Error
}
func (p *MetadataServiceReadHostInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MetadataServiceReadHostInfoResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MetadataServiceReadHostInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataServiceReadHostInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadHostInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MetadataServiceReadHostInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &shared.InternalServiceError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MetadataServiceReadHostInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readHostInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataServiceReadHostInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadHostInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MetadataServiceReadHostInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataServiceReadHostInfoResult(%+v)", *p)
}


