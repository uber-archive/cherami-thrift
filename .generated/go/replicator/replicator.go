// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package replicator

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
type Replicator interface {
  // *** Destination CUD (Read is handled locally) ****
  // 
  // Parameters:
  //  - CreateRequest
  CreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - CreateRequest
  CreateRemoteDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (err error)
  // Parameters:
  //  - UpdateRequest
  UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateRemoteDestination(updateRequest *shared.UpdateDestinationRequest) (err error)
  // Parameters:
  //  - DeleteRequest
  DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error)
  // Parameters:
  //  - DeleteRequest
  DeleteRemoteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error)
  // *** ConsumerGroup CUD (Read is handled locally) ****
  // 
  // Parameters:
  //  - CreateRequest
  CreateConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - CreateRequest
  CreateRemoteConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest) (err error)
  // Parameters:
  //  - UpdateRequest
  UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateRemoteConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (err error)
  // Parameters:
  //  - DeleteRequest
  DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error)
  // Parameters:
  //  - DeleteRequest
  DeleteRemoteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error)
  // *** Dest Extent Creation ***************************
  // 
  // Parameters:
  //  - CreateRequest
  CreateExtent(createRequest *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error)
  // Parameters:
  //  - CreateRequest
  CreateRemoteExtent(createRequest *shared.CreateExtentRequest) (err error)
  // *** Cg Dest Extent creation and update  ************
  // 
  // Parameters:
  //  - Request
  CreateConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest) (err error)
  // Parameters:
  //  - Request
  CreateRemoteConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest) (err error)
  // Parameters:
  //  - Request
  SetAckOffset(request *shared.SetAckOffsetRequest) (err error)
  // Parameters:
  //  - Request
  SetAckOffsetInRemote(request *shared.SetAckOffsetRequest) (err error)
  // Parameters:
  //  - Request
  UpdateConsumerGroupExtentStatus(request *shared.UpdateConsumerGroupExtentStatusRequest) (err error)
  // Parameters:
  //  - Request
  UpdateRemoteConsumerGroupExtentStatus(request *shared.UpdateConsumerGroupExtentStatusRequest) (err error)
  // *** Reconciliation APIs *****************************
  // 
  // Parameters:
  //  - ListRequest
  ListDestinations(listRequest *shared.ListDestinationsRequest) (r *shared.ListDestinationsResult_, err error)
  // Parameters:
  //  - ListRequest
  ListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (r *shared.ListDestinationsResult_, err error)
  // Parameters:
  //  - Request
  ListExtentsStats(request *shared.ListExtentsStatsRequest) (r *shared.ListExtentsStatsResult_, err error)
  // Parameters:
  //  - GetRequest
  ReadDestination(getRequest *shared.ReadDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - ListRequest
  ListConsumerGroups(listRequest *shared.ListConsumerGroupRequest) (r *shared.ListConsumerGroupResult_, err error)
}

type ReplicatorClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewReplicatorClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ReplicatorClient {
  return &ReplicatorClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewReplicatorClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ReplicatorClient {
  return &ReplicatorClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// *** Destination CUD (Read is handled locally) ****
// 
// Parameters:
//  - CreateRequest
func (p *ReplicatorClient) CreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendCreateDestinationUUID(createRequest); err != nil { return }
  return p.recvCreateDestinationUUID()
}

func (p *ReplicatorClient) sendCreateDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createDestinationUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateDestinationUUIDArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateDestinationUUID() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createDestinationUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestinationUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestinationUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestinationUUID failed: invalid message type")
    return
  }
  result := ReplicatorCreateDestinationUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - CreateRequest
func (p *ReplicatorClient) CreateRemoteDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest) (err error) {
  if err = p.sendCreateRemoteDestinationUUID(createRequest); err != nil { return }
  return p.recvCreateRemoteDestinationUUID()
}

func (p *ReplicatorClient) sendCreateRemoteDestinationUUID(createRequest *shared.CreateDestinationUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createRemoteDestinationUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateRemoteDestinationUUIDArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateRemoteDestinationUUID() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createRemoteDestinationUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRemoteDestinationUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRemoteDestinationUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRemoteDestinationUUID failed: invalid message type")
    return
  }
  result := ReplicatorCreateRemoteDestinationUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - UpdateRequest
func (p *ReplicatorClient) UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendUpdateDestination(updateRequest); err != nil { return }
  return p.recvUpdateDestination()
}

func (p *ReplicatorClient) sendUpdateDestination(updateRequest *shared.UpdateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorUpdateDestinationArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvUpdateDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
    return
  }
  result := ReplicatorUpdateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *ReplicatorClient) UpdateRemoteDestination(updateRequest *shared.UpdateDestinationRequest) (err error) {
  if err = p.sendUpdateRemoteDestination(updateRequest); err != nil { return }
  return p.recvUpdateRemoteDestination()
}

func (p *ReplicatorClient) sendUpdateRemoteDestination(updateRequest *shared.UpdateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateRemoteDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorUpdateRemoteDestinationArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvUpdateRemoteDestination() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateRemoteDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateRemoteDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateRemoteDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateRemoteDestination failed: invalid message type")
    return
  }
  result := ReplicatorUpdateRemoteDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - DeleteRequest
func (p *ReplicatorClient) DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
  if err = p.sendDeleteDestination(deleteRequest); err != nil { return }
  return p.recvDeleteDestination()
}

func (p *ReplicatorClient) sendDeleteDestination(deleteRequest *shared.DeleteDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorDeleteDestinationArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvDeleteDestination() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
    return
  }
  result := ReplicatorDeleteDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - DeleteRequest
func (p *ReplicatorClient) DeleteRemoteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
  if err = p.sendDeleteRemoteDestination(deleteRequest); err != nil { return }
  return p.recvDeleteRemoteDestination()
}

func (p *ReplicatorClient) sendDeleteRemoteDestination(deleteRequest *shared.DeleteDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteRemoteDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorDeleteRemoteDestinationArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvDeleteRemoteDestination() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteRemoteDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteRemoteDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteRemoteDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteRemoteDestination failed: invalid message type")
    return
  }
  result := ReplicatorDeleteRemoteDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// *** ConsumerGroup CUD (Read is handled locally) ****
// 
// Parameters:
//  - CreateRequest
func (p *ReplicatorClient) CreateConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendCreateConsumerGroupUUID(createRequest); err != nil { return }
  return p.recvCreateConsumerGroupUUID()
}

func (p *ReplicatorClient) sendCreateConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createConsumerGroupUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateConsumerGroupUUIDArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateConsumerGroupUUID() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createConsumerGroupUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroupUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroupUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroupUUID failed: invalid message type")
    return
  }
  result := ReplicatorCreateConsumerGroupUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - CreateRequest
func (p *ReplicatorClient) CreateRemoteConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest) (err error) {
  if err = p.sendCreateRemoteConsumerGroupUUID(createRequest); err != nil { return }
  return p.recvCreateRemoteConsumerGroupUUID()
}

func (p *ReplicatorClient) sendCreateRemoteConsumerGroupUUID(createRequest *shared.CreateConsumerGroupUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createRemoteConsumerGroupUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateRemoteConsumerGroupUUIDArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateRemoteConsumerGroupUUID() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createRemoteConsumerGroupUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRemoteConsumerGroupUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRemoteConsumerGroupUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRemoteConsumerGroupUUID failed: invalid message type")
    return
  }
  result := ReplicatorCreateRemoteConsumerGroupUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - UpdateRequest
func (p *ReplicatorClient) UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendUpdateConsumerGroup(updateRequest); err != nil { return }
  return p.recvUpdateConsumerGroup()
}

func (p *ReplicatorClient) sendUpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorUpdateConsumerGroupArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvUpdateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
    return
  }
  result := ReplicatorUpdateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *ReplicatorClient) UpdateRemoteConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (err error) {
  if err = p.sendUpdateRemoteConsumerGroup(updateRequest); err != nil { return }
  return p.recvUpdateRemoteConsumerGroup()
}

func (p *ReplicatorClient) sendUpdateRemoteConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateRemoteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorUpdateRemoteConsumerGroupArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvUpdateRemoteConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateRemoteConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateRemoteConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateRemoteConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateRemoteConsumerGroup failed: invalid message type")
    return
  }
  result := ReplicatorUpdateRemoteConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - DeleteRequest
func (p *ReplicatorClient) DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
  if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil { return }
  return p.recvDeleteConsumerGroup()
}

func (p *ReplicatorClient) sendDeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorDeleteConsumerGroupArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvDeleteConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
    return
  }
  result := ReplicatorDeleteConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - DeleteRequest
func (p *ReplicatorClient) DeleteRemoteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
  if err = p.sendDeleteRemoteConsumerGroup(deleteRequest); err != nil { return }
  return p.recvDeleteRemoteConsumerGroup()
}

func (p *ReplicatorClient) sendDeleteRemoteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteRemoteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorDeleteRemoteConsumerGroupArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvDeleteRemoteConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteRemoteConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteRemoteConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteRemoteConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteRemoteConsumerGroup failed: invalid message type")
    return
  }
  result := ReplicatorDeleteRemoteConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// *** Dest Extent Creation ***************************
// 
// Parameters:
//  - CreateRequest
func (p *ReplicatorClient) CreateExtent(createRequest *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error) {
  if err = p.sendCreateExtent(createRequest); err != nil { return }
  return p.recvCreateExtent()
}

func (p *ReplicatorClient) sendCreateExtent(createRequest *shared.CreateExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateExtentArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateExtent() (value *shared.CreateExtentResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createExtent failed: invalid message type")
    return
  }
  result := ReplicatorCreateExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - CreateRequest
func (p *ReplicatorClient) CreateRemoteExtent(createRequest *shared.CreateExtentRequest) (err error) {
  if err = p.sendCreateRemoteExtent(createRequest); err != nil { return }
  return p.recvCreateRemoteExtent()
}

func (p *ReplicatorClient) sendCreateRemoteExtent(createRequest *shared.CreateExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createRemoteExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateRemoteExtentArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateRemoteExtent() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createRemoteExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRemoteExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRemoteExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRemoteExtent failed: invalid message type")
    return
  }
  result := ReplicatorCreateRemoteExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// *** Cg Dest Extent creation and update  ************
// 
// Parameters:
//  - Request
func (p *ReplicatorClient) CreateConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest) (err error) {
  if err = p.sendCreateConsumerGroupExtent(request); err != nil { return }
  return p.recvCreateConsumerGroupExtent()
}

func (p *ReplicatorClient) sendCreateConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateConsumerGroupExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateConsumerGroupExtent() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createConsumerGroupExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroupExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroupExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroupExtent failed: invalid message type")
    return
  }
  result := ReplicatorCreateConsumerGroupExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *ReplicatorClient) CreateRemoteConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest) (err error) {
  if err = p.sendCreateRemoteConsumerGroupExtent(request); err != nil { return }
  return p.recvCreateRemoteConsumerGroupExtent()
}

func (p *ReplicatorClient) sendCreateRemoteConsumerGroupExtent(request *shared.CreateConsumerGroupExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createRemoteConsumerGroupExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorCreateRemoteConsumerGroupExtentArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvCreateRemoteConsumerGroupExtent() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createRemoteConsumerGroupExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRemoteConsumerGroupExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRemoteConsumerGroupExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRemoteConsumerGroupExtent failed: invalid message type")
    return
  }
  result := ReplicatorCreateRemoteConsumerGroupExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *ReplicatorClient) SetAckOffset(request *shared.SetAckOffsetRequest) (err error) {
  if err = p.sendSetAckOffset(request); err != nil { return }
  return p.recvSetAckOffset()
}

func (p *ReplicatorClient) sendSetAckOffset(request *shared.SetAckOffsetRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setAckOffset", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorSetAckOffsetArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvSetAckOffset() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setAckOffset" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setAckOffset failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setAckOffset failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setAckOffset failed: invalid message type")
    return
  }
  result := ReplicatorSetAckOffsetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *ReplicatorClient) SetAckOffsetInRemote(request *shared.SetAckOffsetRequest) (err error) {
  if err = p.sendSetAckOffsetInRemote(request); err != nil { return }
  return p.recvSetAckOffsetInRemote()
}

func (p *ReplicatorClient) sendSetAckOffsetInRemote(request *shared.SetAckOffsetRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setAckOffsetInRemote", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorSetAckOffsetInRemoteArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvSetAckOffsetInRemote() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setAckOffsetInRemote" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setAckOffsetInRemote failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setAckOffsetInRemote failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setAckOffsetInRemote failed: invalid message type")
    return
  }
  result := ReplicatorSetAckOffsetInRemoteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *ReplicatorClient) UpdateConsumerGroupExtentStatus(request *shared.UpdateConsumerGroupExtentStatusRequest) (err error) {
  if err = p.sendUpdateConsumerGroupExtentStatus(request); err != nil { return }
  return p.recvUpdateConsumerGroupExtentStatus()
}

func (p *ReplicatorClient) sendUpdateConsumerGroupExtentStatus(request *shared.UpdateConsumerGroupExtentStatusRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorUpdateConsumerGroupExtentStatusArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvUpdateConsumerGroupExtentStatus() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateConsumerGroupExtentStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroupExtentStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroupExtentStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroupExtentStatus failed: invalid message type")
    return
  }
  result := ReplicatorUpdateConsumerGroupExtentStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.NotExistsError != nil {
    err = result.NotExistsError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *ReplicatorClient) UpdateRemoteConsumerGroupExtentStatus(request *shared.UpdateConsumerGroupExtentStatusRequest) (err error) {
  if err = p.sendUpdateRemoteConsumerGroupExtentStatus(request); err != nil { return }
  return p.recvUpdateRemoteConsumerGroupExtentStatus()
}

func (p *ReplicatorClient) sendUpdateRemoteConsumerGroupExtentStatus(request *shared.UpdateConsumerGroupExtentStatusRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateRemoteConsumerGroupExtentStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvUpdateRemoteConsumerGroupExtentStatus() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateRemoteConsumerGroupExtentStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateRemoteConsumerGroupExtentStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateRemoteConsumerGroupExtentStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateRemoteConsumerGroupExtentStatus failed: invalid message type")
    return
  }
  result := ReplicatorUpdateRemoteConsumerGroupExtentStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  } else   if result.NotExistsError != nil {
    err = result.NotExistsError
    return 
  }
  return
}

// *** Reconciliation APIs *****************************
// 
// Parameters:
//  - ListRequest
func (p *ReplicatorClient) ListDestinations(listRequest *shared.ListDestinationsRequest) (r *shared.ListDestinationsResult_, err error) {
  if err = p.sendListDestinations(listRequest); err != nil { return }
  return p.recvListDestinations()
}

func (p *ReplicatorClient) sendListDestinations(listRequest *shared.ListDestinationsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listDestinations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorListDestinationsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvListDestinations() (value *shared.ListDestinationsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listDestinations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinations failed: invalid message type")
    return
  }
  result := ReplicatorListDestinationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *ReplicatorClient) ListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest) (r *shared.ListDestinationsResult_, err error) {
  if err = p.sendListDestinationsByUUID(listRequest); err != nil { return }
  return p.recvListDestinationsByUUID()
}

func (p *ReplicatorClient) sendListDestinationsByUUID(listRequest *shared.ListDestinationsByUUIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listDestinationsByUUID", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorListDestinationsByUUIDArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvListDestinationsByUUID() (value *shared.ListDestinationsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listDestinationsByUUID" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinationsByUUID failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinationsByUUID failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinationsByUUID failed: invalid message type")
    return
  }
  result := ReplicatorListDestinationsByUUIDResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Request
func (p *ReplicatorClient) ListExtentsStats(request *shared.ListExtentsStatsRequest) (r *shared.ListExtentsStatsResult_, err error) {
  if err = p.sendListExtentsStats(request); err != nil { return }
  return p.recvListExtentsStats()
}

func (p *ReplicatorClient) sendListExtentsStats(request *shared.ListExtentsStatsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listExtentsStats", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorListExtentsStatsArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvListExtentsStats() (value *shared.ListExtentsStatsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listExtentsStats" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listExtentsStats failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listExtentsStats failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listExtentsStats failed: invalid message type")
    return
  }
  result := ReplicatorListExtentsStatsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetRequest
func (p *ReplicatorClient) ReadDestination(getRequest *shared.ReadDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendReadDestination(getRequest); err != nil { return }
  return p.recvReadDestination()
}

func (p *ReplicatorClient) sendReadDestination(getRequest *shared.ReadDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorReadDestinationArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvReadDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error47 error
    error47, err = error46.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error47
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestination failed: invalid message type")
    return
  }
  result := ReplicatorReadDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - ListRequest
func (p *ReplicatorClient) ListConsumerGroups(listRequest *shared.ListConsumerGroupRequest) (r *shared.ListConsumerGroupResult_, err error) {
  if err = p.sendListConsumerGroups(listRequest); err != nil { return }
  return p.recvListConsumerGroups()
}

func (p *ReplicatorClient) sendListConsumerGroups(listRequest *shared.ListConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConsumerGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ReplicatorListConsumerGroupsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ReplicatorClient) recvListConsumerGroups() (value *shared.ListConsumerGroupResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConsumerGroups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listConsumerGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listConsumerGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error49 error
    error49, err = error48.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error49
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConsumerGroups failed: invalid message type")
    return
  }
  result := ReplicatorListConsumerGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}


type ReplicatorProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Replicator
}

func (p *ReplicatorProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ReplicatorProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ReplicatorProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewReplicatorProcessor(handler Replicator) *ReplicatorProcessor {

  self50 := &ReplicatorProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self50.processorMap["createDestinationUUID"] = &replicatorProcessorCreateDestinationUUID{handler:handler}
  self50.processorMap["createRemoteDestinationUUID"] = &replicatorProcessorCreateRemoteDestinationUUID{handler:handler}
  self50.processorMap["updateDestination"] = &replicatorProcessorUpdateDestination{handler:handler}
  self50.processorMap["updateRemoteDestination"] = &replicatorProcessorUpdateRemoteDestination{handler:handler}
  self50.processorMap["deleteDestination"] = &replicatorProcessorDeleteDestination{handler:handler}
  self50.processorMap["deleteRemoteDestination"] = &replicatorProcessorDeleteRemoteDestination{handler:handler}
  self50.processorMap["createConsumerGroupUUID"] = &replicatorProcessorCreateConsumerGroupUUID{handler:handler}
  self50.processorMap["createRemoteConsumerGroupUUID"] = &replicatorProcessorCreateRemoteConsumerGroupUUID{handler:handler}
  self50.processorMap["updateConsumerGroup"] = &replicatorProcessorUpdateConsumerGroup{handler:handler}
  self50.processorMap["updateRemoteConsumerGroup"] = &replicatorProcessorUpdateRemoteConsumerGroup{handler:handler}
  self50.processorMap["deleteConsumerGroup"] = &replicatorProcessorDeleteConsumerGroup{handler:handler}
  self50.processorMap["deleteRemoteConsumerGroup"] = &replicatorProcessorDeleteRemoteConsumerGroup{handler:handler}
  self50.processorMap["createExtent"] = &replicatorProcessorCreateExtent{handler:handler}
  self50.processorMap["createRemoteExtent"] = &replicatorProcessorCreateRemoteExtent{handler:handler}
  self50.processorMap["createConsumerGroupExtent"] = &replicatorProcessorCreateConsumerGroupExtent{handler:handler}
  self50.processorMap["createRemoteConsumerGroupExtent"] = &replicatorProcessorCreateRemoteConsumerGroupExtent{handler:handler}
  self50.processorMap["setAckOffset"] = &replicatorProcessorSetAckOffset{handler:handler}
  self50.processorMap["setAckOffsetInRemote"] = &replicatorProcessorSetAckOffsetInRemote{handler:handler}
  self50.processorMap["updateConsumerGroupExtentStatus"] = &replicatorProcessorUpdateConsumerGroupExtentStatus{handler:handler}
  self50.processorMap["updateRemoteConsumerGroupExtentStatus"] = &replicatorProcessorUpdateRemoteConsumerGroupExtentStatus{handler:handler}
  self50.processorMap["listDestinations"] = &replicatorProcessorListDestinations{handler:handler}
  self50.processorMap["listDestinationsByUUID"] = &replicatorProcessorListDestinationsByUUID{handler:handler}
  self50.processorMap["listExtentsStats"] = &replicatorProcessorListExtentsStats{handler:handler}
  self50.processorMap["readDestination"] = &replicatorProcessorReadDestination{handler:handler}
  self50.processorMap["listConsumerGroups"] = &replicatorProcessorListConsumerGroups{handler:handler}
return self50
}

func (p *ReplicatorProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x51 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x51.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x51

}

type replicatorProcessorCreateDestinationUUID struct {
  handler Replicator
}

func (p *replicatorProcessorCreateDestinationUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateDestinationUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateDestinationUUIDResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.CreateDestinationUUID(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestinationUUID: " + err2.Error())
    oprot.WriteMessageBegin("createDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createDestinationUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateRemoteDestinationUUID struct {
  handler Replicator
}

func (p *replicatorProcessorCreateRemoteDestinationUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateRemoteDestinationUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createRemoteDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateRemoteDestinationUUIDResult{}
  var err2 error
  if err2 = p.handler.CreateRemoteDestinationUUID(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRemoteDestinationUUID: " + err2.Error())
    oprot.WriteMessageBegin("createRemoteDestinationUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createRemoteDestinationUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorUpdateDestination struct {
  handler Replicator
}

func (p *replicatorProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorUpdateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorUpdateDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: " + err2.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorUpdateRemoteDestination struct {
  handler Replicator
}

func (p *replicatorProcessorUpdateRemoteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorUpdateRemoteDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateRemoteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorUpdateRemoteDestinationResult{}
  var err2 error
  if err2 = p.handler.UpdateRemoteDestination(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRemoteDestination: " + err2.Error())
    oprot.WriteMessageBegin("updateRemoteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateRemoteDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorDeleteDestination struct {
  handler Replicator
}

func (p *replicatorProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorDeleteDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorDeleteDestinationResult{}
  var err2 error
  if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: " + err2.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorDeleteRemoteDestination struct {
  handler Replicator
}

func (p *replicatorProcessorDeleteRemoteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorDeleteRemoteDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteRemoteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorDeleteRemoteDestinationResult{}
  var err2 error
  if err2 = p.handler.DeleteRemoteDestination(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteRemoteDestination: " + err2.Error())
    oprot.WriteMessageBegin("deleteRemoteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteRemoteDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateConsumerGroupUUID struct {
  handler Replicator
}

func (p *replicatorProcessorCreateConsumerGroupUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateConsumerGroupUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createConsumerGroupUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateConsumerGroupUUIDResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.CreateConsumerGroupUUID(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroupUUID: " + err2.Error())
    oprot.WriteMessageBegin("createConsumerGroupUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createConsumerGroupUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateRemoteConsumerGroupUUID struct {
  handler Replicator
}

func (p *replicatorProcessorCreateRemoteConsumerGroupUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateRemoteConsumerGroupUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createRemoteConsumerGroupUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateRemoteConsumerGroupUUIDResult{}
  var err2 error
  if err2 = p.handler.CreateRemoteConsumerGroupUUID(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRemoteConsumerGroupUUID: " + err2.Error())
    oprot.WriteMessageBegin("createRemoteConsumerGroupUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createRemoteConsumerGroupUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorUpdateConsumerGroup struct {
  handler Replicator
}

func (p *replicatorProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorUpdateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorUpdateConsumerGroupResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorUpdateRemoteConsumerGroup struct {
  handler Replicator
}

func (p *replicatorProcessorUpdateRemoteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorUpdateRemoteConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateRemoteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorUpdateRemoteConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.UpdateRemoteConsumerGroup(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRemoteConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateRemoteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateRemoteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorDeleteConsumerGroup struct {
  handler Replicator
}

func (p *replicatorProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorDeleteConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorDeleteConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorDeleteRemoteConsumerGroup struct {
  handler Replicator
}

func (p *replicatorProcessorDeleteRemoteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorDeleteRemoteConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteRemoteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorDeleteRemoteConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.DeleteRemoteConsumerGroup(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteRemoteConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("deleteRemoteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteRemoteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateExtent struct {
  handler Replicator
}

func (p *replicatorProcessorCreateExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateExtentResult{}
var retval *shared.CreateExtentResult_
  var err2 error
  if retval, err2 = p.handler.CreateExtent(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createExtent: " + err2.Error())
    oprot.WriteMessageBegin("createExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateRemoteExtent struct {
  handler Replicator
}

func (p *replicatorProcessorCreateRemoteExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateRemoteExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createRemoteExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateRemoteExtentResult{}
  var err2 error
  if err2 = p.handler.CreateRemoteExtent(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRemoteExtent: " + err2.Error())
    oprot.WriteMessageBegin("createRemoteExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createRemoteExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateConsumerGroupExtent struct {
  handler Replicator
}

func (p *replicatorProcessorCreateConsumerGroupExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateConsumerGroupExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateConsumerGroupExtentResult{}
  var err2 error
  if err2 = p.handler.CreateConsumerGroupExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroupExtent: " + err2.Error())
    oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createConsumerGroupExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorCreateRemoteConsumerGroupExtent struct {
  handler Replicator
}

func (p *replicatorProcessorCreateRemoteConsumerGroupExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorCreateRemoteConsumerGroupExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createRemoteConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorCreateRemoteConsumerGroupExtentResult{}
  var err2 error
  if err2 = p.handler.CreateRemoteConsumerGroupExtent(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRemoteConsumerGroupExtent: " + err2.Error())
    oprot.WriteMessageBegin("createRemoteConsumerGroupExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("createRemoteConsumerGroupExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorSetAckOffset struct {
  handler Replicator
}

func (p *replicatorProcessorSetAckOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorSetAckOffsetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setAckOffset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorSetAckOffsetResult{}
  var err2 error
  if err2 = p.handler.SetAckOffset(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setAckOffset: " + err2.Error())
    oprot.WriteMessageBegin("setAckOffset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setAckOffset", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorSetAckOffsetInRemote struct {
  handler Replicator
}

func (p *replicatorProcessorSetAckOffsetInRemote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorSetAckOffsetInRemoteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setAckOffsetInRemote", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorSetAckOffsetInRemoteResult{}
  var err2 error
  if err2 = p.handler.SetAckOffsetInRemote(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setAckOffsetInRemote: " + err2.Error())
    oprot.WriteMessageBegin("setAckOffsetInRemote", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setAckOffsetInRemote", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorUpdateConsumerGroupExtentStatus struct {
  handler Replicator
}

func (p *replicatorProcessorUpdateConsumerGroupExtentStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorUpdateConsumerGroupExtentStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorUpdateConsumerGroupExtentStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateConsumerGroupExtentStatus(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.NotExistsError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroupExtentStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateConsumerGroupExtentStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorUpdateRemoteConsumerGroupExtentStatus struct {
  handler Replicator
}

func (p *replicatorProcessorUpdateRemoteConsumerGroupExtentStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateRemoteConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorUpdateRemoteConsumerGroupExtentStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateRemoteConsumerGroupExtentStatus(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    case *shared.EntityNotExistsError:
  result.NotExistsError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRemoteConsumerGroupExtentStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateRemoteConsumerGroupExtentStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateRemoteConsumerGroupExtentStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorListDestinations struct {
  handler Replicator
}

func (p *replicatorProcessorListDestinations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorListDestinationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorListDestinationsResult{}
var retval *shared.ListDestinationsResult_
  var err2 error
  if retval, err2 = p.handler.ListDestinations(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinations: " + err2.Error())
    oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listDestinations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorListDestinationsByUUID struct {
  handler Replicator
}

func (p *replicatorProcessorListDestinationsByUUID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorListDestinationsByUUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listDestinationsByUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorListDestinationsByUUIDResult{}
var retval *shared.ListDestinationsResult_
  var err2 error
  if retval, err2 = p.handler.ListDestinationsByUUID(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinationsByUUID: " + err2.Error())
    oprot.WriteMessageBegin("listDestinationsByUUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listDestinationsByUUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorListExtentsStats struct {
  handler Replicator
}

func (p *replicatorProcessorListExtentsStats) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorListExtentsStatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorListExtentsStatsResult{}
var retval *shared.ListExtentsStatsResult_
  var err2 error
  if retval, err2 = p.handler.ListExtentsStats(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listExtentsStats: " + err2.Error())
    oprot.WriteMessageBegin("listExtentsStats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listExtentsStats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorReadDestination struct {
  handler Replicator
}

func (p *replicatorProcessorReadDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorReadDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorReadDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.ReadDestination(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestination: " + err2.Error())
    oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type replicatorProcessorListConsumerGroups struct {
  handler Replicator
}

func (p *replicatorProcessorListConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ReplicatorListConsumerGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ReplicatorListConsumerGroupsResult{}
var retval *shared.ListConsumerGroupResult_
  var err2 error
  if retval, err2 = p.handler.ListConsumerGroups(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConsumerGroups: " + err2.Error())
    oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listConsumerGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CreateRequest
type ReplicatorCreateDestinationUUIDArgs struct {
  CreateRequest *shared.CreateDestinationUUIDRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewReplicatorCreateDestinationUUIDArgs() *ReplicatorCreateDestinationUUIDArgs {
  return &ReplicatorCreateDestinationUUIDArgs{}
}

var ReplicatorCreateDestinationUUIDArgs_CreateRequest_DEFAULT *shared.CreateDestinationUUIDRequest
func (p *ReplicatorCreateDestinationUUIDArgs) GetCreateRequest() *shared.CreateDestinationUUIDRequest {
  if !p.IsSetCreateRequest() {
    return ReplicatorCreateDestinationUUIDArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ReplicatorCreateDestinationUUIDArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ReplicatorCreateDestinationUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateDestinationUUIDRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestinationUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ReplicatorCreateDestinationUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateDestinationUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type ReplicatorCreateDestinationUUIDResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateDestinationUUIDResult() *ReplicatorCreateDestinationUUIDResult {
  return &ReplicatorCreateDestinationUUIDResult{}
}

var ReplicatorCreateDestinationUUIDResult_Success_DEFAULT *shared.DestinationDescription
func (p *ReplicatorCreateDestinationUUIDResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return ReplicatorCreateDestinationUUIDResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorCreateDestinationUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ReplicatorCreateDestinationUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ReplicatorCreateDestinationUUIDResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ReplicatorCreateDestinationUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorCreateDestinationUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorCreateDestinationUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorCreateDestinationUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateDestinationUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateDestinationUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateDestinationUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorCreateDestinationUUIDResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ReplicatorCreateDestinationUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorCreateDestinationUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateDestinationUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestinationUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateDestinationUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateDestinationUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateDestinationUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateDestinationUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateDestinationUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateDestinationUUIDResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ReplicatorCreateRemoteDestinationUUIDArgs struct {
  CreateRequest *shared.CreateDestinationUUIDRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewReplicatorCreateRemoteDestinationUUIDArgs() *ReplicatorCreateRemoteDestinationUUIDArgs {
  return &ReplicatorCreateRemoteDestinationUUIDArgs{}
}

var ReplicatorCreateRemoteDestinationUUIDArgs_CreateRequest_DEFAULT *shared.CreateDestinationUUIDRequest
func (p *ReplicatorCreateRemoteDestinationUUIDArgs) GetCreateRequest() *shared.CreateDestinationUUIDRequest {
  if !p.IsSetCreateRequest() {
    return ReplicatorCreateRemoteDestinationUUIDArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ReplicatorCreateRemoteDestinationUUIDArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateDestinationUUIDRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteDestinationUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ReplicatorCreateRemoteDestinationUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteDestinationUUIDArgs(%+v)", *p)
}

// Attributes:
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type ReplicatorCreateRemoteDestinationUUIDResult struct {
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateRemoteDestinationUUIDResult() *ReplicatorCreateRemoteDestinationUUIDResult {
  return &ReplicatorCreateRemoteDestinationUUIDResult{}
}

var ReplicatorCreateRemoteDestinationUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ReplicatorCreateRemoteDestinationUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ReplicatorCreateRemoteDestinationUUIDResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ReplicatorCreateRemoteDestinationUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorCreateRemoteDestinationUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorCreateRemoteDestinationUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorCreateRemoteDestinationUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateRemoteDestinationUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateRemoteDestinationUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateRemoteDestinationUUIDResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteDestinationUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteDestinationUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteDestinationUUIDResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ReplicatorUpdateDestinationArgs struct {
  UpdateRequest *shared.UpdateDestinationRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewReplicatorUpdateDestinationArgs() *ReplicatorUpdateDestinationArgs {
  return &ReplicatorUpdateDestinationArgs{}
}

var ReplicatorUpdateDestinationArgs_UpdateRequest_DEFAULT *shared.UpdateDestinationRequest
func (p *ReplicatorUpdateDestinationArgs) GetUpdateRequest() *shared.UpdateDestinationRequest {
  if !p.IsSetUpdateRequest() {
    return ReplicatorUpdateDestinationArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *ReplicatorUpdateDestinationArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *ReplicatorUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateDestinationRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *ReplicatorUpdateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorUpdateDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorUpdateDestinationResult() *ReplicatorUpdateDestinationResult {
  return &ReplicatorUpdateDestinationResult{}
}

var ReplicatorUpdateDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *ReplicatorUpdateDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return ReplicatorUpdateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorUpdateDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorUpdateDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorUpdateDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorUpdateDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorUpdateDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorUpdateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorUpdateDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorUpdateDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorUpdateDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorUpdateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorUpdateDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorUpdateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorUpdateDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ReplicatorUpdateRemoteDestinationArgs struct {
  UpdateRequest *shared.UpdateDestinationRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewReplicatorUpdateRemoteDestinationArgs() *ReplicatorUpdateRemoteDestinationArgs {
  return &ReplicatorUpdateRemoteDestinationArgs{}
}

var ReplicatorUpdateRemoteDestinationArgs_UpdateRequest_DEFAULT *shared.UpdateDestinationRequest
func (p *ReplicatorUpdateRemoteDestinationArgs) GetUpdateRequest() *shared.UpdateDestinationRequest {
  if !p.IsSetUpdateRequest() {
    return ReplicatorUpdateRemoteDestinationArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *ReplicatorUpdateRemoteDestinationArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *ReplicatorUpdateRemoteDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateDestinationRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRemoteDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *ReplicatorUpdateRemoteDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateRemoteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorUpdateRemoteDestinationResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorUpdateRemoteDestinationResult() *ReplicatorUpdateRemoteDestinationResult {
  return &ReplicatorUpdateRemoteDestinationResult{}
}

var ReplicatorUpdateRemoteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorUpdateRemoteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorUpdateRemoteDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorUpdateRemoteDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorUpdateRemoteDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorUpdateRemoteDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorUpdateRemoteDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorUpdateRemoteDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorUpdateRemoteDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorUpdateRemoteDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorUpdateRemoteDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorUpdateRemoteDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorUpdateRemoteDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRemoteDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateRemoteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateRemoteDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ReplicatorDeleteDestinationArgs struct {
  DeleteRequest *shared.DeleteDestinationRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewReplicatorDeleteDestinationArgs() *ReplicatorDeleteDestinationArgs {
  return &ReplicatorDeleteDestinationArgs{}
}

var ReplicatorDeleteDestinationArgs_DeleteRequest_DEFAULT *shared.DeleteDestinationRequest
func (p *ReplicatorDeleteDestinationArgs) GetDeleteRequest() *shared.DeleteDestinationRequest {
  if !p.IsSetDeleteRequest() {
    return ReplicatorDeleteDestinationArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *ReplicatorDeleteDestinationArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *ReplicatorDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteDestinationRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *ReplicatorDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *ReplicatorDeleteDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorDeleteDestinationResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorDeleteDestinationResult() *ReplicatorDeleteDestinationResult {
  return &ReplicatorDeleteDestinationResult{}
}

var ReplicatorDeleteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorDeleteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorDeleteDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorDeleteDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorDeleteDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorDeleteDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorDeleteDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorDeleteDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorDeleteDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorDeleteDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorDeleteDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorDeleteDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorDeleteDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorDeleteDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ReplicatorDeleteRemoteDestinationArgs struct {
  DeleteRequest *shared.DeleteDestinationRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewReplicatorDeleteRemoteDestinationArgs() *ReplicatorDeleteRemoteDestinationArgs {
  return &ReplicatorDeleteRemoteDestinationArgs{}
}

var ReplicatorDeleteRemoteDestinationArgs_DeleteRequest_DEFAULT *shared.DeleteDestinationRequest
func (p *ReplicatorDeleteRemoteDestinationArgs) GetDeleteRequest() *shared.DeleteDestinationRequest {
  if !p.IsSetDeleteRequest() {
    return ReplicatorDeleteRemoteDestinationArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *ReplicatorDeleteRemoteDestinationArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *ReplicatorDeleteRemoteDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteDestinationRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteRemoteDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *ReplicatorDeleteRemoteDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteRemoteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorDeleteRemoteDestinationResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorDeleteRemoteDestinationResult() *ReplicatorDeleteRemoteDestinationResult {
  return &ReplicatorDeleteRemoteDestinationResult{}
}

var ReplicatorDeleteRemoteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorDeleteRemoteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorDeleteRemoteDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorDeleteRemoteDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorDeleteRemoteDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorDeleteRemoteDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorDeleteRemoteDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorDeleteRemoteDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorDeleteRemoteDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorDeleteRemoteDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorDeleteRemoteDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorDeleteRemoteDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorDeleteRemoteDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteRemoteDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteRemoteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteRemoteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteRemoteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteRemoteDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteRemoteDestinationResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ReplicatorCreateConsumerGroupUUIDArgs struct {
  CreateRequest *shared.CreateConsumerGroupUUIDRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewReplicatorCreateConsumerGroupUUIDArgs() *ReplicatorCreateConsumerGroupUUIDArgs {
  return &ReplicatorCreateConsumerGroupUUIDArgs{}
}

var ReplicatorCreateConsumerGroupUUIDArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupUUIDRequest
func (p *ReplicatorCreateConsumerGroupUUIDArgs) GetCreateRequest() *shared.CreateConsumerGroupUUIDRequest {
  if !p.IsSetCreateRequest() {
    return ReplicatorCreateConsumerGroupUUIDArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ReplicatorCreateConsumerGroupUUIDArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ReplicatorCreateConsumerGroupUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateConsumerGroupUUIDRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroupUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ReplicatorCreateConsumerGroupUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateConsumerGroupUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type ReplicatorCreateConsumerGroupUUIDResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateConsumerGroupUUIDResult() *ReplicatorCreateConsumerGroupUUIDResult {
  return &ReplicatorCreateConsumerGroupUUIDResult{}
}

var ReplicatorCreateConsumerGroupUUIDResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *ReplicatorCreateConsumerGroupUUIDResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return ReplicatorCreateConsumerGroupUUIDResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorCreateConsumerGroupUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ReplicatorCreateConsumerGroupUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ReplicatorCreateConsumerGroupUUIDResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ReplicatorCreateConsumerGroupUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorCreateConsumerGroupUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorCreateConsumerGroupUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorCreateConsumerGroupUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateConsumerGroupUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateConsumerGroupUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateConsumerGroupUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroupUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateConsumerGroupUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateConsumerGroupUUIDResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ReplicatorCreateRemoteConsumerGroupUUIDArgs struct {
  CreateRequest *shared.CreateConsumerGroupUUIDRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewReplicatorCreateRemoteConsumerGroupUUIDArgs() *ReplicatorCreateRemoteConsumerGroupUUIDArgs {
  return &ReplicatorCreateRemoteConsumerGroupUUIDArgs{}
}

var ReplicatorCreateRemoteConsumerGroupUUIDArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupUUIDRequest
func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs) GetCreateRequest() *shared.CreateConsumerGroupUUIDRequest {
  if !p.IsSetCreateRequest() {
    return ReplicatorCreateRemoteConsumerGroupUUIDArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateConsumerGroupUUIDRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteConsumerGroupUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteConsumerGroupUUIDArgs(%+v)", *p)
}

// Attributes:
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type ReplicatorCreateRemoteConsumerGroupUUIDResult struct {
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateRemoteConsumerGroupUUIDResult() *ReplicatorCreateRemoteConsumerGroupUUIDResult {
  return &ReplicatorCreateRemoteConsumerGroupUUIDResult{}
}

var ReplicatorCreateRemoteConsumerGroupUUIDResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ReplicatorCreateRemoteConsumerGroupUUIDResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ReplicatorCreateRemoteConsumerGroupUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorCreateRemoteConsumerGroupUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorCreateRemoteConsumerGroupUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateRemoteConsumerGroupUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteConsumerGroupUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteConsumerGroupUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteConsumerGroupUUIDResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ReplicatorUpdateConsumerGroupArgs struct {
  UpdateRequest *shared.UpdateConsumerGroupRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewReplicatorUpdateConsumerGroupArgs() *ReplicatorUpdateConsumerGroupArgs {
  return &ReplicatorUpdateConsumerGroupArgs{}
}

var ReplicatorUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *shared.UpdateConsumerGroupRequest
func (p *ReplicatorUpdateConsumerGroupArgs) GetUpdateRequest() *shared.UpdateConsumerGroupRequest {
  if !p.IsSetUpdateRequest() {
    return ReplicatorUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *ReplicatorUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *ReplicatorUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateConsumerGroupRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *ReplicatorUpdateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorUpdateConsumerGroupResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorUpdateConsumerGroupResult() *ReplicatorUpdateConsumerGroupResult {
  return &ReplicatorUpdateConsumerGroupResult{}
}

var ReplicatorUpdateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *ReplicatorUpdateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return ReplicatorUpdateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorUpdateConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorUpdateConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorUpdateConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorUpdateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorUpdateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorUpdateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorUpdateConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorUpdateConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorUpdateConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorUpdateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorUpdateConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorUpdateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorUpdateConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ReplicatorUpdateRemoteConsumerGroupArgs struct {
  UpdateRequest *shared.UpdateConsumerGroupRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewReplicatorUpdateRemoteConsumerGroupArgs() *ReplicatorUpdateRemoteConsumerGroupArgs {
  return &ReplicatorUpdateRemoteConsumerGroupArgs{}
}

var ReplicatorUpdateRemoteConsumerGroupArgs_UpdateRequest_DEFAULT *shared.UpdateConsumerGroupRequest
func (p *ReplicatorUpdateRemoteConsumerGroupArgs) GetUpdateRequest() *shared.UpdateConsumerGroupRequest {
  if !p.IsSetUpdateRequest() {
    return ReplicatorUpdateRemoteConsumerGroupArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *ReplicatorUpdateRemoteConsumerGroupArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateConsumerGroupRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRemoteConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateRemoteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorUpdateRemoteConsumerGroupResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorUpdateRemoteConsumerGroupResult() *ReplicatorUpdateRemoteConsumerGroupResult {
  return &ReplicatorUpdateRemoteConsumerGroupResult{}
}

var ReplicatorUpdateRemoteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorUpdateRemoteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorUpdateRemoteConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorUpdateRemoteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorUpdateRemoteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorUpdateRemoteConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorUpdateRemoteConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorUpdateRemoteConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorUpdateRemoteConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorUpdateRemoteConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRemoteConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateRemoteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ReplicatorDeleteConsumerGroupArgs struct {
  DeleteRequest *shared.DeleteConsumerGroupRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewReplicatorDeleteConsumerGroupArgs() *ReplicatorDeleteConsumerGroupArgs {
  return &ReplicatorDeleteConsumerGroupArgs{}
}

var ReplicatorDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *shared.DeleteConsumerGroupRequest
func (p *ReplicatorDeleteConsumerGroupArgs) GetDeleteRequest() *shared.DeleteConsumerGroupRequest {
  if !p.IsSetDeleteRequest() {
    return ReplicatorDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *ReplicatorDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *ReplicatorDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteConsumerGroupRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *ReplicatorDeleteConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorDeleteConsumerGroupResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorDeleteConsumerGroupResult() *ReplicatorDeleteConsumerGroupResult {
  return &ReplicatorDeleteConsumerGroupResult{}
}

var ReplicatorDeleteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorDeleteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorDeleteConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorDeleteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorDeleteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorDeleteConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorDeleteConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorDeleteConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorDeleteConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorDeleteConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorDeleteConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorDeleteConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ReplicatorDeleteRemoteConsumerGroupArgs struct {
  DeleteRequest *shared.DeleteConsumerGroupRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewReplicatorDeleteRemoteConsumerGroupArgs() *ReplicatorDeleteRemoteConsumerGroupArgs {
  return &ReplicatorDeleteRemoteConsumerGroupArgs{}
}

var ReplicatorDeleteRemoteConsumerGroupArgs_DeleteRequest_DEFAULT *shared.DeleteConsumerGroupRequest
func (p *ReplicatorDeleteRemoteConsumerGroupArgs) GetDeleteRequest() *shared.DeleteConsumerGroupRequest {
  if !p.IsSetDeleteRequest() {
    return ReplicatorDeleteRemoteConsumerGroupArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *ReplicatorDeleteRemoteConsumerGroupArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteConsumerGroupRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteRemoteConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *ReplicatorDeleteRemoteConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteRemoteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorDeleteRemoteConsumerGroupResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorDeleteRemoteConsumerGroupResult() *ReplicatorDeleteRemoteConsumerGroupResult {
  return &ReplicatorDeleteRemoteConsumerGroupResult{}
}

var ReplicatorDeleteRemoteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorDeleteRemoteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorDeleteRemoteConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorDeleteRemoteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorDeleteRemoteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorDeleteRemoteConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorDeleteRemoteConsumerGroupResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorDeleteRemoteConsumerGroupResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorDeleteRemoteConsumerGroupResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorDeleteRemoteConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteRemoteConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorDeleteRemoteConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorDeleteRemoteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ReplicatorCreateExtentArgs struct {
  CreateRequest *shared.CreateExtentRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewReplicatorCreateExtentArgs() *ReplicatorCreateExtentArgs {
  return &ReplicatorCreateExtentArgs{}
}

var ReplicatorCreateExtentArgs_CreateRequest_DEFAULT *shared.CreateExtentRequest
func (p *ReplicatorCreateExtentArgs) GetCreateRequest() *shared.CreateExtentRequest {
  if !p.IsSetCreateRequest() {
    return ReplicatorCreateExtentArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ReplicatorCreateExtentArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ReplicatorCreateExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateExtentRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ReplicatorCreateExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type ReplicatorCreateExtentResult struct {
  Success *shared.CreateExtentResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateExtentResult() *ReplicatorCreateExtentResult {
  return &ReplicatorCreateExtentResult{}
}

var ReplicatorCreateExtentResult_Success_DEFAULT *shared.CreateExtentResult_
func (p *ReplicatorCreateExtentResult) GetSuccess() *shared.CreateExtentResult_ {
  if !p.IsSetSuccess() {
    return ReplicatorCreateExtentResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorCreateExtentResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ReplicatorCreateExtentResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ReplicatorCreateExtentResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ReplicatorCreateExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorCreateExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorCreateExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorCreateExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateExtentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorCreateExtentResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ReplicatorCreateExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorCreateExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.CreateExtentResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateExtentResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ReplicatorCreateRemoteExtentArgs struct {
  CreateRequest *shared.CreateExtentRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewReplicatorCreateRemoteExtentArgs() *ReplicatorCreateRemoteExtentArgs {
  return &ReplicatorCreateRemoteExtentArgs{}
}

var ReplicatorCreateRemoteExtentArgs_CreateRequest_DEFAULT *shared.CreateExtentRequest
func (p *ReplicatorCreateRemoteExtentArgs) GetCreateRequest() *shared.CreateExtentRequest {
  if !p.IsSetCreateRequest() {
    return ReplicatorCreateRemoteExtentArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ReplicatorCreateRemoteExtentArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ReplicatorCreateRemoteExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateExtentRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ReplicatorCreateRemoteExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteExtentArgs(%+v)", *p)
}

// Attributes:
//  - EntityExistsError
//  - RequestError
//  - InternalServiceError
type ReplicatorCreateRemoteExtentResult struct {
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateRemoteExtentResult() *ReplicatorCreateRemoteExtentResult {
  return &ReplicatorCreateRemoteExtentResult{}
}

var ReplicatorCreateRemoteExtentResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ReplicatorCreateRemoteExtentResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ReplicatorCreateRemoteExtentResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ReplicatorCreateRemoteExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorCreateRemoteExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorCreateRemoteExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorCreateRemoteExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateRemoteExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateRemoteExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateRemoteExtentResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ReplicatorCreateRemoteExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorCreateRemoteExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateRemoteExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteExtentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorCreateConsumerGroupExtentArgs struct {
  Request *shared.CreateConsumerGroupExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorCreateConsumerGroupExtentArgs() *ReplicatorCreateConsumerGroupExtentArgs {
  return &ReplicatorCreateConsumerGroupExtentArgs{}
}

var ReplicatorCreateConsumerGroupExtentArgs_Request_DEFAULT *shared.CreateConsumerGroupExtentRequest
func (p *ReplicatorCreateConsumerGroupExtentArgs) GetRequest() *shared.CreateConsumerGroupExtentRequest {
  if !p.IsSetRequest() {
    return ReplicatorCreateConsumerGroupExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorCreateConsumerGroupExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorCreateConsumerGroupExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.CreateConsumerGroupExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroupExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateConsumerGroupExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorCreateConsumerGroupExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateConsumerGroupExtentArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type ReplicatorCreateConsumerGroupExtentResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateConsumerGroupExtentResult() *ReplicatorCreateConsumerGroupExtentResult {
  return &ReplicatorCreateConsumerGroupExtentResult{}
}

var ReplicatorCreateConsumerGroupExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateConsumerGroupExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateConsumerGroupExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateConsumerGroupExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateConsumerGroupExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateConsumerGroupExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroupExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateConsumerGroupExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateConsumerGroupExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateConsumerGroupExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorCreateRemoteConsumerGroupExtentArgs struct {
  Request *shared.CreateConsumerGroupExtentRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorCreateRemoteConsumerGroupExtentArgs() *ReplicatorCreateRemoteConsumerGroupExtentArgs {
  return &ReplicatorCreateRemoteConsumerGroupExtentArgs{}
}

var ReplicatorCreateRemoteConsumerGroupExtentArgs_Request_DEFAULT *shared.CreateConsumerGroupExtentRequest
func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs) GetRequest() *shared.CreateConsumerGroupExtentRequest {
  if !p.IsSetRequest() {
    return ReplicatorCreateRemoteConsumerGroupExtentArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.CreateConsumerGroupExtentRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteConsumerGroupExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteConsumerGroupExtentArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type ReplicatorCreateRemoteConsumerGroupExtentResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorCreateRemoteConsumerGroupExtentResult() *ReplicatorCreateRemoteConsumerGroupExtentResult {
  return &ReplicatorCreateRemoteConsumerGroupExtentResult{}
}

var ReplicatorCreateRemoteConsumerGroupExtentResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorCreateRemoteConsumerGroupExtentResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorCreateRemoteConsumerGroupExtentResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorCreateRemoteConsumerGroupExtentResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteConsumerGroupExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorCreateRemoteConsumerGroupExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorCreateRemoteConsumerGroupExtentResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorSetAckOffsetArgs struct {
  Request *shared.SetAckOffsetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorSetAckOffsetArgs() *ReplicatorSetAckOffsetArgs {
  return &ReplicatorSetAckOffsetArgs{}
}

var ReplicatorSetAckOffsetArgs_Request_DEFAULT *shared.SetAckOffsetRequest
func (p *ReplicatorSetAckOffsetArgs) GetRequest() *shared.SetAckOffsetRequest {
  if !p.IsSetRequest() {
    return ReplicatorSetAckOffsetArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorSetAckOffsetArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorSetAckOffsetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.SetAckOffsetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setAckOffset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorSetAckOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorSetAckOffsetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorSetAckOffsetArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type ReplicatorSetAckOffsetResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorSetAckOffsetResult() *ReplicatorSetAckOffsetResult {
  return &ReplicatorSetAckOffsetResult{}
}

var ReplicatorSetAckOffsetResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorSetAckOffsetResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorSetAckOffsetResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorSetAckOffsetResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorSetAckOffsetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setAckOffset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorSetAckOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorSetAckOffsetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorSetAckOffsetResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorSetAckOffsetInRemoteArgs struct {
  Request *shared.SetAckOffsetRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorSetAckOffsetInRemoteArgs() *ReplicatorSetAckOffsetInRemoteArgs {
  return &ReplicatorSetAckOffsetInRemoteArgs{}
}

var ReplicatorSetAckOffsetInRemoteArgs_Request_DEFAULT *shared.SetAckOffsetRequest
func (p *ReplicatorSetAckOffsetInRemoteArgs) GetRequest() *shared.SetAckOffsetRequest {
  if !p.IsSetRequest() {
    return ReplicatorSetAckOffsetInRemoteArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorSetAckOffsetInRemoteArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorSetAckOffsetInRemoteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetInRemoteArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.SetAckOffsetRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetInRemoteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setAckOffsetInRemote_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorSetAckOffsetInRemoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorSetAckOffsetInRemoteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorSetAckOffsetInRemoteArgs(%+v)", *p)
}

// Attributes:
//  - InternalServiceError
type ReplicatorSetAckOffsetInRemoteResult struct {
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,1" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorSetAckOffsetInRemoteResult() *ReplicatorSetAckOffsetInRemoteResult {
  return &ReplicatorSetAckOffsetInRemoteResult{}
}

var ReplicatorSetAckOffsetInRemoteResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorSetAckOffsetInRemoteResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorSetAckOffsetInRemoteResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorSetAckOffsetInRemoteResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorSetAckOffsetInRemoteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetInRemoteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorSetAckOffsetInRemoteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setAckOffsetInRemote_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorSetAckOffsetInRemoteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorSetAckOffsetInRemoteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorSetAckOffsetInRemoteResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorUpdateConsumerGroupExtentStatusArgs struct {
  Request *shared.UpdateConsumerGroupExtentStatusRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorUpdateConsumerGroupExtentStatusArgs() *ReplicatorUpdateConsumerGroupExtentStatusArgs {
  return &ReplicatorUpdateConsumerGroupExtentStatusArgs{}
}

var ReplicatorUpdateConsumerGroupExtentStatusArgs_Request_DEFAULT *shared.UpdateConsumerGroupExtentStatusRequest
func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs) GetRequest() *shared.UpdateConsumerGroupExtentStatusRequest {
  if !p.IsSetRequest() {
    return ReplicatorUpdateConsumerGroupExtentStatusArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.UpdateConsumerGroupExtentStatusRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroupExtentStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateConsumerGroupExtentStatusArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
//  - NotExistsError
type ReplicatorUpdateConsumerGroupExtentStatusResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,3" db:"notExistsError" json:"notExistsError,omitempty"`
}

func NewReplicatorUpdateConsumerGroupExtentStatusResult() *ReplicatorUpdateConsumerGroupExtentStatusResult {
  return &ReplicatorUpdateConsumerGroupExtentStatusResult{}
}

var ReplicatorUpdateConsumerGroupExtentStatusResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorUpdateConsumerGroupExtentStatusResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorUpdateConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorUpdateConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var ReplicatorUpdateConsumerGroupExtentStatusResult_NotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) GetNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetNotExistsError() {
    return ReplicatorUpdateConsumerGroupExtentStatusResult_NotExistsError_DEFAULT
  }
return p.NotExistsError
}
func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) IsSetNotExistsError() bool {
  return p.NotExistsError != nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult)  ReadField3(iprot thrift.TProtocol) error {
  p.NotExistsError = &shared.EntityNotExistsError{}
  if err := p.NotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
  }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroupExtentStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotExistsError() {
    if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notExistsError: ", p), err) }
    if err := p.NotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateConsumerGroupExtentStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateConsumerGroupExtentStatusResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs struct {
  Request *shared.UpdateConsumerGroupExtentStatusRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorUpdateRemoteConsumerGroupExtentStatusArgs() *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs {
  return &ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs{}
}

var ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs_Request_DEFAULT *shared.UpdateConsumerGroupExtentStatusRequest
func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs) GetRequest() *shared.UpdateConsumerGroupExtentStatusRequest {
  if !p.IsSetRequest() {
    return ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.UpdateConsumerGroupExtentStatusRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRemoteConsumerGroupExtentStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateRemoteConsumerGroupExtentStatusArgs(%+v)", *p)
}

// Attributes:
//  - RequestError
//  - InternalServiceError
//  - NotExistsError
type ReplicatorUpdateRemoteConsumerGroupExtentStatusResult struct {
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
  NotExistsError *shared.EntityNotExistsError `thrift:"notExistsError,3" db:"notExistsError" json:"notExistsError,omitempty"`
}

func NewReplicatorUpdateRemoteConsumerGroupExtentStatusResult() *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult {
  return &ReplicatorUpdateRemoteConsumerGroupExtentStatusResult{}
}

var ReplicatorUpdateRemoteConsumerGroupExtentStatusResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorUpdateRemoteConsumerGroupExtentStatusResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorUpdateRemoteConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorUpdateRemoteConsumerGroupExtentStatusResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
var ReplicatorUpdateRemoteConsumerGroupExtentStatusResult_NotExistsError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) GetNotExistsError() *shared.EntityNotExistsError {
  if !p.IsSetNotExistsError() {
    return ReplicatorUpdateRemoteConsumerGroupExtentStatusResult_NotExistsError_DEFAULT
  }
return p.NotExistsError
}
func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) IsSetNotExistsError() bool {
  return p.NotExistsError != nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult)  ReadField3(iprot thrift.TProtocol) error {
  p.NotExistsError = &shared.EntityNotExistsError{}
  if err := p.NotExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotExistsError), err)
  }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateRemoteConsumerGroupExtentStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotExistsError() {
    if err := oprot.WriteFieldBegin("notExistsError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notExistsError: ", p), err) }
    if err := p.NotExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notExistsError: ", p), err) }
  }
  return err
}

func (p *ReplicatorUpdateRemoteConsumerGroupExtentStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorUpdateRemoteConsumerGroupExtentStatusResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type ReplicatorListDestinationsArgs struct {
  ListRequest *shared.ListDestinationsRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewReplicatorListDestinationsArgs() *ReplicatorListDestinationsArgs {
  return &ReplicatorListDestinationsArgs{}
}

var ReplicatorListDestinationsArgs_ListRequest_DEFAULT *shared.ListDestinationsRequest
func (p *ReplicatorListDestinationsArgs) GetListRequest() *shared.ListDestinationsRequest {
  if !p.IsSetListRequest() {
    return ReplicatorListDestinationsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *ReplicatorListDestinationsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *ReplicatorListDestinationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListDestinationsRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListDestinationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *ReplicatorListDestinationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListDestinationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type ReplicatorListDestinationsResult struct {
  Success *shared.ListDestinationsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorListDestinationsResult() *ReplicatorListDestinationsResult {
  return &ReplicatorListDestinationsResult{}
}

var ReplicatorListDestinationsResult_Success_DEFAULT *shared.ListDestinationsResult_
func (p *ReplicatorListDestinationsResult) GetSuccess() *shared.ListDestinationsResult_ {
  if !p.IsSetSuccess() {
    return ReplicatorListDestinationsResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorListDestinationsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorListDestinationsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorListDestinationsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorListDestinationsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorListDestinationsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorListDestinationsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorListDestinationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorListDestinationsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorListDestinationsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorListDestinationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListDestinationsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListDestinationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorListDestinationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListDestinationsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListDestinationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListDestinationsResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type ReplicatorListDestinationsByUUIDArgs struct {
  ListRequest *shared.ListDestinationsByUUIDRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewReplicatorListDestinationsByUUIDArgs() *ReplicatorListDestinationsByUUIDArgs {
  return &ReplicatorListDestinationsByUUIDArgs{}
}

var ReplicatorListDestinationsByUUIDArgs_ListRequest_DEFAULT *shared.ListDestinationsByUUIDRequest
func (p *ReplicatorListDestinationsByUUIDArgs) GetListRequest() *shared.ListDestinationsByUUIDRequest {
  if !p.IsSetListRequest() {
    return ReplicatorListDestinationsByUUIDArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *ReplicatorListDestinationsByUUIDArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *ReplicatorListDestinationsByUUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListDestinationsByUUIDRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinationsByUUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *ReplicatorListDestinationsByUUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListDestinationsByUUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type ReplicatorListDestinationsByUUIDResult struct {
  Success *shared.ListDestinationsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorListDestinationsByUUIDResult() *ReplicatorListDestinationsByUUIDResult {
  return &ReplicatorListDestinationsByUUIDResult{}
}

var ReplicatorListDestinationsByUUIDResult_Success_DEFAULT *shared.ListDestinationsResult_
func (p *ReplicatorListDestinationsByUUIDResult) GetSuccess() *shared.ListDestinationsResult_ {
  if !p.IsSetSuccess() {
    return ReplicatorListDestinationsByUUIDResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorListDestinationsByUUIDResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorListDestinationsByUUIDResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorListDestinationsByUUIDResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorListDestinationsByUUIDResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorListDestinationsByUUIDResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorListDestinationsByUUIDResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorListDestinationsByUUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorListDestinationsByUUIDResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorListDestinationsByUUIDResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorListDestinationsByUUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListDestinationsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinationsByUUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListDestinationsByUUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorListDestinationsByUUIDResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListDestinationsByUUIDResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListDestinationsByUUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListDestinationsByUUIDResult(%+v)", *p)
}

// Attributes:
//  - Request
type ReplicatorListExtentsStatsArgs struct {
  Request *shared.ListExtentsStatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewReplicatorListExtentsStatsArgs() *ReplicatorListExtentsStatsArgs {
  return &ReplicatorListExtentsStatsArgs{}
}

var ReplicatorListExtentsStatsArgs_Request_DEFAULT *shared.ListExtentsStatsRequest
func (p *ReplicatorListExtentsStatsArgs) GetRequest() *shared.ListExtentsStatsRequest {
  if !p.IsSetRequest() {
    return ReplicatorListExtentsStatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *ReplicatorListExtentsStatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *ReplicatorListExtentsStatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListExtentsStatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &shared.ListExtentsStatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *ReplicatorListExtentsStatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listExtentsStats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListExtentsStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *ReplicatorListExtentsStatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListExtentsStatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalServiceError
type ReplicatorListExtentsStatsResult struct {
  Success *shared.ListExtentsStatsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorListExtentsStatsResult() *ReplicatorListExtentsStatsResult {
  return &ReplicatorListExtentsStatsResult{}
}

var ReplicatorListExtentsStatsResult_Success_DEFAULT *shared.ListExtentsStatsResult_
func (p *ReplicatorListExtentsStatsResult) GetSuccess() *shared.ListExtentsStatsResult_ {
  if !p.IsSetSuccess() {
    return ReplicatorListExtentsStatsResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorListExtentsStatsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorListExtentsStatsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorListExtentsStatsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorListExtentsStatsResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorListExtentsStatsResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorListExtentsStatsResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorListExtentsStatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorListExtentsStatsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorListExtentsStatsResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorListExtentsStatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListExtentsStatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListExtentsStatsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorListExtentsStatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorListExtentsStatsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorListExtentsStatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listExtentsStats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListExtentsStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorListExtentsStatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListExtentsStatsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListExtentsStatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListExtentsStatsResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type ReplicatorReadDestinationArgs struct {
  GetRequest *shared.ReadDestinationRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewReplicatorReadDestinationArgs() *ReplicatorReadDestinationArgs {
  return &ReplicatorReadDestinationArgs{}
}

var ReplicatorReadDestinationArgs_GetRequest_DEFAULT *shared.ReadDestinationRequest
func (p *ReplicatorReadDestinationArgs) GetGetRequest() *shared.ReadDestinationRequest {
  if !p.IsSetGetRequest() {
    return ReplicatorReadDestinationArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *ReplicatorReadDestinationArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *ReplicatorReadDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &shared.ReadDestinationRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorReadDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *ReplicatorReadDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorReadDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalServiceError
type ReplicatorReadDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,3" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewReplicatorReadDestinationResult() *ReplicatorReadDestinationResult {
  return &ReplicatorReadDestinationResult{}
}

var ReplicatorReadDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *ReplicatorReadDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return ReplicatorReadDestinationResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorReadDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ReplicatorReadDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ReplicatorReadDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ReplicatorReadDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorReadDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorReadDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorReadDestinationResult_InternalServiceError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorReadDestinationResult) GetInternalServiceError() *shared.InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return ReplicatorReadDestinationResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *ReplicatorReadDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorReadDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ReplicatorReadDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorReadDestinationResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *ReplicatorReadDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalServiceError = &shared.InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *ReplicatorReadDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorReadDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorReadDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ReplicatorReadDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorReadDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalServiceError: ", p), err) }
  }
  return err
}

func (p *ReplicatorReadDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorReadDestinationResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type ReplicatorListConsumerGroupsArgs struct {
  ListRequest *shared.ListConsumerGroupRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewReplicatorListConsumerGroupsArgs() *ReplicatorListConsumerGroupsArgs {
  return &ReplicatorListConsumerGroupsArgs{}
}

var ReplicatorListConsumerGroupsArgs_ListRequest_DEFAULT *shared.ListConsumerGroupRequest
func (p *ReplicatorListConsumerGroupsArgs) GetListRequest() *shared.ListConsumerGroupRequest {
  if !p.IsSetListRequest() {
    return ReplicatorListConsumerGroupsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *ReplicatorListConsumerGroupsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *ReplicatorListConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListConsumerGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &shared.ListConsumerGroupRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *ReplicatorListConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listConsumerGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *ReplicatorListConsumerGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type ReplicatorListConsumerGroupsResult struct {
  Success *shared.ListConsumerGroupResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewReplicatorListConsumerGroupsResult() *ReplicatorListConsumerGroupsResult {
  return &ReplicatorListConsumerGroupsResult{}
}

var ReplicatorListConsumerGroupsResult_Success_DEFAULT *shared.ListConsumerGroupResult_
func (p *ReplicatorListConsumerGroupsResult) GetSuccess() *shared.ListConsumerGroupResult_ {
  if !p.IsSetSuccess() {
    return ReplicatorListConsumerGroupsResult_Success_DEFAULT
  }
return p.Success
}
var ReplicatorListConsumerGroupsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ReplicatorListConsumerGroupsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ReplicatorListConsumerGroupsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ReplicatorListConsumerGroupsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ReplicatorListConsumerGroupsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ReplicatorListConsumerGroupsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ReplicatorListConsumerGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ReplicatorListConsumerGroupsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ReplicatorListConsumerGroupsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ReplicatorListConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicatorListConsumerGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ListConsumerGroupResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ReplicatorListConsumerGroupsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ReplicatorListConsumerGroupsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ReplicatorListConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listConsumerGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicatorListConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ReplicatorListConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListConsumerGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *ReplicatorListConsumerGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicatorListConsumerGroupsResult(%+v)", *p)
}


