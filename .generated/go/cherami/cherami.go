// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cherami

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Protocol int64
const (
  Protocol_TCHANNEL Protocol = 0
  Protocol_WS Protocol = 1
  Protocol_WSS Protocol = 2
)

func (p Protocol) String() string {
  switch p {
  case Protocol_TCHANNEL: return "TCHANNEL"
  case Protocol_WS: return "WS"
  case Protocol_WSS: return "WSS"
  }
  return "<UNSET>"
}

func ProtocolFromString(s string) (Protocol, error) {
  switch s {
  case "TCHANNEL": return Protocol_TCHANNEL, nil 
  case "WS": return Protocol_WS, nil 
  case "WSS": return Protocol_WSS, nil 
  }
  return Protocol(0), fmt.Errorf("not a valid Protocol string")
}


func ProtocolPtr(v Protocol) *Protocol { return &v }

func (p Protocol) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Protocol) UnmarshalText(text []byte) error {
q, err := ProtocolFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Protocol) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Protocol(v)
return nil
}

func (p * Protocol) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DestinationStatus int64
const (
  DestinationStatus_ENABLED DestinationStatus = 0
  DestinationStatus_DISABLED DestinationStatus = 1
  DestinationStatus_SENDONLY DestinationStatus = 2
  DestinationStatus_RECEIVEONLY DestinationStatus = 3
)

func (p DestinationStatus) String() string {
  switch p {
  case DestinationStatus_ENABLED: return "ENABLED"
  case DestinationStatus_DISABLED: return "DISABLED"
  case DestinationStatus_SENDONLY: return "SENDONLY"
  case DestinationStatus_RECEIVEONLY: return "RECEIVEONLY"
  }
  return "<UNSET>"
}

func DestinationStatusFromString(s string) (DestinationStatus, error) {
  switch s {
  case "ENABLED": return DestinationStatus_ENABLED, nil 
  case "DISABLED": return DestinationStatus_DISABLED, nil 
  case "SENDONLY": return DestinationStatus_SENDONLY, nil 
  case "RECEIVEONLY": return DestinationStatus_RECEIVEONLY, nil 
  }
  return DestinationStatus(0), fmt.Errorf("not a valid DestinationStatus string")
}


func DestinationStatusPtr(v DestinationStatus) *DestinationStatus { return &v }

func (p DestinationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DestinationStatus) UnmarshalText(text []byte) error {
q, err := DestinationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DestinationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DestinationStatus(v)
return nil
}

func (p * DestinationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ConsumerGroupStatus int64
const (
  ConsumerGroupStatus_ENABLED ConsumerGroupStatus = 0
  ConsumerGroupStatus_DISABLED ConsumerGroupStatus = 1
)

func (p ConsumerGroupStatus) String() string {
  switch p {
  case ConsumerGroupStatus_ENABLED: return "ENABLED"
  case ConsumerGroupStatus_DISABLED: return "DISABLED"
  }
  return "<UNSET>"
}

func ConsumerGroupStatusFromString(s string) (ConsumerGroupStatus, error) {
  switch s {
  case "ENABLED": return ConsumerGroupStatus_ENABLED, nil 
  case "DISABLED": return ConsumerGroupStatus_DISABLED, nil 
  }
  return ConsumerGroupStatus(0), fmt.Errorf("not a valid ConsumerGroupStatus string")
}


func ConsumerGroupStatusPtr(v ConsumerGroupStatus) *ConsumerGroupStatus { return &v }

func (p ConsumerGroupStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConsumerGroupStatus) UnmarshalText(text []byte) error {
q, err := ConsumerGroupStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConsumerGroupStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConsumerGroupStatus(v)
return nil
}

func (p * ConsumerGroupStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// * We support 2 type of Destinations, backed up by their own BStore implementations.
// * DestinationType needs to be specified at the time of creation and is immutable.
//*
type DestinationType int64
const (
  DestinationType_PLAIN DestinationType = 0
  DestinationType_TIMER DestinationType = 1
  DestinationType_LOG DestinationType = 2
  DestinationType_KAFKA DestinationType = 3
)

func (p DestinationType) String() string {
  switch p {
  case DestinationType_PLAIN: return "PLAIN"
  case DestinationType_TIMER: return "TIMER"
  case DestinationType_LOG: return "LOG"
  case DestinationType_KAFKA: return "KAFKA"
  }
  return "<UNSET>"
}

func DestinationTypeFromString(s string) (DestinationType, error) {
  switch s {
  case "PLAIN": return DestinationType_PLAIN, nil 
  case "TIMER": return DestinationType_TIMER, nil 
  case "LOG": return DestinationType_LOG, nil 
  case "KAFKA": return DestinationType_KAFKA, nil 
  }
  return DestinationType(0), fmt.Errorf("not a valid DestinationType string")
}


func DestinationTypePtr(v DestinationType) *DestinationType { return &v }

func (p DestinationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DestinationType) UnmarshalText(text []byte) error {
q, err := DestinationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DestinationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DestinationType(v)
return nil
}

func (p * DestinationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ConsumerGroupType int64
const (
  ConsumerGroupType_COMPETING ConsumerGroupType = 0
  ConsumerGroupType_STREAMING ConsumerGroupType = 1
)

func (p ConsumerGroupType) String() string {
  switch p {
  case ConsumerGroupType_COMPETING: return "COMPETING"
  case ConsumerGroupType_STREAMING: return "STREAMING"
  }
  return "<UNSET>"
}

func ConsumerGroupTypeFromString(s string) (ConsumerGroupType, error) {
  switch s {
  case "COMPETING": return ConsumerGroupType_COMPETING, nil 
  case "STREAMING": return ConsumerGroupType_STREAMING, nil 
  }
  return ConsumerGroupType(0), fmt.Errorf("not a valid ConsumerGroupType string")
}


func ConsumerGroupTypePtr(v ConsumerGroupType) *ConsumerGroupType { return &v }

func (p ConsumerGroupType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConsumerGroupType) UnmarshalText(text []byte) error {
q, err := ConsumerGroupTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConsumerGroupType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConsumerGroupType(v)
return nil
}

func (p * ConsumerGroupType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChecksumOption int64
const (
  ChecksumOption_CRC32IEEE ChecksumOption = 0
  ChecksumOption_MD5 ChecksumOption = 1
)

func (p ChecksumOption) String() string {
  switch p {
  case ChecksumOption_CRC32IEEE: return "CRC32IEEE"
  case ChecksumOption_MD5: return "MD5"
  }
  return "<UNSET>"
}

func ChecksumOptionFromString(s string) (ChecksumOption, error) {
  switch s {
  case "CRC32IEEE": return ChecksumOption_CRC32IEEE, nil 
  case "MD5": return ChecksumOption_MD5, nil 
  }
  return ChecksumOption(0), fmt.Errorf("not a valid ChecksumOption string")
}


func ChecksumOptionPtr(v ChecksumOption) *ChecksumOption { return &v }

func (p ChecksumOption) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChecksumOption) UnmarshalText(text []byte) error {
q, err := ChecksumOptionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChecksumOption) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChecksumOption(v)
return nil
}

func (p * ChecksumOption) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Status int64
const (
  Status_OK Status = 0
  Status_FAILED Status = 1
  Status_TIMEDOUT Status = 2
  Status_THROTTLED Status = 3
)

func (p Status) String() string {
  switch p {
  case Status_OK: return "OK"
  case Status_FAILED: return "FAILED"
  case Status_TIMEDOUT: return "TIMEDOUT"
  case Status_THROTTLED: return "THROTTLED"
  }
  return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
  switch s {
  case "OK": return Status_OK, nil 
  case "FAILED": return Status_FAILED, nil 
  case "TIMEDOUT": return Status_TIMEDOUT, nil 
  case "THROTTLED": return Status_THROTTLED, nil 
  }
  return Status(0), fmt.Errorf("not a valid Status string")
}


func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
q, err := StatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Status) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Status(v)
return nil
}

func (p * Status) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type InputHostCommandType int64
const (
  InputHostCommandType_ACK InputHostCommandType = 0
  InputHostCommandType_RECONFIGURE InputHostCommandType = 1
  InputHostCommandType_DRAIN InputHostCommandType = 2
)

func (p InputHostCommandType) String() string {
  switch p {
  case InputHostCommandType_ACK: return "ACK"
  case InputHostCommandType_RECONFIGURE: return "RECONFIGURE"
  case InputHostCommandType_DRAIN: return "DRAIN"
  }
  return "<UNSET>"
}

func InputHostCommandTypeFromString(s string) (InputHostCommandType, error) {
  switch s {
  case "ACK": return InputHostCommandType_ACK, nil 
  case "RECONFIGURE": return InputHostCommandType_RECONFIGURE, nil 
  case "DRAIN": return InputHostCommandType_DRAIN, nil 
  }
  return InputHostCommandType(0), fmt.Errorf("not a valid InputHostCommandType string")
}


func InputHostCommandTypePtr(v InputHostCommandType) *InputHostCommandType { return &v }

func (p InputHostCommandType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *InputHostCommandType) UnmarshalText(text []byte) error {
q, err := InputHostCommandTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *InputHostCommandType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = InputHostCommandType(v)
return nil
}

func (p * InputHostCommandType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OutputHostCommandType int64
const (
  OutputHostCommandType_MESSAGE OutputHostCommandType = 0
  OutputHostCommandType_RECONFIGURE OutputHostCommandType = 1
  OutputHostCommandType_END_OF_STREAM OutputHostCommandType = 2
)

func (p OutputHostCommandType) String() string {
  switch p {
  case OutputHostCommandType_MESSAGE: return "MESSAGE"
  case OutputHostCommandType_RECONFIGURE: return "RECONFIGURE"
  case OutputHostCommandType_END_OF_STREAM: return "END_OF_STREAM"
  }
  return "<UNSET>"
}

func OutputHostCommandTypeFromString(s string) (OutputHostCommandType, error) {
  switch s {
  case "MESSAGE": return OutputHostCommandType_MESSAGE, nil 
  case "RECONFIGURE": return OutputHostCommandType_RECONFIGURE, nil 
  case "END_OF_STREAM": return OutputHostCommandType_END_OF_STREAM, nil 
  }
  return OutputHostCommandType(0), fmt.Errorf("not a valid OutputHostCommandType string")
}


func OutputHostCommandTypePtr(v OutputHostCommandType) *OutputHostCommandType { return &v }

func (p OutputHostCommandType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OutputHostCommandType) UnmarshalText(text []byte) error {
q, err := OutputHostCommandTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OutputHostCommandType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OutputHostCommandType(v)
return nil
}

func (p * OutputHostCommandType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Message
type EntityNotExistsError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewEntityNotExistsError() *EntityNotExistsError {
  return &EntityNotExistsError{}
}


func (p *EntityNotExistsError) GetMessage() string {
  return p.Message
}
func (p *EntityNotExistsError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *EntityNotExistsError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EntityNotExistsError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityNotExistsError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntityNotExistsError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EntityNotExistsError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityNotExistsError(%+v)", *p)
}

func (p *EntityNotExistsError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type EntityAlreadyExistsError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewEntityAlreadyExistsError() *EntityAlreadyExistsError {
  return &EntityAlreadyExistsError{}
}


func (p *EntityAlreadyExistsError) GetMessage() string {
  return p.Message
}
func (p *EntityAlreadyExistsError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *EntityAlreadyExistsError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EntityAlreadyExistsError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityAlreadyExistsError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntityAlreadyExistsError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EntityAlreadyExistsError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityAlreadyExistsError(%+v)", *p)
}

func (p *EntityAlreadyExistsError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type EntityDisabledError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewEntityDisabledError() *EntityDisabledError {
  return &EntityDisabledError{}
}


func (p *EntityDisabledError) GetMessage() string {
  return p.Message
}
func (p *EntityDisabledError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *EntityDisabledError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EntityDisabledError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityDisabledError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntityDisabledError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EntityDisabledError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityDisabledError(%+v)", *p)
}

func (p *EntityDisabledError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type BadRequestError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewBadRequestError() *BadRequestError {
  return &BadRequestError{}
}


func (p *BadRequestError) GetMessage() string {
  return p.Message
}
func (p *BadRequestError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *BadRequestError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *BadRequestError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BadRequestError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BadRequestError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *BadRequestError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BadRequestError(%+v)", *p)
}

func (p *BadRequestError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidAddressError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewInvalidAddressError() *InvalidAddressError {
  return &InvalidAddressError{}
}


func (p *InvalidAddressError) GetMessage() string {
  return p.Message
}
func (p *InvalidAddressError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *InvalidAddressError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidAddressError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidAddressError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidAddressError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidAddressError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidAddressError(%+v)", *p)
}

func (p *InvalidAddressError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InternalServiceError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewInternalServiceError() *InternalServiceError {
  return &InternalServiceError{}
}


func (p *InternalServiceError) GetMessage() string {
  return p.Message
}
func (p *InternalServiceError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *InternalServiceError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InternalServiceError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InternalServiceError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalServiceError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InternalServiceError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalServiceError(%+v)", *p)
}

func (p *InternalServiceError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type TimeoutError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewTimeoutError() *TimeoutError {
  return &TimeoutError{}
}


func (p *TimeoutError) GetMessage() string {
  return p.Message
}
func (p *TimeoutError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *TimeoutError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TimeoutError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TimeoutError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimeoutError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TimeoutError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimeoutError(%+v)", *p)
}

func (p *TimeoutError) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type QueueCacheMissError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewQueueCacheMissError() *QueueCacheMissError {
  return &QueueCacheMissError{}
}


func (p *QueueCacheMissError) GetMessage() string {
  return p.Message
}
func (p *QueueCacheMissError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *QueueCacheMissError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *QueueCacheMissError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueueCacheMissError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueueCacheMissError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *QueueCacheMissError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueueCacheMissError(%+v)", *p)
}

func (p *QueueCacheMissError) Error() string {
  return p.String()
}

//  * This describes the entity and associated configuration, used by client application to send messages.
//  *
//  * @param path.  Path which uniquely identifies the destination.
//  * @param type.  Type of destination (PLAIN, TIMER).
//  * @param status.  Status of destination.
//  * @param consumedMessagesRetention.  Time in seconds to keep consumed messages before deleting from storage.
//  * @param unconsumedMessagesRetention.  Time in seconds to keep messages that may not have been consumed, before deleting from storage.
//  * @param createdAt.  Time when destination was created.
// *
// 
// Attributes:
//  - Path
//  - Type
//  - Status
//  - ConsumedMessagesRetention
//  - UnconsumedMessagesRetention
//  - DestinationUUID
//  - OwnerEmail
//  - ChecksumOption
//  - IsMultiZone
//  - ZoneConfigs
//  - SchemaInfo
//  - KafkaCluster
//  - KafkaTopics
type DestinationDescription struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
  Type *DestinationType `thrift:"type,2" db:"type" json:"type,omitempty"`
  Status *DestinationStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  ConsumedMessagesRetention *int32 `thrift:"consumedMessagesRetention,4" db:"consumedMessagesRetention" json:"consumedMessagesRetention,omitempty"`
  UnconsumedMessagesRetention *int32 `thrift:"unconsumedMessagesRetention,5" db:"unconsumedMessagesRetention" json:"unconsumedMessagesRetention,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,6" db:"destinationUUID" json:"destinationUUID,omitempty"`
  OwnerEmail *string `thrift:"ownerEmail,7" db:"ownerEmail" json:"ownerEmail,omitempty"`
  ChecksumOption ChecksumOption `thrift:"checksumOption,8" db:"checksumOption" json:"checksumOption,omitempty"`
  // unused field # 9
  IsMultiZone *bool `thrift:"isMultiZone,10" db:"isMultiZone" json:"isMultiZone,omitempty"`
  ZoneConfigs *DestinationZoneConfigs `thrift:"zoneConfigs,11" db:"zoneConfigs" json:"zoneConfigs,omitempty"`
  // unused fields # 12 to 19
  SchemaInfo *SchemaInfo `thrift:"schemaInfo,20" db:"schemaInfo" json:"schemaInfo,omitempty"`
  // unused fields # 21 to 39
  KafkaCluster *string `thrift:"kafkaCluster,40" db:"kafkaCluster" json:"kafkaCluster,omitempty"`
  KafkaTopics []string `thrift:"kafkaTopics,41" db:"kafkaTopics" json:"kafkaTopics,omitempty"`
}

func NewDestinationDescription() *DestinationDescription {
  return &DestinationDescription{
ChecksumOption: 0,
}
}

var DestinationDescription_Path_DEFAULT string
func (p *DestinationDescription) GetPath() string {
  if !p.IsSetPath() {
    return DestinationDescription_Path_DEFAULT
  }
return *p.Path
}
var DestinationDescription_Type_DEFAULT DestinationType
func (p *DestinationDescription) GetType() DestinationType {
  if !p.IsSetType() {
    return DestinationDescription_Type_DEFAULT
  }
return *p.Type
}
var DestinationDescription_Status_DEFAULT DestinationStatus
func (p *DestinationDescription) GetStatus() DestinationStatus {
  if !p.IsSetStatus() {
    return DestinationDescription_Status_DEFAULT
  }
return *p.Status
}
var DestinationDescription_ConsumedMessagesRetention_DEFAULT int32
func (p *DestinationDescription) GetConsumedMessagesRetention() int32 {
  if !p.IsSetConsumedMessagesRetention() {
    return DestinationDescription_ConsumedMessagesRetention_DEFAULT
  }
return *p.ConsumedMessagesRetention
}
var DestinationDescription_UnconsumedMessagesRetention_DEFAULT int32
func (p *DestinationDescription) GetUnconsumedMessagesRetention() int32 {
  if !p.IsSetUnconsumedMessagesRetention() {
    return DestinationDescription_UnconsumedMessagesRetention_DEFAULT
  }
return *p.UnconsumedMessagesRetention
}
var DestinationDescription_DestinationUUID_DEFAULT string
func (p *DestinationDescription) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return DestinationDescription_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var DestinationDescription_OwnerEmail_DEFAULT string
func (p *DestinationDescription) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return DestinationDescription_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
var DestinationDescription_ChecksumOption_DEFAULT ChecksumOption = 0

func (p *DestinationDescription) GetChecksumOption() ChecksumOption {
  return p.ChecksumOption
}
var DestinationDescription_IsMultiZone_DEFAULT bool
func (p *DestinationDescription) GetIsMultiZone() bool {
  if !p.IsSetIsMultiZone() {
    return DestinationDescription_IsMultiZone_DEFAULT
  }
return *p.IsMultiZone
}
var DestinationDescription_ZoneConfigs_DEFAULT *DestinationZoneConfigs
func (p *DestinationDescription) GetZoneConfigs() *DestinationZoneConfigs {
  if !p.IsSetZoneConfigs() {
    return DestinationDescription_ZoneConfigs_DEFAULT
  }
return p.ZoneConfigs
}
var DestinationDescription_SchemaInfo_DEFAULT *SchemaInfo
func (p *DestinationDescription) GetSchemaInfo() *SchemaInfo {
  if !p.IsSetSchemaInfo() {
    return DestinationDescription_SchemaInfo_DEFAULT
  }
return p.SchemaInfo
}
var DestinationDescription_KafkaCluster_DEFAULT string
func (p *DestinationDescription) GetKafkaCluster() string {
  if !p.IsSetKafkaCluster() {
    return DestinationDescription_KafkaCluster_DEFAULT
  }
return *p.KafkaCluster
}
var DestinationDescription_KafkaTopics_DEFAULT []string

func (p *DestinationDescription) GetKafkaTopics() []string {
  return p.KafkaTopics
}
func (p *DestinationDescription) IsSetPath() bool {
  return p.Path != nil
}

func (p *DestinationDescription) IsSetType() bool {
  return p.Type != nil
}

func (p *DestinationDescription) IsSetStatus() bool {
  return p.Status != nil
}

func (p *DestinationDescription) IsSetConsumedMessagesRetention() bool {
  return p.ConsumedMessagesRetention != nil
}

func (p *DestinationDescription) IsSetUnconsumedMessagesRetention() bool {
  return p.UnconsumedMessagesRetention != nil
}

func (p *DestinationDescription) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *DestinationDescription) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *DestinationDescription) IsSetChecksumOption() bool {
  return p.ChecksumOption != DestinationDescription_ChecksumOption_DEFAULT
}

func (p *DestinationDescription) IsSetIsMultiZone() bool {
  return p.IsMultiZone != nil
}

func (p *DestinationDescription) IsSetZoneConfigs() bool {
  return p.ZoneConfigs != nil
}

func (p *DestinationDescription) IsSetSchemaInfo() bool {
  return p.SchemaInfo != nil
}

func (p *DestinationDescription) IsSetKafkaCluster() bool {
  return p.KafkaCluster != nil
}

func (p *DestinationDescription) IsSetKafkaTopics() bool {
  return p.KafkaTopics != nil
}

func (p *DestinationDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 41:
      if err := p.ReadField41(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := DestinationType(v)
  p.Type = &temp
}
  return nil
}

func (p *DestinationDescription)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := DestinationStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *DestinationDescription)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConsumedMessagesRetention = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UnconsumedMessagesRetention = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := ChecksumOption(v)
  p.ChecksumOption = temp
}
  return nil
}

func (p *DestinationDescription)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.IsMultiZone = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField11(iprot thrift.TProtocol) error {
  p.ZoneConfigs = &DestinationZoneConfigs{}
  if err := p.ZoneConfigs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
  }
  return nil
}

func (p *DestinationDescription)  ReadField20(iprot thrift.TProtocol) error {
  p.SchemaInfo = &SchemaInfo{}
  if err := p.SchemaInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
  }
  return nil
}

func (p *DestinationDescription)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.KafkaCluster = &v
}
  return nil
}

func (p *DestinationDescription)  ReadField41(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.KafkaTopics =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.KafkaTopics = append(p.KafkaTopics, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DestinationDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumedMessagesRetention() {
    if err := oprot.WriteFieldBegin("consumedMessagesRetention", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumedMessagesRetention: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ConsumedMessagesRetention)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumedMessagesRetention (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumedMessagesRetention: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnconsumedMessagesRetention() {
    if err := oprot.WriteFieldBegin("unconsumedMessagesRetention", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unconsumedMessagesRetention: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UnconsumedMessagesRetention)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unconsumedMessagesRetention (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unconsumedMessagesRetention: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:destinationUUID: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerEmail: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetChecksumOption() {
    if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:checksumOption: ", p), err) }
    if err := oprot.WriteI32(int32(p.ChecksumOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.checksumOption (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:checksumOption: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsMultiZone() {
    if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isMultiZone: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isMultiZone: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetZoneConfigs() {
    if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zoneConfigs: ", p), err) }
    if err := p.ZoneConfigs.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zoneConfigs: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaInfo() {
    if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:schemaInfo: ", p), err) }
    if err := p.SchemaInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:schemaInfo: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetKafkaCluster() {
    if err := oprot.WriteFieldBegin("kafkaCluster", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:kafkaCluster: ", p), err) }
    if err := oprot.WriteString(string(*p.KafkaCluster)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.kafkaCluster (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:kafkaCluster: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) writeField41(oprot thrift.TProtocol) (err error) {
  if p.IsSetKafkaTopics() {
    if err := oprot.WriteFieldBegin("kafkaTopics", thrift.LIST, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:kafkaTopics: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.KafkaTopics)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.KafkaTopics {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:kafkaTopics: ", p), err) }
  }
  return err
}

func (p *DestinationDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationDescription(%+v)", *p)
}

// Attributes:
//  - Type
//  - Version
//  - Data
//  - Source
//  - CreatedTimeUtc
type SchemaInfo struct {
  Type *string `thrift:"type,1" db:"type" json:"type,omitempty"`
  Version *int32 `thrift:"version,2" db:"version" json:"version,omitempty"`
  Data []byte `thrift:"data,3" db:"data" json:"data,omitempty"`
  Source *string `thrift:"source,4" db:"source" json:"source,omitempty"`
  CreatedTimeUtc *int64 `thrift:"createdTimeUtc,5" db:"createdTimeUtc" json:"createdTimeUtc,omitempty"`
}

func NewSchemaInfo() *SchemaInfo {
  return &SchemaInfo{}
}

var SchemaInfo_Type_DEFAULT string
func (p *SchemaInfo) GetType() string {
  if !p.IsSetType() {
    return SchemaInfo_Type_DEFAULT
  }
return *p.Type
}
var SchemaInfo_Version_DEFAULT int32
func (p *SchemaInfo) GetVersion() int32 {
  if !p.IsSetVersion() {
    return SchemaInfo_Version_DEFAULT
  }
return *p.Version
}
var SchemaInfo_Data_DEFAULT []byte

func (p *SchemaInfo) GetData() []byte {
  return p.Data
}
var SchemaInfo_Source_DEFAULT string
func (p *SchemaInfo) GetSource() string {
  if !p.IsSetSource() {
    return SchemaInfo_Source_DEFAULT
  }
return *p.Source
}
var SchemaInfo_CreatedTimeUtc_DEFAULT int64
func (p *SchemaInfo) GetCreatedTimeUtc() int64 {
  if !p.IsSetCreatedTimeUtc() {
    return SchemaInfo_CreatedTimeUtc_DEFAULT
  }
return *p.CreatedTimeUtc
}
func (p *SchemaInfo) IsSetType() bool {
  return p.Type != nil
}

func (p *SchemaInfo) IsSetVersion() bool {
  return p.Version != nil
}

func (p *SchemaInfo) IsSetData() bool {
  return p.Data != nil
}

func (p *SchemaInfo) IsSetSource() bool {
  return p.Source != nil
}

func (p *SchemaInfo) IsSetCreatedTimeUtc() bool {
  return p.CreatedTimeUtc != nil
}

func (p *SchemaInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SchemaInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *SchemaInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = &v
}
  return nil
}

func (p *SchemaInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *SchemaInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Source = &v
}
  return nil
}

func (p *SchemaInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTimeUtc = &v
}
  return nil
}

func (p *SchemaInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SchemaInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SchemaInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteString(string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *SchemaInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Version)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  }
  return err
}

func (p *SchemaInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *SchemaInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSource() {
    if err := oprot.WriteFieldBegin("source", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:source: ", p), err) }
    if err := oprot.WriteString(string(*p.Source)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.source (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:source: ", p), err) }
  }
  return err
}

func (p *SchemaInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedTimeUtc() {
    if err := oprot.WriteFieldBegin("createdTimeUtc", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTimeUtc: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CreatedTimeUtc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createdTimeUtc (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTimeUtc: ", p), err) }
  }
  return err
}

func (p *SchemaInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SchemaInfo(%+v)", *p)
}

// Attributes:
//  - Zone
//  - AllowPublish
//  - AllowConsume
//  - AlwaysReplicateTo
//  - RemoteExtentReplicaNum
type DestinationZoneConfig struct {
  // unused fields # 1 to 10
  Zone *string `thrift:"zone,11" db:"zone" json:"zone,omitempty"`
  // unused fields # 12 to 19
  AllowPublish *bool `thrift:"allowPublish,20" db:"allowPublish" json:"allowPublish,omitempty"`
  // unused fields # 21 to 29
  AllowConsume *bool `thrift:"allowConsume,30" db:"allowConsume" json:"allowConsume,omitempty"`
  // unused fields # 31 to 39
  AlwaysReplicateTo *bool `thrift:"alwaysReplicateTo,40" db:"alwaysReplicateTo" json:"alwaysReplicateTo,omitempty"`
  // unused fields # 41 to 49
  RemoteExtentReplicaNum *int32 `thrift:"remoteExtentReplicaNum,50" db:"remoteExtentReplicaNum" json:"remoteExtentReplicaNum,omitempty"`
}

func NewDestinationZoneConfig() *DestinationZoneConfig {
  return &DestinationZoneConfig{}
}

var DestinationZoneConfig_Zone_DEFAULT string
func (p *DestinationZoneConfig) GetZone() string {
  if !p.IsSetZone() {
    return DestinationZoneConfig_Zone_DEFAULT
  }
return *p.Zone
}
var DestinationZoneConfig_AllowPublish_DEFAULT bool
func (p *DestinationZoneConfig) GetAllowPublish() bool {
  if !p.IsSetAllowPublish() {
    return DestinationZoneConfig_AllowPublish_DEFAULT
  }
return *p.AllowPublish
}
var DestinationZoneConfig_AllowConsume_DEFAULT bool
func (p *DestinationZoneConfig) GetAllowConsume() bool {
  if !p.IsSetAllowConsume() {
    return DestinationZoneConfig_AllowConsume_DEFAULT
  }
return *p.AllowConsume
}
var DestinationZoneConfig_AlwaysReplicateTo_DEFAULT bool
func (p *DestinationZoneConfig) GetAlwaysReplicateTo() bool {
  if !p.IsSetAlwaysReplicateTo() {
    return DestinationZoneConfig_AlwaysReplicateTo_DEFAULT
  }
return *p.AlwaysReplicateTo
}
var DestinationZoneConfig_RemoteExtentReplicaNum_DEFAULT int32
func (p *DestinationZoneConfig) GetRemoteExtentReplicaNum() int32 {
  if !p.IsSetRemoteExtentReplicaNum() {
    return DestinationZoneConfig_RemoteExtentReplicaNum_DEFAULT
  }
return *p.RemoteExtentReplicaNum
}
func (p *DestinationZoneConfig) IsSetZone() bool {
  return p.Zone != nil
}

func (p *DestinationZoneConfig) IsSetAllowPublish() bool {
  return p.AllowPublish != nil
}

func (p *DestinationZoneConfig) IsSetAllowConsume() bool {
  return p.AllowConsume != nil
}

func (p *DestinationZoneConfig) IsSetAlwaysReplicateTo() bool {
  return p.AlwaysReplicateTo != nil
}

func (p *DestinationZoneConfig) IsSetRemoteExtentReplicaNum() bool {
  return p.RemoteExtentReplicaNum != nil
}

func (p *DestinationZoneConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 50:
      if err := p.ReadField50(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationZoneConfig)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Zone = &v
}
  return nil
}

func (p *DestinationZoneConfig)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.AllowPublish = &v
}
  return nil
}

func (p *DestinationZoneConfig)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.AllowConsume = &v
}
  return nil
}

func (p *DestinationZoneConfig)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.AlwaysReplicateTo = &v
}
  return nil
}

func (p *DestinationZoneConfig)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.RemoteExtentReplicaNum = &v
}
  return nil
}

func (p *DestinationZoneConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationZoneConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationZoneConfig) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetZone() {
    if err := oprot.WriteFieldBegin("zone", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zone: ", p), err) }
    if err := oprot.WriteString(string(*p.Zone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.zone (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zone: ", p), err) }
  }
  return err
}

func (p *DestinationZoneConfig) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetAllowPublish() {
    if err := oprot.WriteFieldBegin("allowPublish", thrift.BOOL, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:allowPublish: ", p), err) }
    if err := oprot.WriteBool(bool(*p.AllowPublish)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.allowPublish (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:allowPublish: ", p), err) }
  }
  return err
}

func (p *DestinationZoneConfig) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetAllowConsume() {
    if err := oprot.WriteFieldBegin("allowConsume", thrift.BOOL, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:allowConsume: ", p), err) }
    if err := oprot.WriteBool(bool(*p.AllowConsume)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.allowConsume (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:allowConsume: ", p), err) }
  }
  return err
}

func (p *DestinationZoneConfig) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetAlwaysReplicateTo() {
    if err := oprot.WriteFieldBegin("alwaysReplicateTo", thrift.BOOL, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:alwaysReplicateTo: ", p), err) }
    if err := oprot.WriteBool(bool(*p.AlwaysReplicateTo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.alwaysReplicateTo (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:alwaysReplicateTo: ", p), err) }
  }
  return err
}

func (p *DestinationZoneConfig) writeField50(oprot thrift.TProtocol) (err error) {
  if p.IsSetRemoteExtentReplicaNum() {
    if err := oprot.WriteFieldBegin("remoteExtentReplicaNum", thrift.I32, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:remoteExtentReplicaNum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.RemoteExtentReplicaNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remoteExtentReplicaNum (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:remoteExtentReplicaNum: ", p), err) }
  }
  return err
}

func (p *DestinationZoneConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationZoneConfig(%+v)", *p)
}

// Attributes:
//  - Configs
type DestinationZoneConfigs struct {
  // unused fields # 1 to 9
  Configs []*DestinationZoneConfig `thrift:"configs,10" db:"configs" json:"configs,omitempty"`
}

func NewDestinationZoneConfigs() *DestinationZoneConfigs {
  return &DestinationZoneConfigs{}
}

var DestinationZoneConfigs_Configs_DEFAULT []*DestinationZoneConfig

func (p *DestinationZoneConfigs) GetConfigs() []*DestinationZoneConfig {
  return p.Configs
}
func (p *DestinationZoneConfigs) IsSetConfigs() bool {
  return p.Configs != nil
}

func (p *DestinationZoneConfigs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationZoneConfigs)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DestinationZoneConfig, 0, size)
  p.Configs =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &DestinationZoneConfig{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Configs = append(p.Configs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DestinationZoneConfigs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationZoneConfigs"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationZoneConfigs) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigs() {
    if err := oprot.WriteFieldBegin("configs", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:configs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Configs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Configs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:configs: ", p), err) }
  }
  return err
}

func (p *DestinationZoneConfigs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationZoneConfigs(%+v)", *p)
}

// Attributes:
//  - Path
//  - Type
//  - ConsumedMessagesRetention
//  - UnconsumedMessagesRetention
//  - OwnerEmail
//  - ChecksumOption
//  - IsMultiZone
//  - ZoneConfigs
//  - SchemaInfo
//  - KafkaCluster
//  - KafkaTopics
type CreateDestinationRequest struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
  Type *DestinationType `thrift:"type,2" db:"type" json:"type,omitempty"`
  ConsumedMessagesRetention *int32 `thrift:"consumedMessagesRetention,3" db:"consumedMessagesRetention" json:"consumedMessagesRetention,omitempty"`
  UnconsumedMessagesRetention *int32 `thrift:"unconsumedMessagesRetention,4" db:"unconsumedMessagesRetention" json:"unconsumedMessagesRetention,omitempty"`
  OwnerEmail *string `thrift:"ownerEmail,5" db:"ownerEmail" json:"ownerEmail,omitempty"`
  ChecksumOption ChecksumOption `thrift:"checksumOption,6" db:"checksumOption" json:"checksumOption,omitempty"`
  // unused fields # 7 to 9
  IsMultiZone *bool `thrift:"isMultiZone,10" db:"isMultiZone" json:"isMultiZone,omitempty"`
  ZoneConfigs *DestinationZoneConfigs `thrift:"zoneConfigs,11" db:"zoneConfigs" json:"zoneConfigs,omitempty"`
  // unused fields # 12 to 19
  SchemaInfo *SchemaInfo `thrift:"schemaInfo,20" db:"schemaInfo" json:"schemaInfo,omitempty"`
  // unused fields # 21 to 39
  KafkaCluster *string `thrift:"kafkaCluster,40" db:"kafkaCluster" json:"kafkaCluster,omitempty"`
  KafkaTopics []string `thrift:"kafkaTopics,41" db:"kafkaTopics" json:"kafkaTopics,omitempty"`
}

func NewCreateDestinationRequest() *CreateDestinationRequest {
  return &CreateDestinationRequest{
ChecksumOption: 0,
}
}

var CreateDestinationRequest_Path_DEFAULT string
func (p *CreateDestinationRequest) GetPath() string {
  if !p.IsSetPath() {
    return CreateDestinationRequest_Path_DEFAULT
  }
return *p.Path
}
var CreateDestinationRequest_Type_DEFAULT DestinationType
func (p *CreateDestinationRequest) GetType() DestinationType {
  if !p.IsSetType() {
    return CreateDestinationRequest_Type_DEFAULT
  }
return *p.Type
}
var CreateDestinationRequest_ConsumedMessagesRetention_DEFAULT int32
func (p *CreateDestinationRequest) GetConsumedMessagesRetention() int32 {
  if !p.IsSetConsumedMessagesRetention() {
    return CreateDestinationRequest_ConsumedMessagesRetention_DEFAULT
  }
return *p.ConsumedMessagesRetention
}
var CreateDestinationRequest_UnconsumedMessagesRetention_DEFAULT int32
func (p *CreateDestinationRequest) GetUnconsumedMessagesRetention() int32 {
  if !p.IsSetUnconsumedMessagesRetention() {
    return CreateDestinationRequest_UnconsumedMessagesRetention_DEFAULT
  }
return *p.UnconsumedMessagesRetention
}
var CreateDestinationRequest_OwnerEmail_DEFAULT string
func (p *CreateDestinationRequest) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return CreateDestinationRequest_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
var CreateDestinationRequest_ChecksumOption_DEFAULT ChecksumOption = 0

func (p *CreateDestinationRequest) GetChecksumOption() ChecksumOption {
  return p.ChecksumOption
}
var CreateDestinationRequest_IsMultiZone_DEFAULT bool
func (p *CreateDestinationRequest) GetIsMultiZone() bool {
  if !p.IsSetIsMultiZone() {
    return CreateDestinationRequest_IsMultiZone_DEFAULT
  }
return *p.IsMultiZone
}
var CreateDestinationRequest_ZoneConfigs_DEFAULT *DestinationZoneConfigs
func (p *CreateDestinationRequest) GetZoneConfigs() *DestinationZoneConfigs {
  if !p.IsSetZoneConfigs() {
    return CreateDestinationRequest_ZoneConfigs_DEFAULT
  }
return p.ZoneConfigs
}
var CreateDestinationRequest_SchemaInfo_DEFAULT *SchemaInfo
func (p *CreateDestinationRequest) GetSchemaInfo() *SchemaInfo {
  if !p.IsSetSchemaInfo() {
    return CreateDestinationRequest_SchemaInfo_DEFAULT
  }
return p.SchemaInfo
}
var CreateDestinationRequest_KafkaCluster_DEFAULT string
func (p *CreateDestinationRequest) GetKafkaCluster() string {
  if !p.IsSetKafkaCluster() {
    return CreateDestinationRequest_KafkaCluster_DEFAULT
  }
return *p.KafkaCluster
}
var CreateDestinationRequest_KafkaTopics_DEFAULT []string

func (p *CreateDestinationRequest) GetKafkaTopics() []string {
  return p.KafkaTopics
}
func (p *CreateDestinationRequest) IsSetPath() bool {
  return p.Path != nil
}

func (p *CreateDestinationRequest) IsSetType() bool {
  return p.Type != nil
}

func (p *CreateDestinationRequest) IsSetConsumedMessagesRetention() bool {
  return p.ConsumedMessagesRetention != nil
}

func (p *CreateDestinationRequest) IsSetUnconsumedMessagesRetention() bool {
  return p.UnconsumedMessagesRetention != nil
}

func (p *CreateDestinationRequest) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *CreateDestinationRequest) IsSetChecksumOption() bool {
  return p.ChecksumOption != CreateDestinationRequest_ChecksumOption_DEFAULT
}

func (p *CreateDestinationRequest) IsSetIsMultiZone() bool {
  return p.IsMultiZone != nil
}

func (p *CreateDestinationRequest) IsSetZoneConfigs() bool {
  return p.ZoneConfigs != nil
}

func (p *CreateDestinationRequest) IsSetSchemaInfo() bool {
  return p.SchemaInfo != nil
}

func (p *CreateDestinationRequest) IsSetKafkaCluster() bool {
  return p.KafkaCluster != nil
}

func (p *CreateDestinationRequest) IsSetKafkaTopics() bool {
  return p.KafkaTopics != nil
}

func (p *CreateDestinationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 40:
      if err := p.ReadField40(iprot); err != nil {
        return err
      }
    case 41:
      if err := p.ReadField41(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateDestinationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := DestinationType(v)
  p.Type = &temp
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConsumedMessagesRetention = &v
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UnconsumedMessagesRetention = &v
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := ChecksumOption(v)
  p.ChecksumOption = temp
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.IsMultiZone = &v
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField11(iprot thrift.TProtocol) error {
  p.ZoneConfigs = &DestinationZoneConfigs{}
  if err := p.ZoneConfigs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
  }
  return nil
}

func (p *CreateDestinationRequest)  ReadField20(iprot thrift.TProtocol) error {
  p.SchemaInfo = &SchemaInfo{}
  if err := p.SchemaInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
  }
  return nil
}

func (p *CreateDestinationRequest)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.KafkaCluster = &v
}
  return nil
}

func (p *CreateDestinationRequest)  ReadField41(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.KafkaTopics =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.KafkaTopics = append(p.KafkaTopics, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CreateDestinationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateDestinationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumedMessagesRetention() {
    if err := oprot.WriteFieldBegin("consumedMessagesRetention", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumedMessagesRetention: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ConsumedMessagesRetention)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumedMessagesRetention (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumedMessagesRetention: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnconsumedMessagesRetention() {
    if err := oprot.WriteFieldBegin("unconsumedMessagesRetention", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unconsumedMessagesRetention: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UnconsumedMessagesRetention)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unconsumedMessagesRetention (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unconsumedMessagesRetention: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ownerEmail: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetChecksumOption() {
    if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:checksumOption: ", p), err) }
    if err := oprot.WriteI32(int32(p.ChecksumOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.checksumOption (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:checksumOption: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsMultiZone() {
    if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isMultiZone: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isMultiZone: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetZoneConfigs() {
    if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zoneConfigs: ", p), err) }
    if err := p.ZoneConfigs.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zoneConfigs: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaInfo() {
    if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:schemaInfo: ", p), err) }
    if err := p.SchemaInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:schemaInfo: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField40(oprot thrift.TProtocol) (err error) {
  if p.IsSetKafkaCluster() {
    if err := oprot.WriteFieldBegin("kafkaCluster", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:kafkaCluster: ", p), err) }
    if err := oprot.WriteString(string(*p.KafkaCluster)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.kafkaCluster (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:kafkaCluster: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) writeField41(oprot thrift.TProtocol) (err error) {
  if p.IsSetKafkaTopics() {
    if err := oprot.WriteFieldBegin("kafkaTopics", thrift.LIST, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:kafkaTopics: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.KafkaTopics)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.KafkaTopics {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:kafkaTopics: ", p), err) }
  }
  return err
}

func (p *CreateDestinationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Path
type ReadDestinationRequest struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
}

func NewReadDestinationRequest() *ReadDestinationRequest {
  return &ReadDestinationRequest{}
}

var ReadDestinationRequest_Path_DEFAULT string
func (p *ReadDestinationRequest) GetPath() string {
  if !p.IsSetPath() {
    return ReadDestinationRequest_Path_DEFAULT
  }
return *p.Path
}
func (p *ReadDestinationRequest) IsSetPath() bool {
  return p.Path != nil
}

func (p *ReadDestinationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadDestinationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *ReadDestinationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadDestinationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *ReadDestinationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Path
//  - Status
//  - ConsumedMessagesRetention
//  - UnconsumedMessagesRetention
//  - OwnerEmail
//  - ChecksumOption
//  - SchemaInfo
type UpdateDestinationRequest struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
  Status *DestinationStatus `thrift:"status,2" db:"status" json:"status,omitempty"`
  ConsumedMessagesRetention *int32 `thrift:"consumedMessagesRetention,3" db:"consumedMessagesRetention" json:"consumedMessagesRetention,omitempty"`
  UnconsumedMessagesRetention *int32 `thrift:"unconsumedMessagesRetention,4" db:"unconsumedMessagesRetention" json:"unconsumedMessagesRetention,omitempty"`
  OwnerEmail *string `thrift:"ownerEmail,5" db:"ownerEmail" json:"ownerEmail,omitempty"`
  ChecksumOption *ChecksumOption `thrift:"checksumOption,6" db:"checksumOption" json:"checksumOption,omitempty"`
  // unused fields # 7 to 9
  SchemaInfo *SchemaInfo `thrift:"schemaInfo,10" db:"schemaInfo" json:"schemaInfo,omitempty"`
}

func NewUpdateDestinationRequest() *UpdateDestinationRequest {
  return &UpdateDestinationRequest{}
}

var UpdateDestinationRequest_Path_DEFAULT string
func (p *UpdateDestinationRequest) GetPath() string {
  if !p.IsSetPath() {
    return UpdateDestinationRequest_Path_DEFAULT
  }
return *p.Path
}
var UpdateDestinationRequest_Status_DEFAULT DestinationStatus
func (p *UpdateDestinationRequest) GetStatus() DestinationStatus {
  if !p.IsSetStatus() {
    return UpdateDestinationRequest_Status_DEFAULT
  }
return *p.Status
}
var UpdateDestinationRequest_ConsumedMessagesRetention_DEFAULT int32
func (p *UpdateDestinationRequest) GetConsumedMessagesRetention() int32 {
  if !p.IsSetConsumedMessagesRetention() {
    return UpdateDestinationRequest_ConsumedMessagesRetention_DEFAULT
  }
return *p.ConsumedMessagesRetention
}
var UpdateDestinationRequest_UnconsumedMessagesRetention_DEFAULT int32
func (p *UpdateDestinationRequest) GetUnconsumedMessagesRetention() int32 {
  if !p.IsSetUnconsumedMessagesRetention() {
    return UpdateDestinationRequest_UnconsumedMessagesRetention_DEFAULT
  }
return *p.UnconsumedMessagesRetention
}
var UpdateDestinationRequest_OwnerEmail_DEFAULT string
func (p *UpdateDestinationRequest) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return UpdateDestinationRequest_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
var UpdateDestinationRequest_ChecksumOption_DEFAULT ChecksumOption
func (p *UpdateDestinationRequest) GetChecksumOption() ChecksumOption {
  if !p.IsSetChecksumOption() {
    return UpdateDestinationRequest_ChecksumOption_DEFAULT
  }
return *p.ChecksumOption
}
var UpdateDestinationRequest_SchemaInfo_DEFAULT *SchemaInfo
func (p *UpdateDestinationRequest) GetSchemaInfo() *SchemaInfo {
  if !p.IsSetSchemaInfo() {
    return UpdateDestinationRequest_SchemaInfo_DEFAULT
  }
return p.SchemaInfo
}
func (p *UpdateDestinationRequest) IsSetPath() bool {
  return p.Path != nil
}

func (p *UpdateDestinationRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *UpdateDestinationRequest) IsSetConsumedMessagesRetention() bool {
  return p.ConsumedMessagesRetention != nil
}

func (p *UpdateDestinationRequest) IsSetUnconsumedMessagesRetention() bool {
  return p.UnconsumedMessagesRetention != nil
}

func (p *UpdateDestinationRequest) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *UpdateDestinationRequest) IsSetChecksumOption() bool {
  return p.ChecksumOption != nil
}

func (p *UpdateDestinationRequest) IsSetSchemaInfo() bool {
  return p.SchemaInfo != nil
}

func (p *UpdateDestinationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateDestinationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *UpdateDestinationRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := DestinationStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *UpdateDestinationRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConsumedMessagesRetention = &v
}
  return nil
}

func (p *UpdateDestinationRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UnconsumedMessagesRetention = &v
}
  return nil
}

func (p *UpdateDestinationRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *UpdateDestinationRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := ChecksumOption(v)
  p.ChecksumOption = &temp
}
  return nil
}

func (p *UpdateDestinationRequest)  ReadField10(iprot thrift.TProtocol) error {
  p.SchemaInfo = &SchemaInfo{}
  if err := p.SchemaInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
  }
  return nil
}

func (p *UpdateDestinationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateDestinationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumedMessagesRetention() {
    if err := oprot.WriteFieldBegin("consumedMessagesRetention", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:consumedMessagesRetention: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ConsumedMessagesRetention)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumedMessagesRetention (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:consumedMessagesRetention: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnconsumedMessagesRetention() {
    if err := oprot.WriteFieldBegin("unconsumedMessagesRetention", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unconsumedMessagesRetention: ", p), err) }
    if err := oprot.WriteI32(int32(*p.UnconsumedMessagesRetention)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unconsumedMessagesRetention (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unconsumedMessagesRetention: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ownerEmail: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetChecksumOption() {
    if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:checksumOption: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ChecksumOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.checksumOption (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:checksumOption: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaInfo() {
    if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:schemaInfo: ", p), err) }
    if err := p.SchemaInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:schemaInfo: ", p), err) }
  }
  return err
}

func (p *UpdateDestinationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Path
type DeleteDestinationRequest struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
}

func NewDeleteDestinationRequest() *DeleteDestinationRequest {
  return &DeleteDestinationRequest{}
}

var DeleteDestinationRequest_Path_DEFAULT string
func (p *DeleteDestinationRequest) GetPath() string {
  if !p.IsSetPath() {
    return DeleteDestinationRequest_Path_DEFAULT
  }
return *p.Path
}
func (p *DeleteDestinationRequest) IsSetPath() bool {
  return p.Path != nil
}

func (p *DeleteDestinationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteDestinationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *DeleteDestinationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteDestinationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteDestinationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *DeleteDestinationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteDestinationRequest(%+v)", *p)
}

// Attributes:
//  - Prefix
//  - PageToken
//  - Limit
type ListDestinationsRequest struct {
  Prefix *string `thrift:"prefix,1" db:"prefix" json:"prefix,omitempty"`
  PageToken []byte `thrift:"pageToken,2" db:"pageToken" json:"pageToken,omitempty"`
  Limit *int64 `thrift:"limit,3" db:"limit" json:"limit,omitempty"`
}

func NewListDestinationsRequest() *ListDestinationsRequest {
  return &ListDestinationsRequest{}
}

var ListDestinationsRequest_Prefix_DEFAULT string
func (p *ListDestinationsRequest) GetPrefix() string {
  if !p.IsSetPrefix() {
    return ListDestinationsRequest_Prefix_DEFAULT
  }
return *p.Prefix
}
var ListDestinationsRequest_PageToken_DEFAULT []byte

func (p *ListDestinationsRequest) GetPageToken() []byte {
  return p.PageToken
}
var ListDestinationsRequest_Limit_DEFAULT int64
func (p *ListDestinationsRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return ListDestinationsRequest_Limit_DEFAULT
  }
return *p.Limit
}
func (p *ListDestinationsRequest) IsSetPrefix() bool {
  return p.Prefix != nil
}

func (p *ListDestinationsRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ListDestinationsRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *ListDestinationsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListDestinationsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Prefix = &v
}
  return nil
}

func (p *ListDestinationsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ListDestinationsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *ListDestinationsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListDestinationsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListDestinationsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPrefix() {
    if err := oprot.WriteFieldBegin("prefix", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefix: ", p), err) }
    if err := oprot.WriteString(string(*p.Prefix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prefix (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefix: ", p), err) }
  }
  return err
}

func (p *ListDestinationsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageToken: ", p), err) }
  }
  return err
}

func (p *ListDestinationsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err) }
  }
  return err
}

func (p *ListDestinationsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListDestinationsRequest(%+v)", *p)
}

// Attributes:
//  - Destinations
//  - NextPageToken
type ListDestinationsResult_ struct {
  Destinations []*DestinationDescription `thrift:"destinations,1" db:"destinations" json:"destinations,omitempty"`
  NextPageToken []byte `thrift:"nextPageToken,2" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewListDestinationsResult_() *ListDestinationsResult_ {
  return &ListDestinationsResult_{}
}

var ListDestinationsResult__Destinations_DEFAULT []*DestinationDescription

func (p *ListDestinationsResult_) GetDestinations() []*DestinationDescription {
  return p.Destinations
}
var ListDestinationsResult__NextPageToken_DEFAULT []byte

func (p *ListDestinationsResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ListDestinationsResult_) IsSetDestinations() bool {
  return p.Destinations != nil
}

func (p *ListDestinationsResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ListDestinationsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListDestinationsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DestinationDescription, 0, size)
  p.Destinations =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &DestinationDescription{
    ChecksumOption:     0,
}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Destinations = append(p.Destinations, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListDestinationsResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ListDestinationsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListDestinationsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListDestinationsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinations() {
    if err := oprot.WriteFieldBegin("destinations", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinations: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Destinations)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Destinations {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinations: ", p), err) }
  }
  return err
}

func (p *ListDestinationsResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ListDestinationsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListDestinationsResult_(%+v)", *p)
}

// This describes the entity and associated configuration, used by client application to consume messages from
// a destination.
// 
// @param destinationPath.  Path which uniquely identifies the destination.
// @param consumerGroupName.  Unique identifier for each group of consumers.
// @param startFrom.  Timestamp used to start consuming messages from destination.  This needs to be provided during
// registration of the ConsumerGroup and cannot be updated later.
// @param lockTimeoutInSeconds.  Seconds to wait before redelivering message to another consumer.
// @param maxDeliveryCount.  Number of times trying to deliver the message without Ack before giving up and moving the
// message to DLQ.
// @param skipOlderMessagesInSeconds.  This is useful for consumers who always wants to keep up and don't care about
// backlog older than certain duration.
// @param createdAt.  Time when ConsumerGroup was registered.
// 
// 
// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - StartFrom
//  - Status
//  - LockTimeoutInSeconds
//  - MaxDeliveryCount
//  - SkipOlderMessagesInSeconds
//  - DeadLetterQueueDestinationUUID
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - OwnerEmail
//  - ConsumerGroupType
//  - IsMultiZone
//  - ZoneConfigs
type ConsumerGroupDescription struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  StartFrom *int64 `thrift:"startFrom,3" db:"startFrom" json:"startFrom,omitempty"`
  Status *ConsumerGroupStatus `thrift:"status,4" db:"status" json:"status,omitempty"`
  LockTimeoutInSeconds *int32 `thrift:"lockTimeoutInSeconds,5" db:"lockTimeoutInSeconds" json:"lockTimeoutInSeconds,omitempty"`
  MaxDeliveryCount *int32 `thrift:"maxDeliveryCount,6" db:"maxDeliveryCount" json:"maxDeliveryCount,omitempty"`
  SkipOlderMessagesInSeconds *int32 `thrift:"skipOlderMessagesInSeconds,7" db:"skipOlderMessagesInSeconds" json:"skipOlderMessagesInSeconds,omitempty"`
  DeadLetterQueueDestinationUUID *string `thrift:"deadLetterQueueDestinationUUID,8" db:"deadLetterQueueDestinationUUID" json:"deadLetterQueueDestinationUUID,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,9" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,10" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  OwnerEmail *string `thrift:"ownerEmail,11" db:"ownerEmail" json:"ownerEmail,omitempty"`
  ConsumerGroupType *ConsumerGroupType `thrift:"consumerGroupType,12" db:"consumerGroupType" json:"consumerGroupType,omitempty"`
  // unused fields # 13 to 19
  IsMultiZone *bool `thrift:"isMultiZone,20" db:"isMultiZone" json:"isMultiZone,omitempty"`
  ZoneConfigs *ConsumerGroupZoneConfigs `thrift:"zoneConfigs,21" db:"zoneConfigs" json:"zoneConfigs,omitempty"`
}

func NewConsumerGroupDescription() *ConsumerGroupDescription {
  return &ConsumerGroupDescription{}
}

var ConsumerGroupDescription_DestinationPath_DEFAULT string
func (p *ConsumerGroupDescription) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return ConsumerGroupDescription_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var ConsumerGroupDescription_ConsumerGroupName_DEFAULT string
func (p *ConsumerGroupDescription) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return ConsumerGroupDescription_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var ConsumerGroupDescription_StartFrom_DEFAULT int64
func (p *ConsumerGroupDescription) GetStartFrom() int64 {
  if !p.IsSetStartFrom() {
    return ConsumerGroupDescription_StartFrom_DEFAULT
  }
return *p.StartFrom
}
var ConsumerGroupDescription_Status_DEFAULT ConsumerGroupStatus
func (p *ConsumerGroupDescription) GetStatus() ConsumerGroupStatus {
  if !p.IsSetStatus() {
    return ConsumerGroupDescription_Status_DEFAULT
  }
return *p.Status
}
var ConsumerGroupDescription_LockTimeoutInSeconds_DEFAULT int32
func (p *ConsumerGroupDescription) GetLockTimeoutInSeconds() int32 {
  if !p.IsSetLockTimeoutInSeconds() {
    return ConsumerGroupDescription_LockTimeoutInSeconds_DEFAULT
  }
return *p.LockTimeoutInSeconds
}
var ConsumerGroupDescription_MaxDeliveryCount_DEFAULT int32
func (p *ConsumerGroupDescription) GetMaxDeliveryCount() int32 {
  if !p.IsSetMaxDeliveryCount() {
    return ConsumerGroupDescription_MaxDeliveryCount_DEFAULT
  }
return *p.MaxDeliveryCount
}
var ConsumerGroupDescription_SkipOlderMessagesInSeconds_DEFAULT int32
func (p *ConsumerGroupDescription) GetSkipOlderMessagesInSeconds() int32 {
  if !p.IsSetSkipOlderMessagesInSeconds() {
    return ConsumerGroupDescription_SkipOlderMessagesInSeconds_DEFAULT
  }
return *p.SkipOlderMessagesInSeconds
}
var ConsumerGroupDescription_DeadLetterQueueDestinationUUID_DEFAULT string
func (p *ConsumerGroupDescription) GetDeadLetterQueueDestinationUUID() string {
  if !p.IsSetDeadLetterQueueDestinationUUID() {
    return ConsumerGroupDescription_DeadLetterQueueDestinationUUID_DEFAULT
  }
return *p.DeadLetterQueueDestinationUUID
}
var ConsumerGroupDescription_DestinationUUID_DEFAULT string
func (p *ConsumerGroupDescription) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ConsumerGroupDescription_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ConsumerGroupDescription_ConsumerGroupUUID_DEFAULT string
func (p *ConsumerGroupDescription) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ConsumerGroupDescription_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ConsumerGroupDescription_OwnerEmail_DEFAULT string
func (p *ConsumerGroupDescription) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return ConsumerGroupDescription_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
var ConsumerGroupDescription_ConsumerGroupType_DEFAULT ConsumerGroupType
func (p *ConsumerGroupDescription) GetConsumerGroupType() ConsumerGroupType {
  if !p.IsSetConsumerGroupType() {
    return ConsumerGroupDescription_ConsumerGroupType_DEFAULT
  }
return *p.ConsumerGroupType
}
var ConsumerGroupDescription_IsMultiZone_DEFAULT bool
func (p *ConsumerGroupDescription) GetIsMultiZone() bool {
  if !p.IsSetIsMultiZone() {
    return ConsumerGroupDescription_IsMultiZone_DEFAULT
  }
return *p.IsMultiZone
}
var ConsumerGroupDescription_ZoneConfigs_DEFAULT *ConsumerGroupZoneConfigs
func (p *ConsumerGroupDescription) GetZoneConfigs() *ConsumerGroupZoneConfigs {
  if !p.IsSetZoneConfigs() {
    return ConsumerGroupDescription_ZoneConfigs_DEFAULT
  }
return p.ZoneConfigs
}
func (p *ConsumerGroupDescription) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *ConsumerGroupDescription) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *ConsumerGroupDescription) IsSetStartFrom() bool {
  return p.StartFrom != nil
}

func (p *ConsumerGroupDescription) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ConsumerGroupDescription) IsSetLockTimeoutInSeconds() bool {
  return p.LockTimeoutInSeconds != nil
}

func (p *ConsumerGroupDescription) IsSetMaxDeliveryCount() bool {
  return p.MaxDeliveryCount != nil
}

func (p *ConsumerGroupDescription) IsSetSkipOlderMessagesInSeconds() bool {
  return p.SkipOlderMessagesInSeconds != nil
}

func (p *ConsumerGroupDescription) IsSetDeadLetterQueueDestinationUUID() bool {
  return p.DeadLetterQueueDestinationUUID != nil
}

func (p *ConsumerGroupDescription) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ConsumerGroupDescription) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ConsumerGroupDescription) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *ConsumerGroupDescription) IsSetConsumerGroupType() bool {
  return p.ConsumerGroupType != nil
}

func (p *ConsumerGroupDescription) IsSetIsMultiZone() bool {
  return p.IsMultiZone != nil
}

func (p *ConsumerGroupDescription) IsSetZoneConfigs() bool {
  return p.ZoneConfigs != nil
}

func (p *ConsumerGroupDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartFrom = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ConsumerGroupStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LockTimeoutInSeconds = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MaxDeliveryCount = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SkipOlderMessagesInSeconds = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.DeadLetterQueueDestinationUUID = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := ConsumerGroupType(v)
  p.ConsumerGroupType = &temp
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.IsMultiZone = &v
}
  return nil
}

func (p *ConsumerGroupDescription)  ReadField21(iprot thrift.TProtocol) error {
  p.ZoneConfigs = &ConsumerGroupZoneConfigs{}
  if err := p.ZoneConfigs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
  }
  return nil
}

func (p *ConsumerGroupDescription) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartFrom() {
    if err := oprot.WriteFieldBegin("startFrom", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startFrom: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startFrom (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startFrom: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetLockTimeoutInSeconds() {
    if err := oprot.WriteFieldBegin("lockTimeoutInSeconds", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lockTimeoutInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.LockTimeoutInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lockTimeoutInSeconds (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lockTimeoutInSeconds: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxDeliveryCount() {
    if err := oprot.WriteFieldBegin("maxDeliveryCount", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:maxDeliveryCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxDeliveryCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxDeliveryCount (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:maxDeliveryCount: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetSkipOlderMessagesInSeconds() {
    if err := oprot.WriteFieldBegin("skipOlderMessagesInSeconds", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:skipOlderMessagesInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SkipOlderMessagesInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.skipOlderMessagesInSeconds (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:skipOlderMessagesInSeconds: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeadLetterQueueDestinationUUID() {
    if err := oprot.WriteFieldBegin("deadLetterQueueDestinationUUID", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deadLetterQueueDestinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DeadLetterQueueDestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deadLetterQueueDestinationUUID (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deadLetterQueueDestinationUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ownerEmail: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupType() {
    if err := oprot.WriteFieldBegin("consumerGroupType", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:consumerGroupType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ConsumerGroupType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupType (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:consumerGroupType: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsMultiZone() {
    if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:isMultiZone: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:isMultiZone: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetZoneConfigs() {
    if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:zoneConfigs: ", p), err) }
    if err := p.ZoneConfigs.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:zoneConfigs: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupDescription(%+v)", *p)
}

// Attributes:
//  - Zone
//  - Visible
type ConsumerGroupZoneConfig struct {
  // unused fields # 1 to 10
  Zone *string `thrift:"zone,11" db:"zone" json:"zone,omitempty"`
  // unused fields # 12 to 19
  Visible *bool `thrift:"visible,20" db:"visible" json:"visible,omitempty"`
}

func NewConsumerGroupZoneConfig() *ConsumerGroupZoneConfig {
  return &ConsumerGroupZoneConfig{}
}

var ConsumerGroupZoneConfig_Zone_DEFAULT string
func (p *ConsumerGroupZoneConfig) GetZone() string {
  if !p.IsSetZone() {
    return ConsumerGroupZoneConfig_Zone_DEFAULT
  }
return *p.Zone
}
var ConsumerGroupZoneConfig_Visible_DEFAULT bool
func (p *ConsumerGroupZoneConfig) GetVisible() bool {
  if !p.IsSetVisible() {
    return ConsumerGroupZoneConfig_Visible_DEFAULT
  }
return *p.Visible
}
func (p *ConsumerGroupZoneConfig) IsSetZone() bool {
  return p.Zone != nil
}

func (p *ConsumerGroupZoneConfig) IsSetVisible() bool {
  return p.Visible != nil
}

func (p *ConsumerGroupZoneConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupZoneConfig)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Zone = &v
}
  return nil
}

func (p *ConsumerGroupZoneConfig)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Visible = &v
}
  return nil
}

func (p *ConsumerGroupZoneConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupZoneConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupZoneConfig) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetZone() {
    if err := oprot.WriteFieldBegin("zone", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zone: ", p), err) }
    if err := oprot.WriteString(string(*p.Zone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.zone (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zone: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupZoneConfig) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetVisible() {
    if err := oprot.WriteFieldBegin("visible", thrift.BOOL, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:visible: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Visible)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.visible (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:visible: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupZoneConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupZoneConfig(%+v)", *p)
}

// Attributes:
//  - Configs
//  - ActiveZone
type ConsumerGroupZoneConfigs struct {
  // unused fields # 1 to 9
  Configs []*ConsumerGroupZoneConfig `thrift:"configs,10" db:"configs" json:"configs,omitempty"`
  // unused fields # 11 to 20
  ActiveZone *string `thrift:"activeZone,21" db:"activeZone" json:"activeZone,omitempty"`
}

func NewConsumerGroupZoneConfigs() *ConsumerGroupZoneConfigs {
  return &ConsumerGroupZoneConfigs{}
}

var ConsumerGroupZoneConfigs_Configs_DEFAULT []*ConsumerGroupZoneConfig

func (p *ConsumerGroupZoneConfigs) GetConfigs() []*ConsumerGroupZoneConfig {
  return p.Configs
}
var ConsumerGroupZoneConfigs_ActiveZone_DEFAULT string
func (p *ConsumerGroupZoneConfigs) GetActiveZone() string {
  if !p.IsSetActiveZone() {
    return ConsumerGroupZoneConfigs_ActiveZone_DEFAULT
  }
return *p.ActiveZone
}
func (p *ConsumerGroupZoneConfigs) IsSetConfigs() bool {
  return p.Configs != nil
}

func (p *ConsumerGroupZoneConfigs) IsSetActiveZone() bool {
  return p.ActiveZone != nil
}

func (p *ConsumerGroupZoneConfigs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupZoneConfigs)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupZoneConfig, 0, size)
  p.Configs =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &ConsumerGroupZoneConfig{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Configs = append(p.Configs, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerGroupZoneConfigs)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.ActiveZone = &v
}
  return nil
}

func (p *ConsumerGroupZoneConfigs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupZoneConfigs"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupZoneConfigs) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetConfigs() {
    if err := oprot.WriteFieldBegin("configs", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:configs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Configs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Configs {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:configs: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupZoneConfigs) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetActiveZone() {
    if err := oprot.WriteFieldBegin("activeZone", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:activeZone: ", p), err) }
    if err := oprot.WriteString(string(*p.ActiveZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.activeZone (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:activeZone: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupZoneConfigs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupZoneConfigs(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - StartFrom
//  - LockTimeoutInSeconds
//  - MaxDeliveryCount
//  - SkipOlderMessagesInSeconds
//  - OwnerEmail
//  - ConsumerGroupType
//  - IsMultiZone
//  - ZoneConfigs
type CreateConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  StartFrom *int64 `thrift:"startFrom,3" db:"startFrom" json:"startFrom,omitempty"`
  LockTimeoutInSeconds *int32 `thrift:"lockTimeoutInSeconds,4" db:"lockTimeoutInSeconds" json:"lockTimeoutInSeconds,omitempty"`
  MaxDeliveryCount *int32 `thrift:"maxDeliveryCount,5" db:"maxDeliveryCount" json:"maxDeliveryCount,omitempty"`
  SkipOlderMessagesInSeconds *int32 `thrift:"skipOlderMessagesInSeconds,6" db:"skipOlderMessagesInSeconds" json:"skipOlderMessagesInSeconds,omitempty"`
  OwnerEmail *string `thrift:"ownerEmail,7" db:"ownerEmail" json:"ownerEmail,omitempty"`
  ConsumerGroupType *ConsumerGroupType `thrift:"consumerGroupType,8" db:"consumerGroupType" json:"consumerGroupType,omitempty"`
  // unused field # 9
  IsMultiZone *bool `thrift:"isMultiZone,10" db:"isMultiZone" json:"isMultiZone,omitempty"`
  ZoneConfigs *ConsumerGroupZoneConfigs `thrift:"zoneConfigs,11" db:"zoneConfigs" json:"zoneConfigs,omitempty"`
}

func NewCreateConsumerGroupRequest() *CreateConsumerGroupRequest {
  return &CreateConsumerGroupRequest{}
}

var CreateConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *CreateConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return CreateConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var CreateConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *CreateConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return CreateConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var CreateConsumerGroupRequest_StartFrom_DEFAULT int64
func (p *CreateConsumerGroupRequest) GetStartFrom() int64 {
  if !p.IsSetStartFrom() {
    return CreateConsumerGroupRequest_StartFrom_DEFAULT
  }
return *p.StartFrom
}
var CreateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT int32
func (p *CreateConsumerGroupRequest) GetLockTimeoutInSeconds() int32 {
  if !p.IsSetLockTimeoutInSeconds() {
    return CreateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT
  }
return *p.LockTimeoutInSeconds
}
var CreateConsumerGroupRequest_MaxDeliveryCount_DEFAULT int32
func (p *CreateConsumerGroupRequest) GetMaxDeliveryCount() int32 {
  if !p.IsSetMaxDeliveryCount() {
    return CreateConsumerGroupRequest_MaxDeliveryCount_DEFAULT
  }
return *p.MaxDeliveryCount
}
var CreateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT int32
func (p *CreateConsumerGroupRequest) GetSkipOlderMessagesInSeconds() int32 {
  if !p.IsSetSkipOlderMessagesInSeconds() {
    return CreateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT
  }
return *p.SkipOlderMessagesInSeconds
}
var CreateConsumerGroupRequest_OwnerEmail_DEFAULT string
func (p *CreateConsumerGroupRequest) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return CreateConsumerGroupRequest_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
var CreateConsumerGroupRequest_ConsumerGroupType_DEFAULT ConsumerGroupType
func (p *CreateConsumerGroupRequest) GetConsumerGroupType() ConsumerGroupType {
  if !p.IsSetConsumerGroupType() {
    return CreateConsumerGroupRequest_ConsumerGroupType_DEFAULT
  }
return *p.ConsumerGroupType
}
var CreateConsumerGroupRequest_IsMultiZone_DEFAULT bool
func (p *CreateConsumerGroupRequest) GetIsMultiZone() bool {
  if !p.IsSetIsMultiZone() {
    return CreateConsumerGroupRequest_IsMultiZone_DEFAULT
  }
return *p.IsMultiZone
}
var CreateConsumerGroupRequest_ZoneConfigs_DEFAULT *ConsumerGroupZoneConfigs
func (p *CreateConsumerGroupRequest) GetZoneConfigs() *ConsumerGroupZoneConfigs {
  if !p.IsSetZoneConfigs() {
    return CreateConsumerGroupRequest_ZoneConfigs_DEFAULT
  }
return p.ZoneConfigs
}
func (p *CreateConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *CreateConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *CreateConsumerGroupRequest) IsSetStartFrom() bool {
  return p.StartFrom != nil
}

func (p *CreateConsumerGroupRequest) IsSetLockTimeoutInSeconds() bool {
  return p.LockTimeoutInSeconds != nil
}

func (p *CreateConsumerGroupRequest) IsSetMaxDeliveryCount() bool {
  return p.MaxDeliveryCount != nil
}

func (p *CreateConsumerGroupRequest) IsSetSkipOlderMessagesInSeconds() bool {
  return p.SkipOlderMessagesInSeconds != nil
}

func (p *CreateConsumerGroupRequest) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *CreateConsumerGroupRequest) IsSetConsumerGroupType() bool {
  return p.ConsumerGroupType != nil
}

func (p *CreateConsumerGroupRequest) IsSetIsMultiZone() bool {
  return p.IsMultiZone != nil
}

func (p *CreateConsumerGroupRequest) IsSetZoneConfigs() bool {
  return p.ZoneConfigs != nil
}

func (p *CreateConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartFrom = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LockTimeoutInSeconds = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxDeliveryCount = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SkipOlderMessagesInSeconds = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := ConsumerGroupType(v)
  p.ConsumerGroupType = &temp
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.IsMultiZone = &v
}
  return nil
}

func (p *CreateConsumerGroupRequest)  ReadField11(iprot thrift.TProtocol) error {
  p.ZoneConfigs = &ConsumerGroupZoneConfigs{}
  if err := p.ZoneConfigs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ZoneConfigs), err)
  }
  return nil
}

func (p *CreateConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartFrom() {
    if err := oprot.WriteFieldBegin("startFrom", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startFrom: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startFrom (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startFrom: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLockTimeoutInSeconds() {
    if err := oprot.WriteFieldBegin("lockTimeoutInSeconds", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lockTimeoutInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.LockTimeoutInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lockTimeoutInSeconds (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lockTimeoutInSeconds: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxDeliveryCount() {
    if err := oprot.WriteFieldBegin("maxDeliveryCount", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDeliveryCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxDeliveryCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxDeliveryCount (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDeliveryCount: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSkipOlderMessagesInSeconds() {
    if err := oprot.WriteFieldBegin("skipOlderMessagesInSeconds", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:skipOlderMessagesInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SkipOlderMessagesInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.skipOlderMessagesInSeconds (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:skipOlderMessagesInSeconds: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerEmail: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupType() {
    if err := oprot.WriteFieldBegin("consumerGroupType", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:consumerGroupType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ConsumerGroupType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupType (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:consumerGroupType: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsMultiZone() {
    if err := oprot.WriteFieldBegin("isMultiZone", thrift.BOOL, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isMultiZone: ", p), err) }
    if err := oprot.WriteBool(bool(*p.IsMultiZone)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isMultiZone (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isMultiZone: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetZoneConfigs() {
    if err := oprot.WriteFieldBegin("zoneConfigs", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:zoneConfigs: ", p), err) }
    if err := p.ZoneConfigs.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ZoneConfigs), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:zoneConfigs: ", p), err) }
  }
  return err
}

func (p *CreateConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type ReadConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
}

func NewReadConsumerGroupRequest() *ReadConsumerGroupRequest {
  return &ReadConsumerGroupRequest{}
}

var ReadConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *ReadConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return ReadConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *ReadConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return ReadConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
func (p *ReadConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *ReadConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *ReadConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *ReadConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *ReadConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - Status
//  - LockTimeoutInSeconds
//  - MaxDeliveryCount
//  - SkipOlderMessagesInSeconds
//  - OwnerEmail
type UpdateConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  Status *ConsumerGroupStatus `thrift:"status,3" db:"status" json:"status,omitempty"`
  LockTimeoutInSeconds *int32 `thrift:"lockTimeoutInSeconds,4" db:"lockTimeoutInSeconds" json:"lockTimeoutInSeconds,omitempty"`
  MaxDeliveryCount *int32 `thrift:"maxDeliveryCount,5" db:"maxDeliveryCount" json:"maxDeliveryCount,omitempty"`
  SkipOlderMessagesInSeconds *int32 `thrift:"skipOlderMessagesInSeconds,6" db:"skipOlderMessagesInSeconds" json:"skipOlderMessagesInSeconds,omitempty"`
  OwnerEmail *string `thrift:"ownerEmail,7" db:"ownerEmail" json:"ownerEmail,omitempty"`
}

func NewUpdateConsumerGroupRequest() *UpdateConsumerGroupRequest {
  return &UpdateConsumerGroupRequest{}
}

var UpdateConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *UpdateConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return UpdateConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var UpdateConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *UpdateConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return UpdateConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var UpdateConsumerGroupRequest_Status_DEFAULT ConsumerGroupStatus
func (p *UpdateConsumerGroupRequest) GetStatus() ConsumerGroupStatus {
  if !p.IsSetStatus() {
    return UpdateConsumerGroupRequest_Status_DEFAULT
  }
return *p.Status
}
var UpdateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT int32
func (p *UpdateConsumerGroupRequest) GetLockTimeoutInSeconds() int32 {
  if !p.IsSetLockTimeoutInSeconds() {
    return UpdateConsumerGroupRequest_LockTimeoutInSeconds_DEFAULT
  }
return *p.LockTimeoutInSeconds
}
var UpdateConsumerGroupRequest_MaxDeliveryCount_DEFAULT int32
func (p *UpdateConsumerGroupRequest) GetMaxDeliveryCount() int32 {
  if !p.IsSetMaxDeliveryCount() {
    return UpdateConsumerGroupRequest_MaxDeliveryCount_DEFAULT
  }
return *p.MaxDeliveryCount
}
var UpdateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT int32
func (p *UpdateConsumerGroupRequest) GetSkipOlderMessagesInSeconds() int32 {
  if !p.IsSetSkipOlderMessagesInSeconds() {
    return UpdateConsumerGroupRequest_SkipOlderMessagesInSeconds_DEFAULT
  }
return *p.SkipOlderMessagesInSeconds
}
var UpdateConsumerGroupRequest_OwnerEmail_DEFAULT string
func (p *UpdateConsumerGroupRequest) GetOwnerEmail() string {
  if !p.IsSetOwnerEmail() {
    return UpdateConsumerGroupRequest_OwnerEmail_DEFAULT
  }
return *p.OwnerEmail
}
func (p *UpdateConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *UpdateConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *UpdateConsumerGroupRequest) IsSetStatus() bool {
  return p.Status != nil
}

func (p *UpdateConsumerGroupRequest) IsSetLockTimeoutInSeconds() bool {
  return p.LockTimeoutInSeconds != nil
}

func (p *UpdateConsumerGroupRequest) IsSetMaxDeliveryCount() bool {
  return p.MaxDeliveryCount != nil
}

func (p *UpdateConsumerGroupRequest) IsSetSkipOlderMessagesInSeconds() bool {
  return p.SkipOlderMessagesInSeconds != nil
}

func (p *UpdateConsumerGroupRequest) IsSetOwnerEmail() bool {
  return p.OwnerEmail != nil
}

func (p *UpdateConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConsumerGroupStatus(v)
  p.Status = &temp
}
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LockTimeoutInSeconds = &v
}
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxDeliveryCount = &v
}
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SkipOlderMessagesInSeconds = &v
}
  return nil
}

func (p *UpdateConsumerGroupRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OwnerEmail = &v
}
  return nil
}

func (p *UpdateConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLockTimeoutInSeconds() {
    if err := oprot.WriteFieldBegin("lockTimeoutInSeconds", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lockTimeoutInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.LockTimeoutInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lockTimeoutInSeconds (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lockTimeoutInSeconds: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxDeliveryCount() {
    if err := oprot.WriteFieldBegin("maxDeliveryCount", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDeliveryCount: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxDeliveryCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxDeliveryCount (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDeliveryCount: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSkipOlderMessagesInSeconds() {
    if err := oprot.WriteFieldBegin("skipOlderMessagesInSeconds", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:skipOlderMessagesInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SkipOlderMessagesInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.skipOlderMessagesInSeconds (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:skipOlderMessagesInSeconds: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnerEmail() {
    if err := oprot.WriteFieldBegin("ownerEmail", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ownerEmail: ", p), err) }
    if err := oprot.WriteString(string(*p.OwnerEmail)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ownerEmail (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ownerEmail: ", p), err) }
  }
  return err
}

func (p *UpdateConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type DeleteConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
}

func NewDeleteConsumerGroupRequest() *DeleteConsumerGroupRequest {
  return &DeleteConsumerGroupRequest{}
}

var DeleteConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *DeleteConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return DeleteConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var DeleteConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *DeleteConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return DeleteConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
func (p *DeleteConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *DeleteConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *DeleteConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *DeleteConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *DeleteConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *DeleteConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *DeleteConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - PageToken
//  - Limit
type ListConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  PageToken []byte `thrift:"pageToken,3" db:"pageToken" json:"pageToken,omitempty"`
  Limit *int64 `thrift:"limit,4" db:"limit" json:"limit,omitempty"`
}

func NewListConsumerGroupRequest() *ListConsumerGroupRequest {
  return &ListConsumerGroupRequest{}
}

var ListConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *ListConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return ListConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var ListConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *ListConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return ListConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var ListConsumerGroupRequest_PageToken_DEFAULT []byte

func (p *ListConsumerGroupRequest) GetPageToken() []byte {
  return p.PageToken
}
var ListConsumerGroupRequest_Limit_DEFAULT int64
func (p *ListConsumerGroupRequest) GetLimit() int64 {
  if !p.IsSetLimit() {
    return ListConsumerGroupRequest_Limit_DEFAULT
  }
return *p.Limit
}
func (p *ListConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *ListConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *ListConsumerGroupRequest) IsSetPageToken() bool {
  return p.PageToken != nil
}

func (p *ListConsumerGroupRequest) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *ListConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *ListConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *ListConsumerGroupRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageToken = v
}
  return nil
}

func (p *ListConsumerGroupRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *ListConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPageToken() {
    if err := oprot.WriteFieldBegin("pageToken", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pageToken: ", p), err) }
    if err := oprot.WriteBinary(p.PageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageToken (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pageToken: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limit: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limit: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - ConsumerGroups
//  - NextPageToken
type ListConsumerGroupResult_ struct {
  ConsumerGroups []*ConsumerGroupDescription `thrift:"consumerGroups,1" db:"consumerGroups" json:"consumerGroups,omitempty"`
  NextPageToken []byte `thrift:"nextPageToken,2" db:"nextPageToken" json:"nextPageToken,omitempty"`
}

func NewListConsumerGroupResult_() *ListConsumerGroupResult_ {
  return &ListConsumerGroupResult_{}
}

var ListConsumerGroupResult__ConsumerGroups_DEFAULT []*ConsumerGroupDescription

func (p *ListConsumerGroupResult_) GetConsumerGroups() []*ConsumerGroupDescription {
  return p.ConsumerGroups
}
var ListConsumerGroupResult__NextPageToken_DEFAULT []byte

func (p *ListConsumerGroupResult_) GetNextPageToken() []byte {
  return p.NextPageToken
}
func (p *ListConsumerGroupResult_) IsSetConsumerGroups() bool {
  return p.ConsumerGroups != nil
}

func (p *ListConsumerGroupResult_) IsSetNextPageToken() bool {
  return p.NextPageToken != nil
}

func (p *ListConsumerGroupResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListConsumerGroupResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerGroupDescription, 0, size)
  p.ConsumerGroups =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &ConsumerGroupDescription{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.ConsumerGroups = append(p.ConsumerGroups, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListConsumerGroupResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NextPageToken = v
}
  return nil
}

func (p *ListConsumerGroupResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListConsumerGroupResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListConsumerGroupResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroups() {
    if err := oprot.WriteFieldBegin("consumerGroups", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroups: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConsumerGroups)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ConsumerGroups {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroups: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextPageToken() {
    if err := oprot.WriteFieldBegin("nextPageToken", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextPageToken: ", p), err) }
    if err := oprot.WriteBinary(p.NextPageToken); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextPageToken (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextPageToken: ", p), err) }
  }
  return err
}

func (p *ListConsumerGroupResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListConsumerGroupResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type PurgeDLQForConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
}

func NewPurgeDLQForConsumerGroupRequest() *PurgeDLQForConsumerGroupRequest {
  return &PurgeDLQForConsumerGroupRequest{}
}

var PurgeDLQForConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *PurgeDLQForConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return PurgeDLQForConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var PurgeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *PurgeDLQForConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return PurgeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
func (p *PurgeDLQForConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *PurgeDLQForConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *PurgeDLQForConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PurgeDLQForConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *PurgeDLQForConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *PurgeDLQForConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PurgeDLQForConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PurgeDLQForConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *PurgeDLQForConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *PurgeDLQForConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PurgeDLQForConsumerGroupRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type MergeDLQForConsumerGroupRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
}

func NewMergeDLQForConsumerGroupRequest() *MergeDLQForConsumerGroupRequest {
  return &MergeDLQForConsumerGroupRequest{}
}

var MergeDLQForConsumerGroupRequest_DestinationPath_DEFAULT string
func (p *MergeDLQForConsumerGroupRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return MergeDLQForConsumerGroupRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var MergeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT string
func (p *MergeDLQForConsumerGroupRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return MergeDLQForConsumerGroupRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
func (p *MergeDLQForConsumerGroupRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *MergeDLQForConsumerGroupRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *MergeDLQForConsumerGroupRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MergeDLQForConsumerGroupRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *MergeDLQForConsumerGroupRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *MergeDLQForConsumerGroupRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MergeDLQForConsumerGroupRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MergeDLQForConsumerGroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *MergeDLQForConsumerGroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *MergeDLQForConsumerGroupRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MergeDLQForConsumerGroupRequest(%+v)", *p)
}

// Address of BIn/BOut nodes used by client applications to open direct streams for publishing/consuming messages.
// Publishers are expected to discover HostAddress for all BIn nodes serving a particular destination by calling
// ReadDestinationHosts API on the Frontend and then use the address to directly open a stream to BIn node for
// publishing messages.  Similarly Consumers are expected to discover HostAddress for all BOut nodes serving a
// particular pair of Destination-ConsumerGroup by calling the ReadConsumerGroupHosts API on the Frontend and then
// use the address to directly open a stream to BOut node for consuming messages.
// 
// 
// Attributes:
//  - Host
//  - Port
type HostAddress struct {
  Host *string `thrift:"host,1" db:"host" json:"host,omitempty"`
  Port *int32 `thrift:"port,2" db:"port" json:"port,omitempty"`
}

func NewHostAddress() *HostAddress {
  return &HostAddress{}
}

var HostAddress_Host_DEFAULT string
func (p *HostAddress) GetHost() string {
  if !p.IsSetHost() {
    return HostAddress_Host_DEFAULT
  }
return *p.Host
}
var HostAddress_Port_DEFAULT int32
func (p *HostAddress) GetPort() int32 {
  if !p.IsSetPort() {
    return HostAddress_Port_DEFAULT
  }
return *p.Port
}
func (p *HostAddress) IsSetHost() bool {
  return p.Host != nil
}

func (p *HostAddress) IsSetPort() bool {
  return p.Port != nil
}

func (p *HostAddress) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostAddress)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = &v
}
  return nil
}

func (p *HostAddress)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = &v
}
  return nil
}

func (p *HostAddress) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostAddress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostAddress) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHost() {
    if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
    if err := oprot.WriteString(string(*p.Host)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  }
  return err
}

func (p *HostAddress) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPort() {
    if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Port)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  }
  return err
}

func (p *HostAddress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostAddress(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - Protocol
//  - Deprecated
type HostProtocol struct {
  // unused fields # 1 to 9
  HostAddresses []*HostAddress `thrift:"hostAddresses,10" db:"hostAddresses" json:"hostAddresses,omitempty"`
  // unused fields # 11 to 19
  Protocol *Protocol `thrift:"protocol,20" db:"protocol" json:"protocol,omitempty"`
  // unused fields # 21 to 29
  Deprecated *bool `thrift:"deprecated,30" db:"deprecated" json:"deprecated,omitempty"`
}

func NewHostProtocol() *HostProtocol {
  return &HostProtocol{}
}

var HostProtocol_HostAddresses_DEFAULT []*HostAddress

func (p *HostProtocol) GetHostAddresses() []*HostAddress {
  return p.HostAddresses
}
var HostProtocol_Protocol_DEFAULT Protocol
func (p *HostProtocol) GetProtocol() Protocol {
  if !p.IsSetProtocol() {
    return HostProtocol_Protocol_DEFAULT
  }
return *p.Protocol
}
var HostProtocol_Deprecated_DEFAULT bool
func (p *HostProtocol) GetDeprecated() bool {
  if !p.IsSetDeprecated() {
    return HostProtocol_Deprecated_DEFAULT
  }
return *p.Deprecated
}
func (p *HostProtocol) IsSetHostAddresses() bool {
  return p.HostAddresses != nil
}

func (p *HostProtocol) IsSetProtocol() bool {
  return p.Protocol != nil
}

func (p *HostProtocol) IsSetDeprecated() bool {
  return p.Deprecated != nil
}

func (p *HostProtocol) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HostProtocol)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostAddress, 0, size)
  p.HostAddresses =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &HostAddress{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.HostAddresses = append(p.HostAddresses, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HostProtocol)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := Protocol(v)
  p.Protocol = &temp
}
  return nil
}

func (p *HostProtocol)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.Deprecated = &v
}
  return nil
}

func (p *HostProtocol) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostProtocol"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostProtocol) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAddresses() {
    if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostAddresses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostAddresses: ", p), err) }
  }
  return err
}

func (p *HostProtocol) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetProtocol() {
    if err := oprot.WriteFieldBegin("protocol", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:protocol: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Protocol)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.protocol (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:protocol: ", p), err) }
  }
  return err
}

func (p *HostProtocol) writeField30(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeprecated() {
    if err := oprot.WriteFieldBegin("deprecated", thrift.BOOL, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:deprecated: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Deprecated)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deprecated (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:deprecated: ", p), err) }
  }
  return err
}

func (p *HostProtocol) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostProtocol(%+v)", *p)
}

// Attributes:
//  - Path
type ReadDestinationHostsRequest struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
}

func NewReadDestinationHostsRequest() *ReadDestinationHostsRequest {
  return &ReadDestinationHostsRequest{}
}

var ReadDestinationHostsRequest_Path_DEFAULT string
func (p *ReadDestinationHostsRequest) GetPath() string {
  if !p.IsSetPath() {
    return ReadDestinationHostsRequest_Path_DEFAULT
  }
return *p.Path
}
func (p *ReadDestinationHostsRequest) IsSetPath() bool {
  return p.Path != nil
}

func (p *ReadDestinationHostsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadDestinationHostsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *ReadDestinationHostsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadDestinationHostsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadDestinationHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *ReadDestinationHostsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadDestinationHostsRequest(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - HostProtocols
type ReadDestinationHostsResult_ struct {
  HostAddresses []*HostAddress `thrift:"hostAddresses,1" db:"hostAddresses" json:"hostAddresses,omitempty"`
  // unused fields # 2 to 9
  HostProtocols []*HostProtocol `thrift:"hostProtocols,10" db:"hostProtocols" json:"hostProtocols,omitempty"`
}

func NewReadDestinationHostsResult_() *ReadDestinationHostsResult_ {
  return &ReadDestinationHostsResult_{}
}

var ReadDestinationHostsResult__HostAddresses_DEFAULT []*HostAddress

func (p *ReadDestinationHostsResult_) GetHostAddresses() []*HostAddress {
  return p.HostAddresses
}
var ReadDestinationHostsResult__HostProtocols_DEFAULT []*HostProtocol

func (p *ReadDestinationHostsResult_) GetHostProtocols() []*HostProtocol {
  return p.HostProtocols
}
func (p *ReadDestinationHostsResult_) IsSetHostAddresses() bool {
  return p.HostAddresses != nil
}

func (p *ReadDestinationHostsResult_) IsSetHostProtocols() bool {
  return p.HostProtocols != nil
}

func (p *ReadDestinationHostsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadDestinationHostsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostAddress, 0, size)
  p.HostAddresses =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &HostAddress{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.HostAddresses = append(p.HostAddresses, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadDestinationHostsResult_)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostProtocol, 0, size)
  p.HostProtocols =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &HostProtocol{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.HostProtocols = append(p.HostProtocols, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadDestinationHostsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadDestinationHostsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadDestinationHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAddresses() {
    if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostAddresses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddresses: ", p), err) }
  }
  return err
}

func (p *ReadDestinationHostsResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostProtocols() {
    if err := oprot.WriteFieldBegin("hostProtocols", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostProtocols: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostProtocols)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostProtocols {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostProtocols: ", p), err) }
  }
  return err
}

func (p *ReadDestinationHostsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadDestinationHostsResult_(%+v)", *p)
}

// Attributes:
//  - Path
//  - SchemaVersion
type ReadPublisherOptionsRequest struct {
  Path *string `thrift:"path,1" db:"path" json:"path,omitempty"`
  SchemaVersion *int32 `thrift:"schema_version,2" db:"schema_version" json:"schema_version,omitempty"`
}

func NewReadPublisherOptionsRequest() *ReadPublisherOptionsRequest {
  return &ReadPublisherOptionsRequest{}
}

var ReadPublisherOptionsRequest_Path_DEFAULT string
func (p *ReadPublisherOptionsRequest) GetPath() string {
  if !p.IsSetPath() {
    return ReadPublisherOptionsRequest_Path_DEFAULT
  }
return *p.Path
}
var ReadPublisherOptionsRequest_SchemaVersion_DEFAULT int32
func (p *ReadPublisherOptionsRequest) GetSchemaVersion() int32 {
  if !p.IsSetSchemaVersion() {
    return ReadPublisherOptionsRequest_SchemaVersion_DEFAULT
  }
return *p.SchemaVersion
}
func (p *ReadPublisherOptionsRequest) IsSetPath() bool {
  return p.Path != nil
}

func (p *ReadPublisherOptionsRequest) IsSetSchemaVersion() bool {
  return p.SchemaVersion != nil
}

func (p *ReadPublisherOptionsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadPublisherOptionsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = &v
}
  return nil
}

func (p *ReadPublisherOptionsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SchemaVersion = &v
}
  return nil
}

func (p *ReadPublisherOptionsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadPublisherOptionsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadPublisherOptionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPath() {
    if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
    if err := oprot.WriteString(string(*p.Path)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  }
  return err
}

func (p *ReadPublisherOptionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaVersion() {
    if err := oprot.WriteFieldBegin("schema_version", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema_version: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SchemaVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.schema_version (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema_version: ", p), err) }
  }
  return err
}

func (p *ReadPublisherOptionsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadPublisherOptionsRequest(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - HostProtocols
//  - ChecksumOption
//  - SchemaInfo
type ReadPublisherOptionsResult_ struct {
  HostAddresses []*HostAddress `thrift:"hostAddresses,1" db:"hostAddresses" json:"hostAddresses,omitempty"`
  // unused fields # 2 to 9
  HostProtocols []*HostProtocol `thrift:"hostProtocols,10" db:"hostProtocols" json:"hostProtocols,omitempty"`
  // unused fields # 11 to 19
  ChecksumOption *ChecksumOption `thrift:"checksumOption,20" db:"checksumOption" json:"checksumOption,omitempty"`
  // unused fields # 21 to 30
  SchemaInfo *SchemaInfo `thrift:"schemaInfo,31" db:"schemaInfo" json:"schemaInfo,omitempty"`
}

func NewReadPublisherOptionsResult_() *ReadPublisherOptionsResult_ {
  return &ReadPublisherOptionsResult_{}
}

var ReadPublisherOptionsResult__HostAddresses_DEFAULT []*HostAddress

func (p *ReadPublisherOptionsResult_) GetHostAddresses() []*HostAddress {
  return p.HostAddresses
}
var ReadPublisherOptionsResult__HostProtocols_DEFAULT []*HostProtocol

func (p *ReadPublisherOptionsResult_) GetHostProtocols() []*HostProtocol {
  return p.HostProtocols
}
var ReadPublisherOptionsResult__ChecksumOption_DEFAULT ChecksumOption
func (p *ReadPublisherOptionsResult_) GetChecksumOption() ChecksumOption {
  if !p.IsSetChecksumOption() {
    return ReadPublisherOptionsResult__ChecksumOption_DEFAULT
  }
return *p.ChecksumOption
}
var ReadPublisherOptionsResult__SchemaInfo_DEFAULT *SchemaInfo
func (p *ReadPublisherOptionsResult_) GetSchemaInfo() *SchemaInfo {
  if !p.IsSetSchemaInfo() {
    return ReadPublisherOptionsResult__SchemaInfo_DEFAULT
  }
return p.SchemaInfo
}
func (p *ReadPublisherOptionsResult_) IsSetHostAddresses() bool {
  return p.HostAddresses != nil
}

func (p *ReadPublisherOptionsResult_) IsSetHostProtocols() bool {
  return p.HostProtocols != nil
}

func (p *ReadPublisherOptionsResult_) IsSetChecksumOption() bool {
  return p.ChecksumOption != nil
}

func (p *ReadPublisherOptionsResult_) IsSetSchemaInfo() bool {
  return p.SchemaInfo != nil
}

func (p *ReadPublisherOptionsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 31:
      if err := p.ReadField31(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadPublisherOptionsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostAddress, 0, size)
  p.HostAddresses =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &HostAddress{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.HostAddresses = append(p.HostAddresses, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadPublisherOptionsResult_)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostProtocol, 0, size)
  p.HostProtocols =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &HostProtocol{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.HostProtocols = append(p.HostProtocols, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadPublisherOptionsResult_)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := ChecksumOption(v)
  p.ChecksumOption = &temp
}
  return nil
}

func (p *ReadPublisherOptionsResult_)  ReadField31(iprot thrift.TProtocol) error {
  p.SchemaInfo = &SchemaInfo{}
  if err := p.SchemaInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaInfo), err)
  }
  return nil
}

func (p *ReadPublisherOptionsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadPublisherOptionsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadPublisherOptionsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAddresses() {
    if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostAddresses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddresses: ", p), err) }
  }
  return err
}

func (p *ReadPublisherOptionsResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostProtocols() {
    if err := oprot.WriteFieldBegin("hostProtocols", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostProtocols: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostProtocols)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostProtocols {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostProtocols: ", p), err) }
  }
  return err
}

func (p *ReadPublisherOptionsResult_) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetChecksumOption() {
    if err := oprot.WriteFieldBegin("checksumOption", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:checksumOption: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ChecksumOption)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.checksumOption (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:checksumOption: ", p), err) }
  }
  return err
}

func (p *ReadPublisherOptionsResult_) writeField31(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaInfo() {
    if err := oprot.WriteFieldBegin("schemaInfo", thrift.STRUCT, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:schemaInfo: ", p), err) }
    if err := p.SchemaInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:schemaInfo: ", p), err) }
  }
  return err
}

func (p *ReadPublisherOptionsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadPublisherOptionsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
type ReadConsumerGroupHostsRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
}

func NewReadConsumerGroupHostsRequest() *ReadConsumerGroupHostsRequest {
  return &ReadConsumerGroupHostsRequest{}
}

var ReadConsumerGroupHostsRequest_DestinationPath_DEFAULT string
func (p *ReadConsumerGroupHostsRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return ReadConsumerGroupHostsRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var ReadConsumerGroupHostsRequest_ConsumerGroupName_DEFAULT string
func (p *ReadConsumerGroupHostsRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return ReadConsumerGroupHostsRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
func (p *ReadConsumerGroupHostsRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *ReadConsumerGroupHostsRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *ReadConsumerGroupHostsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupHostsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *ReadConsumerGroupHostsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *ReadConsumerGroupHostsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupHostsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupHostsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupHostsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupHostsRequest(%+v)", *p)
}

// Attributes:
//  - HostAddresses
//  - HostProtocols
type ReadConsumerGroupHostsResult_ struct {
  HostAddresses []*HostAddress `thrift:"hostAddresses,1" db:"hostAddresses" json:"hostAddresses,omitempty"`
  // unused fields # 2 to 9
  HostProtocols []*HostProtocol `thrift:"hostProtocols,10" db:"hostProtocols" json:"hostProtocols,omitempty"`
}

func NewReadConsumerGroupHostsResult_() *ReadConsumerGroupHostsResult_ {
  return &ReadConsumerGroupHostsResult_{}
}

var ReadConsumerGroupHostsResult__HostAddresses_DEFAULT []*HostAddress

func (p *ReadConsumerGroupHostsResult_) GetHostAddresses() []*HostAddress {
  return p.HostAddresses
}
var ReadConsumerGroupHostsResult__HostProtocols_DEFAULT []*HostProtocol

func (p *ReadConsumerGroupHostsResult_) GetHostProtocols() []*HostProtocol {
  return p.HostProtocols
}
func (p *ReadConsumerGroupHostsResult_) IsSetHostAddresses() bool {
  return p.HostAddresses != nil
}

func (p *ReadConsumerGroupHostsResult_) IsSetHostProtocols() bool {
  return p.HostProtocols != nil
}

func (p *ReadConsumerGroupHostsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadConsumerGroupHostsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostAddress, 0, size)
  p.HostAddresses =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &HostAddress{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.HostAddresses = append(p.HostAddresses, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupHostsResult_)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HostProtocol, 0, size)
  p.HostProtocols =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &HostProtocol{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.HostProtocols = append(p.HostProtocols, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReadConsumerGroupHostsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadConsumerGroupHostsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadConsumerGroupHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostAddresses() {
    if err := oprot.WriteFieldBegin("hostAddresses", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostAddresses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostAddresses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostAddresses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostAddresses: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupHostsResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostProtocols() {
    if err := oprot.WriteFieldBegin("hostProtocols", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hostProtocols: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HostProtocols)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostProtocols {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hostProtocols: ", p), err) }
  }
  return err
}

func (p *ReadConsumerGroupHostsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadConsumerGroupHostsResult_(%+v)", *p)
}

// Attributes:
//  - ID
//  - DelayMessageInSeconds
//  - Data
//  - UserContext
//  - PreviousMessageId
//  - Crc32IEEEDataChecksum
//  - Md5DataChecksum
//  - SchemaVersion
type PutMessage struct {
  ID *string `thrift:"id,1" db:"id" json:"id,omitempty"`
  DelayMessageInSeconds *int32 `thrift:"delayMessageInSeconds,2" db:"delayMessageInSeconds" json:"delayMessageInSeconds,omitempty"`
  Data []byte `thrift:"data,3" db:"data" json:"data,omitempty"`
  UserContext map[string]string `thrift:"userContext,4" db:"userContext" json:"userContext,omitempty"`
  PreviousMessageId *string `thrift:"previousMessageId,5" db:"previousMessageId" json:"previousMessageId,omitempty"`
  Crc32IEEEDataChecksum *int64 `thrift:"crc32IEEEDataChecksum,6" db:"crc32IEEEDataChecksum" json:"crc32IEEEDataChecksum,omitempty"`
  // unused field # 7
  Md5DataChecksum []byte `thrift:"md5DataChecksum,8" db:"md5DataChecksum" json:"md5DataChecksum,omitempty"`
  // unused field # 9
  SchemaVersion *int32 `thrift:"schemaVersion,10" db:"schemaVersion" json:"schemaVersion,omitempty"`
}

func NewPutMessage() *PutMessage {
  return &PutMessage{}
}

var PutMessage_ID_DEFAULT string
func (p *PutMessage) GetID() string {
  if !p.IsSetID() {
    return PutMessage_ID_DEFAULT
  }
return *p.ID
}
var PutMessage_DelayMessageInSeconds_DEFAULT int32
func (p *PutMessage) GetDelayMessageInSeconds() int32 {
  if !p.IsSetDelayMessageInSeconds() {
    return PutMessage_DelayMessageInSeconds_DEFAULT
  }
return *p.DelayMessageInSeconds
}
var PutMessage_Data_DEFAULT []byte

func (p *PutMessage) GetData() []byte {
  return p.Data
}
var PutMessage_UserContext_DEFAULT map[string]string

func (p *PutMessage) GetUserContext() map[string]string {
  return p.UserContext
}
var PutMessage_PreviousMessageId_DEFAULT string
func (p *PutMessage) GetPreviousMessageId() string {
  if !p.IsSetPreviousMessageId() {
    return PutMessage_PreviousMessageId_DEFAULT
  }
return *p.PreviousMessageId
}
var PutMessage_Crc32IEEEDataChecksum_DEFAULT int64
func (p *PutMessage) GetCrc32IEEEDataChecksum() int64 {
  if !p.IsSetCrc32IEEEDataChecksum() {
    return PutMessage_Crc32IEEEDataChecksum_DEFAULT
  }
return *p.Crc32IEEEDataChecksum
}
var PutMessage_Md5DataChecksum_DEFAULT []byte

func (p *PutMessage) GetMd5DataChecksum() []byte {
  return p.Md5DataChecksum
}
var PutMessage_SchemaVersion_DEFAULT int32
func (p *PutMessage) GetSchemaVersion() int32 {
  if !p.IsSetSchemaVersion() {
    return PutMessage_SchemaVersion_DEFAULT
  }
return *p.SchemaVersion
}
func (p *PutMessage) IsSetID() bool {
  return p.ID != nil
}

func (p *PutMessage) IsSetDelayMessageInSeconds() bool {
  return p.DelayMessageInSeconds != nil
}

func (p *PutMessage) IsSetData() bool {
  return p.Data != nil
}

func (p *PutMessage) IsSetUserContext() bool {
  return p.UserContext != nil
}

func (p *PutMessage) IsSetPreviousMessageId() bool {
  return p.PreviousMessageId != nil
}

func (p *PutMessage) IsSetCrc32IEEEDataChecksum() bool {
  return p.Crc32IEEEDataChecksum != nil
}

func (p *PutMessage) IsSetMd5DataChecksum() bool {
  return p.Md5DataChecksum != nil
}

func (p *PutMessage) IsSetSchemaVersion() bool {
  return p.SchemaVersion != nil
}

func (p *PutMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PutMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *PutMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DelayMessageInSeconds = &v
}
  return nil
}

func (p *PutMessage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *PutMessage)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.UserContext =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
var _val14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val14 = v
}
    p.UserContext[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PutMessage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PreviousMessageId = &v
}
  return nil
}

func (p *PutMessage)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Crc32IEEEDataChecksum = &v
}
  return nil
}

func (p *PutMessage)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Md5DataChecksum = v
}
  return nil
}

func (p *PutMessage)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.SchemaVersion = &v
}
  return nil
}

func (p *PutMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDelayMessageInSeconds() {
    if err := oprot.WriteFieldBegin("delayMessageInSeconds", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delayMessageInSeconds: ", p), err) }
    if err := oprot.WriteI32(int32(*p.DelayMessageInSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.delayMessageInSeconds (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delayMessageInSeconds: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserContext() {
    if err := oprot.WriteFieldBegin("userContext", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userContext: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserContext)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.UserContext {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userContext: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetPreviousMessageId() {
    if err := oprot.WriteFieldBegin("previousMessageId", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:previousMessageId: ", p), err) }
    if err := oprot.WriteString(string(*p.PreviousMessageId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.previousMessageId (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:previousMessageId: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCrc32IEEEDataChecksum() {
    if err := oprot.WriteFieldBegin("crc32IEEEDataChecksum", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:crc32IEEEDataChecksum: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Crc32IEEEDataChecksum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.crc32IEEEDataChecksum (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:crc32IEEEDataChecksum: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetMd5DataChecksum() {
    if err := oprot.WriteFieldBegin("md5DataChecksum", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:md5DataChecksum: ", p), err) }
    if err := oprot.WriteBinary(p.Md5DataChecksum); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.md5DataChecksum (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:md5DataChecksum: ", p), err) }
  }
  return err
}

func (p *PutMessage) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaVersion() {
    if err := oprot.WriteFieldBegin("schemaVersion", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:schemaVersion: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SchemaVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.schemaVersion (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:schemaVersion: ", p), err) }
  }
  return err
}

func (p *PutMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutMessage(%+v)", *p)
}

// Attributes:
//  - ID
//  - Status
//  - Message
//  - Receipt
//  - UserContext
//  - Lsn
//  - Address
type PutMessageAck struct {
  ID *string `thrift:"id,1" db:"id" json:"id,omitempty"`
  Status *Status `thrift:"status,2" db:"status" json:"status,omitempty"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
  Receipt *string `thrift:"receipt,4" db:"receipt" json:"receipt,omitempty"`
  UserContext map[string]string `thrift:"userContext,5" db:"userContext" json:"userContext,omitempty"`
  Lsn *int64 `thrift:"lsn,6" db:"lsn" json:"lsn,omitempty"`
  Address *int64 `thrift:"address,7" db:"address" json:"address,omitempty"`
}

func NewPutMessageAck() *PutMessageAck {
  return &PutMessageAck{}
}

var PutMessageAck_ID_DEFAULT string
func (p *PutMessageAck) GetID() string {
  if !p.IsSetID() {
    return PutMessageAck_ID_DEFAULT
  }
return *p.ID
}
var PutMessageAck_Status_DEFAULT Status
func (p *PutMessageAck) GetStatus() Status {
  if !p.IsSetStatus() {
    return PutMessageAck_Status_DEFAULT
  }
return *p.Status
}
var PutMessageAck_Message_DEFAULT string
func (p *PutMessageAck) GetMessage() string {
  if !p.IsSetMessage() {
    return PutMessageAck_Message_DEFAULT
  }
return *p.Message
}
var PutMessageAck_Receipt_DEFAULT string
func (p *PutMessageAck) GetReceipt() string {
  if !p.IsSetReceipt() {
    return PutMessageAck_Receipt_DEFAULT
  }
return *p.Receipt
}
var PutMessageAck_UserContext_DEFAULT map[string]string

func (p *PutMessageAck) GetUserContext() map[string]string {
  return p.UserContext
}
var PutMessageAck_Lsn_DEFAULT int64
func (p *PutMessageAck) GetLsn() int64 {
  if !p.IsSetLsn() {
    return PutMessageAck_Lsn_DEFAULT
  }
return *p.Lsn
}
var PutMessageAck_Address_DEFAULT int64
func (p *PutMessageAck) GetAddress() int64 {
  if !p.IsSetAddress() {
    return PutMessageAck_Address_DEFAULT
  }
return *p.Address
}
func (p *PutMessageAck) IsSetID() bool {
  return p.ID != nil
}

func (p *PutMessageAck) IsSetStatus() bool {
  return p.Status != nil
}

func (p *PutMessageAck) IsSetMessage() bool {
  return p.Message != nil
}

func (p *PutMessageAck) IsSetReceipt() bool {
  return p.Receipt != nil
}

func (p *PutMessageAck) IsSetUserContext() bool {
  return p.UserContext != nil
}

func (p *PutMessageAck) IsSetLsn() bool {
  return p.Lsn != nil
}

func (p *PutMessageAck) IsSetAddress() bool {
  return p.Address != nil
}

func (p *PutMessageAck) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PutMessageAck)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *PutMessageAck)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Status(v)
  p.Status = &temp
}
  return nil
}

func (p *PutMessageAck)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *PutMessageAck)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Receipt = &v
}
  return nil
}

func (p *PutMessageAck)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.UserContext =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.UserContext[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PutMessageAck)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Lsn = &v
}
  return nil
}

func (p *PutMessageAck)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Address = &v
}
  return nil
}

func (p *PutMessageAck) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutMessageAck"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutMessageAck) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetReceipt() {
    if err := oprot.WriteFieldBegin("receipt", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:receipt: ", p), err) }
    if err := oprot.WriteString(string(*p.Receipt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.receipt (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:receipt: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserContext() {
    if err := oprot.WriteFieldBegin("userContext", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userContext: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.UserContext)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.UserContext {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userContext: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetLsn() {
    if err := oprot.WriteFieldBegin("lsn", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lsn: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Lsn)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lsn (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lsn: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin("address", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:address: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Address)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.address (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:address: ", p), err) }
  }
  return err
}

func (p *PutMessageAck) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutMessageAck(%+v)", *p)
}

// Attributes:
//  - Message
//  - AckIds
//  - NackIds
type InvalidAckIdError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
  AckIds []string `thrift:"ackIds,2" db:"ackIds" json:"ackIds,omitempty"`
  NackIds []string `thrift:"nackIds,3" db:"nackIds" json:"nackIds,omitempty"`
}

func NewInvalidAckIdError() *InvalidAckIdError {
  return &InvalidAckIdError{}
}


func (p *InvalidAckIdError) GetMessage() string {
  return p.Message
}
var InvalidAckIdError_AckIds_DEFAULT []string

func (p *InvalidAckIdError) GetAckIds() []string {
  return p.AckIds
}
var InvalidAckIdError_NackIds_DEFAULT []string

func (p *InvalidAckIdError) GetNackIds() []string {
  return p.NackIds
}
func (p *InvalidAckIdError) IsSetAckIds() bool {
  return p.AckIds != nil
}

func (p *InvalidAckIdError) IsSetNackIds() bool {
  return p.NackIds != nil
}

func (p *InvalidAckIdError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *InvalidAckIdError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidAckIdError)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AckIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.AckIds = append(p.AckIds, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *InvalidAckIdError)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.NackIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.NackIds = append(p.NackIds, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *InvalidAckIdError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidAckIdError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidAckIdError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidAckIdError) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckIds() {
    if err := oprot.WriteFieldBegin("ackIds", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ackIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.AckIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AckIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ackIds: ", p), err) }
  }
  return err
}

func (p *InvalidAckIdError) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNackIds() {
    if err := oprot.WriteFieldBegin("nackIds", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nackIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.NackIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.NackIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nackIds: ", p), err) }
  }
  return err
}

func (p *InvalidAckIdError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidAckIdError(%+v)", *p)
}

func (p *InvalidAckIdError) Error() string {
  return p.String()
}

// Attributes:
//  - EnqueueTimeUtc
//  - AckId
//  - Payload
//  - Lsn
//  - Address
type ConsumerMessage struct {
  EnqueueTimeUtc *int64 `thrift:"enqueueTimeUtc,1" db:"enqueueTimeUtc" json:"enqueueTimeUtc,omitempty"`
  AckId *string `thrift:"ackId,2" db:"ackId" json:"ackId,omitempty"`
  Payload *PutMessage `thrift:"payload,3" db:"payload" json:"payload,omitempty"`
  Lsn *int64 `thrift:"lsn,4" db:"lsn" json:"lsn,omitempty"`
  Address *int64 `thrift:"address,5" db:"address" json:"address,omitempty"`
}

func NewConsumerMessage() *ConsumerMessage {
  return &ConsumerMessage{}
}

var ConsumerMessage_EnqueueTimeUtc_DEFAULT int64
func (p *ConsumerMessage) GetEnqueueTimeUtc() int64 {
  if !p.IsSetEnqueueTimeUtc() {
    return ConsumerMessage_EnqueueTimeUtc_DEFAULT
  }
return *p.EnqueueTimeUtc
}
var ConsumerMessage_AckId_DEFAULT string
func (p *ConsumerMessage) GetAckId() string {
  if !p.IsSetAckId() {
    return ConsumerMessage_AckId_DEFAULT
  }
return *p.AckId
}
var ConsumerMessage_Payload_DEFAULT *PutMessage
func (p *ConsumerMessage) GetPayload() *PutMessage {
  if !p.IsSetPayload() {
    return ConsumerMessage_Payload_DEFAULT
  }
return p.Payload
}
var ConsumerMessage_Lsn_DEFAULT int64
func (p *ConsumerMessage) GetLsn() int64 {
  if !p.IsSetLsn() {
    return ConsumerMessage_Lsn_DEFAULT
  }
return *p.Lsn
}
var ConsumerMessage_Address_DEFAULT int64
func (p *ConsumerMessage) GetAddress() int64 {
  if !p.IsSetAddress() {
    return ConsumerMessage_Address_DEFAULT
  }
return *p.Address
}
func (p *ConsumerMessage) IsSetEnqueueTimeUtc() bool {
  return p.EnqueueTimeUtc != nil
}

func (p *ConsumerMessage) IsSetAckId() bool {
  return p.AckId != nil
}

func (p *ConsumerMessage) IsSetPayload() bool {
  return p.Payload != nil
}

func (p *ConsumerMessage) IsSetLsn() bool {
  return p.Lsn != nil
}

func (p *ConsumerMessage) IsSetAddress() bool {
  return p.Address != nil
}

func (p *ConsumerMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EnqueueTimeUtc = &v
}
  return nil
}

func (p *ConsumerMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AckId = &v
}
  return nil
}

func (p *ConsumerMessage)  ReadField3(iprot thrift.TProtocol) error {
  p.Payload = &PutMessage{}
  if err := p.Payload.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Payload), err)
  }
  return nil
}

func (p *ConsumerMessage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Lsn = &v
}
  return nil
}

func (p *ConsumerMessage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Address = &v
}
  return nil
}

func (p *ConsumerMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnqueueTimeUtc() {
    if err := oprot.WriteFieldBegin("enqueueTimeUtc", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enqueueTimeUtc: ", p), err) }
    if err := oprot.WriteI64(int64(*p.EnqueueTimeUtc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.enqueueTimeUtc (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enqueueTimeUtc: ", p), err) }
  }
  return err
}

func (p *ConsumerMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckId() {
    if err := oprot.WriteFieldBegin("ackId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ackId: ", p), err) }
    if err := oprot.WriteString(string(*p.AckId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ackId: ", p), err) }
  }
  return err
}

func (p *ConsumerMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPayload() {
    if err := oprot.WriteFieldBegin("payload", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:payload: ", p), err) }
    if err := p.Payload.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Payload), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:payload: ", p), err) }
  }
  return err
}

func (p *ConsumerMessage) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetLsn() {
    if err := oprot.WriteFieldBegin("lsn", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lsn: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Lsn)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lsn (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lsn: ", p), err) }
  }
  return err
}

func (p *ConsumerMessage) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddress() {
    if err := oprot.WriteFieldBegin("address", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:address: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Address)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.address (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:address: ", p), err) }
  }
  return err
}

func (p *ConsumerMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerMessage(%+v)", *p)
}

// Attributes:
//  - AckIds
//  - NackIds
type AckMessagesRequest struct {
  AckIds []string `thrift:"ackIds,1" db:"ackIds" json:"ackIds,omitempty"`
  NackIds []string `thrift:"nackIds,2" db:"nackIds" json:"nackIds,omitempty"`
}

func NewAckMessagesRequest() *AckMessagesRequest {
  return &AckMessagesRequest{}
}

var AckMessagesRequest_AckIds_DEFAULT []string

func (p *AckMessagesRequest) GetAckIds() []string {
  return p.AckIds
}
var AckMessagesRequest_NackIds_DEFAULT []string

func (p *AckMessagesRequest) GetNackIds() []string {
  return p.NackIds
}
func (p *AckMessagesRequest) IsSetAckIds() bool {
  return p.AckIds != nil
}

func (p *AckMessagesRequest) IsSetNackIds() bool {
  return p.NackIds != nil
}

func (p *AckMessagesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AckMessagesRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.AckIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.AckIds = append(p.AckIds, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AckMessagesRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.NackIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.NackIds = append(p.NackIds, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AckMessagesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AckMessagesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AckMessagesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAckIds() {
    if err := oprot.WriteFieldBegin("ackIds", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ackIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.AckIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.AckIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ackIds: ", p), err) }
  }
  return err
}

func (p *AckMessagesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNackIds() {
    if err := oprot.WriteFieldBegin("nackIds", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nackIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.NackIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.NackIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nackIds: ", p), err) }
  }
  return err
}

func (p *AckMessagesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AckMessagesRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - AddressInclusive
type SetConsumedMessagesRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  AddressInclusive *int64 `thrift:"addressInclusive,3" db:"addressInclusive" json:"addressInclusive,omitempty"`
}

func NewSetConsumedMessagesRequest() *SetConsumedMessagesRequest {
  return &SetConsumedMessagesRequest{}
}

var SetConsumedMessagesRequest_DestinationPath_DEFAULT string
func (p *SetConsumedMessagesRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return SetConsumedMessagesRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var SetConsumedMessagesRequest_ConsumerGroupName_DEFAULT string
func (p *SetConsumedMessagesRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return SetConsumedMessagesRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var SetConsumedMessagesRequest_AddressInclusive_DEFAULT int64
func (p *SetConsumedMessagesRequest) GetAddressInclusive() int64 {
  if !p.IsSetAddressInclusive() {
    return SetConsumedMessagesRequest_AddressInclusive_DEFAULT
  }
return *p.AddressInclusive
}
func (p *SetConsumedMessagesRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *SetConsumedMessagesRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *SetConsumedMessagesRequest) IsSetAddressInclusive() bool {
  return p.AddressInclusive != nil
}

func (p *SetConsumedMessagesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetConsumedMessagesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *SetConsumedMessagesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *SetConsumedMessagesRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AddressInclusive = &v
}
  return nil
}

func (p *SetConsumedMessagesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetConsumedMessagesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetConsumedMessagesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *SetConsumedMessagesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *SetConsumedMessagesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAddressInclusive() {
    if err := oprot.WriteFieldBegin("addressInclusive", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:addressInclusive: ", p), err) }
    if err := oprot.WriteI64(int64(*p.AddressInclusive)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.addressInclusive (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:addressInclusive: ", p), err) }
  }
  return err
}

func (p *SetConsumedMessagesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetConsumedMessagesRequest(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - Messages
type PutMessageBatchRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  Messages []*PutMessage `thrift:"messages,2" db:"messages" json:"messages,omitempty"`
}

func NewPutMessageBatchRequest() *PutMessageBatchRequest {
  return &PutMessageBatchRequest{}
}

var PutMessageBatchRequest_DestinationPath_DEFAULT string
func (p *PutMessageBatchRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return PutMessageBatchRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var PutMessageBatchRequest_Messages_DEFAULT []*PutMessage

func (p *PutMessageBatchRequest) GetMessages() []*PutMessage {
  return p.Messages
}
func (p *PutMessageBatchRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *PutMessageBatchRequest) IsSetMessages() bool {
  return p.Messages != nil
}

func (p *PutMessageBatchRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PutMessageBatchRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *PutMessageBatchRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PutMessage, 0, size)
  p.Messages =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &PutMessage{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.Messages = append(p.Messages, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PutMessageBatchRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutMessageBatchRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *PutMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessages() {
    if err := oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messages: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Messages {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messages: ", p), err) }
  }
  return err
}

func (p *PutMessageBatchRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutMessageBatchRequest(%+v)", *p)
}

// Attributes:
//  - FailedMessages
//  - SuccessMessages
type PutMessageBatchResult_ struct {
  FailedMessages []*PutMessageAck `thrift:"failedMessages,1" db:"failedMessages" json:"failedMessages,omitempty"`
  SuccessMessages []*PutMessageAck `thrift:"successMessages,2" db:"successMessages" json:"successMessages,omitempty"`
}

func NewPutMessageBatchResult_() *PutMessageBatchResult_ {
  return &PutMessageBatchResult_{}
}

var PutMessageBatchResult__FailedMessages_DEFAULT []*PutMessageAck

func (p *PutMessageBatchResult_) GetFailedMessages() []*PutMessageAck {
  return p.FailedMessages
}
var PutMessageBatchResult__SuccessMessages_DEFAULT []*PutMessageAck

func (p *PutMessageBatchResult_) GetSuccessMessages() []*PutMessageAck {
  return p.SuccessMessages
}
func (p *PutMessageBatchResult_) IsSetFailedMessages() bool {
  return p.FailedMessages != nil
}

func (p *PutMessageBatchResult_) IsSetSuccessMessages() bool {
  return p.SuccessMessages != nil
}

func (p *PutMessageBatchResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PutMessageBatchResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PutMessageAck, 0, size)
  p.FailedMessages =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &PutMessageAck{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.FailedMessages = append(p.FailedMessages, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PutMessageBatchResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PutMessageAck, 0, size)
  p.SuccessMessages =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &PutMessageAck{}
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.SuccessMessages = append(p.SuccessMessages, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PutMessageBatchResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PutMessageBatchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PutMessageBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailedMessages() {
    if err := oprot.WriteFieldBegin("failedMessages", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failedMessages: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailedMessages)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FailedMessages {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failedMessages: ", p), err) }
  }
  return err
}

func (p *PutMessageBatchResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccessMessages() {
    if err := oprot.WriteFieldBegin("successMessages", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:successMessages: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SuccessMessages)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SuccessMessages {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:successMessages: ", p), err) }
  }
  return err
}

func (p *PutMessageBatchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PutMessageBatchResult_(%+v)", *p)
}

// Attributes:
//  - DestinationPath
//  - ConsumerGroupName
//  - MaxNumberOfMessages
//  - ReceiveTimeout
type ReceiveMessageBatchRequest struct {
  DestinationPath *string `thrift:"destinationPath,1" db:"destinationPath" json:"destinationPath,omitempty"`
  ConsumerGroupName *string `thrift:"consumerGroupName,2" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  MaxNumberOfMessages *int32 `thrift:"maxNumberOfMessages,3" db:"maxNumberOfMessages" json:"maxNumberOfMessages,omitempty"`
  ReceiveTimeout *int32 `thrift:"receiveTimeout,4" db:"receiveTimeout" json:"receiveTimeout,omitempty"`
}

func NewReceiveMessageBatchRequest() *ReceiveMessageBatchRequest {
  return &ReceiveMessageBatchRequest{}
}

var ReceiveMessageBatchRequest_DestinationPath_DEFAULT string
func (p *ReceiveMessageBatchRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return ReceiveMessageBatchRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
var ReceiveMessageBatchRequest_ConsumerGroupName_DEFAULT string
func (p *ReceiveMessageBatchRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return ReceiveMessageBatchRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var ReceiveMessageBatchRequest_MaxNumberOfMessages_DEFAULT int32
func (p *ReceiveMessageBatchRequest) GetMaxNumberOfMessages() int32 {
  if !p.IsSetMaxNumberOfMessages() {
    return ReceiveMessageBatchRequest_MaxNumberOfMessages_DEFAULT
  }
return *p.MaxNumberOfMessages
}
var ReceiveMessageBatchRequest_ReceiveTimeout_DEFAULT int32
func (p *ReceiveMessageBatchRequest) GetReceiveTimeout() int32 {
  if !p.IsSetReceiveTimeout() {
    return ReceiveMessageBatchRequest_ReceiveTimeout_DEFAULT
  }
return *p.ReceiveTimeout
}
func (p *ReceiveMessageBatchRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *ReceiveMessageBatchRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *ReceiveMessageBatchRequest) IsSetMaxNumberOfMessages() bool {
  return p.MaxNumberOfMessages != nil
}

func (p *ReceiveMessageBatchRequest) IsSetReceiveTimeout() bool {
  return p.ReceiveTimeout != nil
}

func (p *ReceiveMessageBatchRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReceiveMessageBatchRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *ReceiveMessageBatchRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *ReceiveMessageBatchRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNumberOfMessages = &v
}
  return nil
}

func (p *ReceiveMessageBatchRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReceiveTimeout = &v
}
  return nil
}

func (p *ReceiveMessageBatchRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReceiveMessageBatchRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReceiveMessageBatchRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationPath: ", p), err) }
  }
  return err
}

func (p *ReceiveMessageBatchRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *ReceiveMessageBatchRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxNumberOfMessages() {
    if err := oprot.WriteFieldBegin("maxNumberOfMessages", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNumberOfMessages: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxNumberOfMessages)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxNumberOfMessages (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNumberOfMessages: ", p), err) }
  }
  return err
}

func (p *ReceiveMessageBatchRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetReceiveTimeout() {
    if err := oprot.WriteFieldBegin("receiveTimeout", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:receiveTimeout: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReceiveTimeout)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.receiveTimeout (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:receiveTimeout: ", p), err) }
  }
  return err
}

func (p *ReceiveMessageBatchRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReceiveMessageBatchRequest(%+v)", *p)
}

// Attributes:
//  - Messages
type ReceiveMessageBatchResult_ struct {
  Messages []*ConsumerMessage `thrift:"messages,1" db:"messages" json:"messages,omitempty"`
}

func NewReceiveMessageBatchResult_() *ReceiveMessageBatchResult_ {
  return &ReceiveMessageBatchResult_{}
}

var ReceiveMessageBatchResult__Messages_DEFAULT []*ConsumerMessage

func (p *ReceiveMessageBatchResult_) GetMessages() []*ConsumerMessage {
  return p.Messages
}
func (p *ReceiveMessageBatchResult_) IsSetMessages() bool {
  return p.Messages != nil
}

func (p *ReceiveMessageBatchResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReceiveMessageBatchResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConsumerMessage, 0, size)
  p.Messages =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &ConsumerMessage{}
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Messages = append(p.Messages, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReceiveMessageBatchResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReceiveMessageBatchResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReceiveMessageBatchResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessages() {
    if err := oprot.WriteFieldBegin("messages", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messages: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Messages {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messages: ", p), err) }
  }
  return err
}

func (p *ReceiveMessageBatchResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReceiveMessageBatchResult_(%+v)", *p)
}

// Attributes:
//  - ConsumerGroupName
//  - DestinationPath
type GetQueueDepthInfoRequest struct {
  ConsumerGroupName *string `thrift:"consumerGroupName,1" db:"consumerGroupName" json:"consumerGroupName,omitempty"`
  DestinationPath *string `thrift:"destinationPath,2" db:"destinationPath" json:"destinationPath,omitempty"`
}

func NewGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
  return &GetQueueDepthInfoRequest{}
}

var GetQueueDepthInfoRequest_ConsumerGroupName_DEFAULT string
func (p *GetQueueDepthInfoRequest) GetConsumerGroupName() string {
  if !p.IsSetConsumerGroupName() {
    return GetQueueDepthInfoRequest_ConsumerGroupName_DEFAULT
  }
return *p.ConsumerGroupName
}
var GetQueueDepthInfoRequest_DestinationPath_DEFAULT string
func (p *GetQueueDepthInfoRequest) GetDestinationPath() string {
  if !p.IsSetDestinationPath() {
    return GetQueueDepthInfoRequest_DestinationPath_DEFAULT
  }
return *p.DestinationPath
}
func (p *GetQueueDepthInfoRequest) IsSetConsumerGroupName() bool {
  return p.ConsumerGroupName != nil
}

func (p *GetQueueDepthInfoRequest) IsSetDestinationPath() bool {
  return p.DestinationPath != nil
}

func (p *GetQueueDepthInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetQueueDepthInfoRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ConsumerGroupName = &v
}
  return nil
}

func (p *GetQueueDepthInfoRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DestinationPath = &v
}
  return nil
}

func (p *GetQueueDepthInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetQueueDepthInfoRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetQueueDepthInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupName() {
    if err := oprot.WriteFieldBegin("consumerGroupName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:consumerGroupName: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:consumerGroupName: ", p), err) }
  }
  return err
}

func (p *GetQueueDepthInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationPath() {
    if err := oprot.WriteFieldBegin("destinationPath", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:destinationPath: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationPath (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:destinationPath: ", p), err) }
  }
  return err
}

func (p *GetQueueDepthInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetQueueDepthInfoRequest(%+v)", *p)
}

// Attributes:
//  - Value
type GetQueueDepthInfoResult_ struct {
  Value *string `thrift:"value,1" db:"value" json:"value,omitempty"`
}

func NewGetQueueDepthInfoResult_() *GetQueueDepthInfoResult_ {
  return &GetQueueDepthInfoResult_{}
}

var GetQueueDepthInfoResult__Value_DEFAULT string
func (p *GetQueueDepthInfoResult_) GetValue() string {
  if !p.IsSetValue() {
    return GetQueueDepthInfoResult__Value_DEFAULT
  }
return *p.Value
}
func (p *GetQueueDepthInfoResult_) IsSetValue() bool {
  return p.Value != nil
}

func (p *GetQueueDepthInfoResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetQueueDepthInfoResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *GetQueueDepthInfoResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetQueueDepthInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetQueueDepthInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  }
  return err
}

func (p *GetQueueDepthInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetQueueDepthInfoResult_(%+v)", *p)
}

// Attributes:
//  - UpdateUUID
type ReconfigureInfo struct {
  UpdateUUID *string `thrift:"updateUUID,1" db:"updateUUID" json:"updateUUID,omitempty"`
}

func NewReconfigureInfo() *ReconfigureInfo {
  return &ReconfigureInfo{}
}

var ReconfigureInfo_UpdateUUID_DEFAULT string
func (p *ReconfigureInfo) GetUpdateUUID() string {
  if !p.IsSetUpdateUUID() {
    return ReconfigureInfo_UpdateUUID_DEFAULT
  }
return *p.UpdateUUID
}
func (p *ReconfigureInfo) IsSetUpdateUUID() bool {
  return p.UpdateUUID != nil
}

func (p *ReconfigureInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReconfigureInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UpdateUUID = &v
}
  return nil
}

func (p *ReconfigureInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReconfigureInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReconfigureInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateUUID() {
    if err := oprot.WriteFieldBegin("updateUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.UpdateUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateUUID: ", p), err) }
  }
  return err
}

func (p *ReconfigureInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReconfigureInfo(%+v)", *p)
}

// Attributes:
//  - Type
//  - Ack
//  - Reconfigure
type InputHostCommand struct {
  Type *InputHostCommandType `thrift:"type,1" db:"type" json:"type,omitempty"`
  Ack *PutMessageAck `thrift:"ack,2" db:"ack" json:"ack,omitempty"`
  Reconfigure *ReconfigureInfo `thrift:"reconfigure,3" db:"reconfigure" json:"reconfigure,omitempty"`
}

func NewInputHostCommand() *InputHostCommand {
  return &InputHostCommand{}
}

var InputHostCommand_Type_DEFAULT InputHostCommandType
func (p *InputHostCommand) GetType() InputHostCommandType {
  if !p.IsSetType() {
    return InputHostCommand_Type_DEFAULT
  }
return *p.Type
}
var InputHostCommand_Ack_DEFAULT *PutMessageAck
func (p *InputHostCommand) GetAck() *PutMessageAck {
  if !p.IsSetAck() {
    return InputHostCommand_Ack_DEFAULT
  }
return p.Ack
}
var InputHostCommand_Reconfigure_DEFAULT *ReconfigureInfo
func (p *InputHostCommand) GetReconfigure() *ReconfigureInfo {
  if !p.IsSetReconfigure() {
    return InputHostCommand_Reconfigure_DEFAULT
  }
return p.Reconfigure
}
func (p *InputHostCommand) IsSetType() bool {
  return p.Type != nil
}

func (p *InputHostCommand) IsSetAck() bool {
  return p.Ack != nil
}

func (p *InputHostCommand) IsSetReconfigure() bool {
  return p.Reconfigure != nil
}

func (p *InputHostCommand) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InputHostCommand)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := InputHostCommandType(v)
  p.Type = &temp
}
  return nil
}

func (p *InputHostCommand)  ReadField2(iprot thrift.TProtocol) error {
  p.Ack = &PutMessageAck{}
  if err := p.Ack.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ack), err)
  }
  return nil
}

func (p *InputHostCommand)  ReadField3(iprot thrift.TProtocol) error {
  p.Reconfigure = &ReconfigureInfo{}
  if err := p.Reconfigure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reconfigure), err)
  }
  return nil
}

func (p *InputHostCommand) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InputHostCommand"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InputHostCommand) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *InputHostCommand) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetAck() {
    if err := oprot.WriteFieldBegin("ack", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ack: ", p), err) }
    if err := p.Ack.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ack), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ack: ", p), err) }
  }
  return err
}

func (p *InputHostCommand) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReconfigure() {
    if err := oprot.WriteFieldBegin("reconfigure", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reconfigure: ", p), err) }
    if err := p.Reconfigure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reconfigure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reconfigure: ", p), err) }
  }
  return err
}

func (p *InputHostCommand) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InputHostCommand(%+v)", *p)
}

// Attributes:
//  - Type
//  - Message
//  - Reconfigure
type OutputHostCommand struct {
  Type *OutputHostCommandType `thrift:"type,1" db:"type" json:"type,omitempty"`
  Message *ConsumerMessage `thrift:"message,2" db:"message" json:"message,omitempty"`
  Reconfigure *ReconfigureInfo `thrift:"reconfigure,3" db:"reconfigure" json:"reconfigure,omitempty"`
}

func NewOutputHostCommand() *OutputHostCommand {
  return &OutputHostCommand{}
}

var OutputHostCommand_Type_DEFAULT OutputHostCommandType
func (p *OutputHostCommand) GetType() OutputHostCommandType {
  if !p.IsSetType() {
    return OutputHostCommand_Type_DEFAULT
  }
return *p.Type
}
var OutputHostCommand_Message_DEFAULT *ConsumerMessage
func (p *OutputHostCommand) GetMessage() *ConsumerMessage {
  if !p.IsSetMessage() {
    return OutputHostCommand_Message_DEFAULT
  }
return p.Message
}
var OutputHostCommand_Reconfigure_DEFAULT *ReconfigureInfo
func (p *OutputHostCommand) GetReconfigure() *ReconfigureInfo {
  if !p.IsSetReconfigure() {
    return OutputHostCommand_Reconfigure_DEFAULT
  }
return p.Reconfigure
}
func (p *OutputHostCommand) IsSetType() bool {
  return p.Type != nil
}

func (p *OutputHostCommand) IsSetMessage() bool {
  return p.Message != nil
}

func (p *OutputHostCommand) IsSetReconfigure() bool {
  return p.Reconfigure != nil
}

func (p *OutputHostCommand) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostCommand)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := OutputHostCommandType(v)
  p.Type = &temp
}
  return nil
}

func (p *OutputHostCommand)  ReadField2(iprot thrift.TProtocol) error {
  p.Message = &ConsumerMessage{}
  if err := p.Message.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *OutputHostCommand)  ReadField3(iprot thrift.TProtocol) error {
  p.Reconfigure = &ReconfigureInfo{}
  if err := p.Reconfigure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reconfigure), err)
  }
  return nil
}

func (p *OutputHostCommand) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OutputHostCommand"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostCommand) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  }
  return err
}

func (p *OutputHostCommand) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := p.Message.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *OutputHostCommand) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetReconfigure() {
    if err := oprot.WriteFieldBegin("reconfigure", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reconfigure: ", p), err) }
    if err := p.Reconfigure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reconfigure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reconfigure: ", p), err) }
  }
  return err
}

func (p *OutputHostCommand) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostCommand(%+v)", *p)
}

// Attributes:
//  - Credits
type ControlFlow struct {
  Credits *int32 `thrift:"credits,1" db:"credits" json:"credits,omitempty"`
}

func NewControlFlow() *ControlFlow {
  return &ControlFlow{}
}

var ControlFlow_Credits_DEFAULT int32
func (p *ControlFlow) GetCredits() int32 {
  if !p.IsSetCredits() {
    return ControlFlow_Credits_DEFAULT
  }
return *p.Credits
}
func (p *ControlFlow) IsSetCredits() bool {
  return p.Credits != nil
}

func (p *ControlFlow) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControlFlow)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Credits = &v
}
  return nil
}

func (p *ControlFlow) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ControlFlow"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControlFlow) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCredits() {
    if err := oprot.WriteFieldBegin("credits", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:credits: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Credits)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.credits (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:credits: ", p), err) }
  }
  return err
}

func (p *ControlFlow) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControlFlow(%+v)", *p)
}

type BFrontend interface {
  HostPort() (r string, err error)
  // *** Destination CRUD *********************
  // 
  // Parameters:
  //  - CreateRequest
  CreateDestination(createRequest *CreateDestinationRequest) (r *DestinationDescription, err error)
  // Parameters:
  //  - GetRequest
  ReadDestination(getRequest *ReadDestinationRequest) (r *DestinationDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateDestination(updateRequest *UpdateDestinationRequest) (r *DestinationDescription, err error)
  // Parameters:
  //  - DeleteRequest
  DeleteDestination(deleteRequest *DeleteDestinationRequest) (err error)
  // Parameters:
  //  - ListRequest
  ListDestinations(listRequest *ListDestinationsRequest) (r *ListDestinationsResult_, err error)
  // *** ConsumerGroup CRUD *******************
  // 
  // Parameters:
  //  - RegisterRequest
  CreateConsumerGroup(registerRequest *CreateConsumerGroupRequest) (r *ConsumerGroupDescription, err error)
  // Parameters:
  //  - GetRequest
  ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *ConsumerGroupDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateConsumerGroup(updateRequest *UpdateConsumerGroupRequest) (r *ConsumerGroupDescription, err error)
  // Parameters:
  //  - DeleteRequest
  DeleteConsumerGroup(deleteRequest *DeleteConsumerGroupRequest) (err error)
  // Parameters:
  //  - ListRequest
  ListConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error)
  //  * readDestinationHosts will be replaced by readPublisherOptions soon
  // *
  // 
  // Parameters:
  //  - GetHostsRequest
  ReadDestinationHosts(getHostsRequest *ReadDestinationHostsRequest) (r *ReadDestinationHostsResult_, err error)
  // Parameters:
  //  - GetPublisherOptionsRequest
  ReadPublisherOptions(getPublisherOptionsRequest *ReadPublisherOptionsRequest) (r *ReadPublisherOptionsResult_, err error)
  // Parameters:
  //  - GetHostsRequest
  ReadConsumerGroupHosts(getHostsRequest *ReadConsumerGroupHostsRequest) (r *ReadConsumerGroupHostsResult_, err error)
  // *************** DLQ Management ***********
  // 
  // Parameters:
  //  - PurgeRequest
  PurgeDLQForConsumerGroup(purgeRequest *PurgeDLQForConsumerGroupRequest) (err error)
  // Parameters:
  //  - MergeRequest
  MergeDLQForConsumerGroup(mergeRequest *MergeDLQForConsumerGroupRequest) (err error)
  // ********* Queue Information  *****************************
  // 
  // Parameters:
  //  - GetQueueDepthInfoRequest
  GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error)
}

type BFrontendClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewBFrontendClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BFrontendClient {
  return &BFrontendClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewBFrontendClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BFrontendClient {
  return &BFrontendClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *BFrontendClient) HostPort() (r string, err error) {
  if err = p.sendHostPort(); err != nil { return }
  return p.recvHostPort()
}

func (p *BFrontendClient) sendHostPort()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("HostPort", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendHostPortArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvHostPort() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "HostPort" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "HostPort failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "HostPort failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error26 error
    error26, err = error25.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error26
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "HostPort failed: invalid message type")
    return
  }
  result := BFrontendHostPortResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// *** Destination CRUD *********************
// 
// Parameters:
//  - CreateRequest
func (p *BFrontendClient) CreateDestination(createRequest *CreateDestinationRequest) (r *DestinationDescription, err error) {
  if err = p.sendCreateDestination(createRequest); err != nil { return }
  return p.recvCreateDestination()
}

func (p *BFrontendClient) sendCreateDestination(createRequest *CreateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendCreateDestinationArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvCreateDestination() (value *DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error28 error
    error28, err = error27.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error28
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestination failed: invalid message type")
    return
  }
  result := BFrontendCreateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetRequest
func (p *BFrontendClient) ReadDestination(getRequest *ReadDestinationRequest) (r *DestinationDescription, err error) {
  if err = p.sendReadDestination(getRequest); err != nil { return }
  return p.recvReadDestination()
}

func (p *BFrontendClient) sendReadDestination(getRequest *ReadDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendReadDestinationArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvReadDestination() (value *DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error30 error
    error30, err = error29.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error30
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestination failed: invalid message type")
    return
  }
  result := BFrontendReadDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *BFrontendClient) UpdateDestination(updateRequest *UpdateDestinationRequest) (r *DestinationDescription, err error) {
  if err = p.sendUpdateDestination(updateRequest); err != nil { return }
  return p.recvUpdateDestination()
}

func (p *BFrontendClient) sendUpdateDestination(updateRequest *UpdateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendUpdateDestinationArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvUpdateDestination() (value *DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error32 error
    error32, err = error31.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error32
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
    return
  }
  result := BFrontendUpdateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DeleteRequest
func (p *BFrontendClient) DeleteDestination(deleteRequest *DeleteDestinationRequest) (err error) {
  if err = p.sendDeleteDestination(deleteRequest); err != nil { return }
  return p.recvDeleteDestination()
}

func (p *BFrontendClient) sendDeleteDestination(deleteRequest *DeleteDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendDeleteDestinationArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvDeleteDestination() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error34 error
    error34, err = error33.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error34
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
    return
  }
  result := BFrontendDeleteDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  return
}

// Parameters:
//  - ListRequest
func (p *BFrontendClient) ListDestinations(listRequest *ListDestinationsRequest) (r *ListDestinationsResult_, err error) {
  if err = p.sendListDestinations(listRequest); err != nil { return }
  return p.recvListDestinations()
}

func (p *BFrontendClient) sendListDestinations(listRequest *ListDestinationsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listDestinations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendListDestinationsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvListDestinations() (value *ListDestinationsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listDestinations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listDestinations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listDestinations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error36 error
    error36, err = error35.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error36
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listDestinations failed: invalid message type")
    return
  }
  result := BFrontendListDestinationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// *** ConsumerGroup CRUD *******************
// 
// Parameters:
//  - RegisterRequest
func (p *BFrontendClient) CreateConsumerGroup(registerRequest *CreateConsumerGroupRequest) (r *ConsumerGroupDescription, err error) {
  if err = p.sendCreateConsumerGroup(registerRequest); err != nil { return }
  return p.recvCreateConsumerGroup()
}

func (p *BFrontendClient) sendCreateConsumerGroup(registerRequest *CreateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendCreateConsumerGroupArgs{
  RegisterRequest : registerRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvCreateConsumerGroup() (value *ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error38 error
    error38, err = error37.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error38
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroup failed: invalid message type")
    return
  }
  result := BFrontendCreateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetRequest
func (p *BFrontendClient) ReadConsumerGroup(getRequest *ReadConsumerGroupRequest) (r *ConsumerGroupDescription, err error) {
  if err = p.sendReadConsumerGroup(getRequest); err != nil { return }
  return p.recvReadConsumerGroup()
}

func (p *BFrontendClient) sendReadConsumerGroup(getRequest *ReadConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendReadConsumerGroupArgs{
  GetRequest : getRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvReadConsumerGroup() (value *ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error40 error
    error40, err = error39.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error40
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroup failed: invalid message type")
    return
  }
  result := BFrontendReadConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *BFrontendClient) UpdateConsumerGroup(updateRequest *UpdateConsumerGroupRequest) (r *ConsumerGroupDescription, err error) {
  if err = p.sendUpdateConsumerGroup(updateRequest); err != nil { return }
  return p.recvUpdateConsumerGroup()
}

func (p *BFrontendClient) sendUpdateConsumerGroup(updateRequest *UpdateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendUpdateConsumerGroupArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvUpdateConsumerGroup() (value *ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error42 error
    error42, err = error41.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error42
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
    return
  }
  result := BFrontendUpdateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DeleteRequest
func (p *BFrontendClient) DeleteConsumerGroup(deleteRequest *DeleteConsumerGroupRequest) (err error) {
  if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil { return }
  return p.recvDeleteConsumerGroup()
}

func (p *BFrontendClient) sendDeleteConsumerGroup(deleteRequest *DeleteConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendDeleteConsumerGroupArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvDeleteConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error44 error
    error44, err = error43.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error44
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
    return
  }
  result := BFrontendDeleteConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  return
}

// Parameters:
//  - ListRequest
func (p *BFrontendClient) ListConsumerGroups(listRequest *ListConsumerGroupRequest) (r *ListConsumerGroupResult_, err error) {
  if err = p.sendListConsumerGroups(listRequest); err != nil { return }
  return p.recvListConsumerGroups()
}

func (p *BFrontendClient) sendListConsumerGroups(listRequest *ListConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("listConsumerGroups", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendListConsumerGroupsArgs{
  ListRequest : listRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvListConsumerGroups() (value *ListConsumerGroupResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "listConsumerGroups" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listConsumerGroups failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listConsumerGroups failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error46 error
    error46, err = error45.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error46
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConsumerGroups failed: invalid message type")
    return
  }
  result := BFrontendListConsumerGroupsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

//  * readDestinationHosts will be replaced by readPublisherOptions soon
// *
// 
// Parameters:
//  - GetHostsRequest
func (p *BFrontendClient) ReadDestinationHosts(getHostsRequest *ReadDestinationHostsRequest) (r *ReadDestinationHostsResult_, err error) {
  if err = p.sendReadDestinationHosts(getHostsRequest); err != nil { return }
  return p.recvReadDestinationHosts()
}

func (p *BFrontendClient) sendReadDestinationHosts(getHostsRequest *ReadDestinationHostsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readDestinationHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendReadDestinationHostsArgs{
  GetHostsRequest : getHostsRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvReadDestinationHosts() (value *ReadDestinationHostsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readDestinationHosts" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readDestinationHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readDestinationHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error48 error
    error48, err = error47.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error48
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readDestinationHosts failed: invalid message type")
    return
  }
  result := BFrontendReadDestinationHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.EntityDisabled != nil {
    err = result.EntityDisabled
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetPublisherOptionsRequest
func (p *BFrontendClient) ReadPublisherOptions(getPublisherOptionsRequest *ReadPublisherOptionsRequest) (r *ReadPublisherOptionsResult_, err error) {
  if err = p.sendReadPublisherOptions(getPublisherOptionsRequest); err != nil { return }
  return p.recvReadPublisherOptions()
}

func (p *BFrontendClient) sendReadPublisherOptions(getPublisherOptionsRequest *ReadPublisherOptionsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readPublisherOptions", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendReadPublisherOptionsArgs{
  GetPublisherOptionsRequest : getPublisherOptionsRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvReadPublisherOptions() (value *ReadPublisherOptionsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readPublisherOptions" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readPublisherOptions failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readPublisherOptions failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error50 error
    error50, err = error49.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error50
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readPublisherOptions failed: invalid message type")
    return
  }
  result := BFrontendReadPublisherOptionsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.EntityDisabled != nil {
    err = result.EntityDisabled
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetHostsRequest
func (p *BFrontendClient) ReadConsumerGroupHosts(getHostsRequest *ReadConsumerGroupHostsRequest) (r *ReadConsumerGroupHostsResult_, err error) {
  if err = p.sendReadConsumerGroupHosts(getHostsRequest); err != nil { return }
  return p.recvReadConsumerGroupHosts()
}

func (p *BFrontendClient) sendReadConsumerGroupHosts(getHostsRequest *ReadConsumerGroupHostsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendReadConsumerGroupHostsArgs{
  GetHostsRequest : getHostsRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvReadConsumerGroupHosts() (value *ReadConsumerGroupHostsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "readConsumerGroupHosts" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "readConsumerGroupHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "readConsumerGroupHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error52 error
    error52, err = error51.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error52
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "readConsumerGroupHosts failed: invalid message type")
    return
  }
  result := BFrontendReadConsumerGroupHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.EntityDisabled != nil {
    err = result.EntityDisabled
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}

// *************** DLQ Management ***********
// 
// Parameters:
//  - PurgeRequest
func (p *BFrontendClient) PurgeDLQForConsumerGroup(purgeRequest *PurgeDLQForConsumerGroupRequest) (err error) {
  if err = p.sendPurgeDLQForConsumerGroup(purgeRequest); err != nil { return }
  return p.recvPurgeDLQForConsumerGroup()
}

func (p *BFrontendClient) sendPurgeDLQForConsumerGroup(purgeRequest *PurgeDLQForConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendPurgeDLQForConsumerGroupArgs{
  PurgeRequest : purgeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvPurgeDLQForConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "purgeDLQForConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "purgeDLQForConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "purgeDLQForConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error54 error
    error54, err = error53.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error54
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "purgeDLQForConsumerGroup failed: invalid message type")
    return
  }
  result := BFrontendPurgeDLQForConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  return
}

// Parameters:
//  - MergeRequest
func (p *BFrontendClient) MergeDLQForConsumerGroup(mergeRequest *MergeDLQForConsumerGroupRequest) (err error) {
  if err = p.sendMergeDLQForConsumerGroup(mergeRequest); err != nil { return }
  return p.recvMergeDLQForConsumerGroup()
}

func (p *BFrontendClient) sendMergeDLQForConsumerGroup(mergeRequest *MergeDLQForConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendMergeDLQForConsumerGroupArgs{
  MergeRequest : mergeRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvMergeDLQForConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "mergeDLQForConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mergeDLQForConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mergeDLQForConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error56 error
    error56, err = error55.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error56
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mergeDLQForConsumerGroup failed: invalid message type")
    return
  }
  result := BFrontendMergeDLQForConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  return
}

// ********* Queue Information  *****************************
// 
// Parameters:
//  - GetQueueDepthInfoRequest
func (p *BFrontendClient) GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error) {
  if err = p.sendGetQueueDepthInfo(getQueueDepthInfoRequest); err != nil { return }
  return p.recvGetQueueDepthInfo()
}

func (p *BFrontendClient) sendGetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BFrontendGetQueueDepthInfoArgs{
  GetQueueDepthInfoRequest : getQueueDepthInfoRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BFrontendClient) recvGetQueueDepthInfo() (value *GetQueueDepthInfoResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getQueueDepthInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getQueueDepthInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueDepthInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error58 error
    error58, err = error57.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error58
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getQueueDepthInfo failed: invalid message type")
    return
  }
  result := BFrontendGetQueueDepthInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.CacheMissError != nil {
    err = result.CacheMissError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  value = result.GetSuccess()
  return
}


type BFrontendProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BFrontend
}

func (p *BFrontendProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BFrontendProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BFrontendProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBFrontendProcessor(handler BFrontend) *BFrontendProcessor {

  self59 := &BFrontendProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self59.processorMap["HostPort"] = &bFrontendProcessorHostPort{handler:handler}
  self59.processorMap["createDestination"] = &bFrontendProcessorCreateDestination{handler:handler}
  self59.processorMap["readDestination"] = &bFrontendProcessorReadDestination{handler:handler}
  self59.processorMap["updateDestination"] = &bFrontendProcessorUpdateDestination{handler:handler}
  self59.processorMap["deleteDestination"] = &bFrontendProcessorDeleteDestination{handler:handler}
  self59.processorMap["listDestinations"] = &bFrontendProcessorListDestinations{handler:handler}
  self59.processorMap["createConsumerGroup"] = &bFrontendProcessorCreateConsumerGroup{handler:handler}
  self59.processorMap["readConsumerGroup"] = &bFrontendProcessorReadConsumerGroup{handler:handler}
  self59.processorMap["updateConsumerGroup"] = &bFrontendProcessorUpdateConsumerGroup{handler:handler}
  self59.processorMap["deleteConsumerGroup"] = &bFrontendProcessorDeleteConsumerGroup{handler:handler}
  self59.processorMap["listConsumerGroups"] = &bFrontendProcessorListConsumerGroups{handler:handler}
  self59.processorMap["readDestinationHosts"] = &bFrontendProcessorReadDestinationHosts{handler:handler}
  self59.processorMap["readPublisherOptions"] = &bFrontendProcessorReadPublisherOptions{handler:handler}
  self59.processorMap["readConsumerGroupHosts"] = &bFrontendProcessorReadConsumerGroupHosts{handler:handler}
  self59.processorMap["purgeDLQForConsumerGroup"] = &bFrontendProcessorPurgeDLQForConsumerGroup{handler:handler}
  self59.processorMap["mergeDLQForConsumerGroup"] = &bFrontendProcessorMergeDLQForConsumerGroup{handler:handler}
  self59.processorMap["getQueueDepthInfo"] = &bFrontendProcessorGetQueueDepthInfo{handler:handler}
return self59
}

func (p *BFrontendProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x60 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x60.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x60

}

type bFrontendProcessorHostPort struct {
  handler BFrontend
}

func (p *bFrontendProcessorHostPort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendHostPortArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("HostPort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendHostPortResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.HostPort(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing HostPort: " + err2.Error())
    oprot.WriteMessageBegin("HostPort", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("HostPort", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorCreateDestination struct {
  handler BFrontend
}

func (p *bFrontendProcessorCreateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendCreateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendCreateDestinationResult{}
var retval *DestinationDescription
  var err2 error
  if retval, err2 = p.handler.CreateDestination(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestination: " + err2.Error())
    oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorReadDestination struct {
  handler BFrontend
}

func (p *bFrontendProcessorReadDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendReadDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendReadDestinationResult{}
var retval *DestinationDescription
  var err2 error
  if retval, err2 = p.handler.ReadDestination(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestination: " + err2.Error())
    oprot.WriteMessageBegin("readDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorUpdateDestination struct {
  handler BFrontend
}

func (p *bFrontendProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendUpdateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendUpdateDestinationResult{}
var retval *DestinationDescription
  var err2 error
  if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: " + err2.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorDeleteDestination struct {
  handler BFrontend
}

func (p *bFrontendProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendDeleteDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendDeleteDestinationResult{}
  var err2 error
  if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: " + err2.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorListDestinations struct {
  handler BFrontend
}

func (p *bFrontendProcessorListDestinations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendListDestinationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendListDestinationsResult{}
var retval *ListDestinationsResult_
  var err2 error
  if retval, err2 = p.handler.ListDestinations(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listDestinations: " + err2.Error())
    oprot.WriteMessageBegin("listDestinations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listDestinations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorCreateConsumerGroup struct {
  handler BFrontend
}

func (p *bFrontendProcessorCreateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendCreateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendCreateConsumerGroupResult{}
var retval *ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.CreateConsumerGroup(args.RegisterRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorReadConsumerGroup struct {
  handler BFrontend
}

func (p *bFrontendProcessorReadConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendReadConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendReadConsumerGroupResult{}
var retval *ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroup(args.GetRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorUpdateConsumerGroup struct {
  handler BFrontend
}

func (p *bFrontendProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendUpdateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendUpdateConsumerGroupResult{}
var retval *ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorDeleteConsumerGroup struct {
  handler BFrontend
}

func (p *bFrontendProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendDeleteConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendDeleteConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorListConsumerGroups struct {
  handler BFrontend
}

func (p *bFrontendProcessorListConsumerGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendListConsumerGroupsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendListConsumerGroupsResult{}
var retval *ListConsumerGroupResult_
  var err2 error
  if retval, err2 = p.handler.ListConsumerGroups(args.ListRequest); err2 != nil {
  switch v := err2.(type) {
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConsumerGroups: " + err2.Error())
    oprot.WriteMessageBegin("listConsumerGroups", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("listConsumerGroups", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorReadDestinationHosts struct {
  handler BFrontend
}

func (p *bFrontendProcessorReadDestinationHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendReadDestinationHostsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readDestinationHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendReadDestinationHostsResult{}
var retval *ReadDestinationHostsResult_
  var err2 error
  if retval, err2 = p.handler.ReadDestinationHosts(args.GetHostsRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *EntityDisabledError:
  result.EntityDisabled = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readDestinationHosts: " + err2.Error())
    oprot.WriteMessageBegin("readDestinationHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readDestinationHosts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorReadPublisherOptions struct {
  handler BFrontend
}

func (p *bFrontendProcessorReadPublisherOptions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendReadPublisherOptionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readPublisherOptions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendReadPublisherOptionsResult{}
var retval *ReadPublisherOptionsResult_
  var err2 error
  if retval, err2 = p.handler.ReadPublisherOptions(args.GetPublisherOptionsRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *EntityDisabledError:
  result.EntityDisabled = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readPublisherOptions: " + err2.Error())
    oprot.WriteMessageBegin("readPublisherOptions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readPublisherOptions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorReadConsumerGroupHosts struct {
  handler BFrontend
}

func (p *bFrontendProcessorReadConsumerGroupHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendReadConsumerGroupHostsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendReadConsumerGroupHostsResult{}
var retval *ReadConsumerGroupHostsResult_
  var err2 error
  if retval, err2 = p.handler.ReadConsumerGroupHosts(args.GetHostsRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *EntityDisabledError:
  result.EntityDisabled = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readConsumerGroupHosts: " + err2.Error())
    oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readConsumerGroupHosts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorPurgeDLQForConsumerGroup struct {
  handler BFrontend
}

func (p *bFrontendProcessorPurgeDLQForConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendPurgeDLQForConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendPurgeDLQForConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.PurgeDLQForConsumerGroup(args.PurgeRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing purgeDLQForConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("purgeDLQForConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorMergeDLQForConsumerGroup struct {
  handler BFrontend
}

func (p *bFrontendProcessorMergeDLQForConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendMergeDLQForConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendMergeDLQForConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.MergeDLQForConsumerGroup(args.MergeRequest); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mergeDLQForConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("mergeDLQForConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFrontendProcessorGetQueueDepthInfo struct {
  handler BFrontend
}

func (p *bFrontendProcessorGetQueueDepthInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFrontendGetQueueDepthInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFrontendGetQueueDepthInfoResult{}
var retval *GetQueueDepthInfoResult_
  var err2 error
  if retval, err2 = p.handler.GetQueueDepthInfo(args.GetQueueDepthInfoRequest); err2 != nil {
  switch v := err2.(type) {
    case *QueueCacheMissError:
  result.CacheMissError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueDepthInfo: " + err2.Error())
    oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BFrontendHostPortArgs struct {
}

func NewBFrontendHostPortArgs() *BFrontendHostPortArgs {
  return &BFrontendHostPortArgs{}
}

func (p *BFrontendHostPortArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendHostPortArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostPort_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendHostPortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendHostPortArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFrontendHostPortResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFrontendHostPortResult() *BFrontendHostPortResult {
  return &BFrontendHostPortResult{}
}

var BFrontendHostPortResult_Success_DEFAULT string
func (p *BFrontendHostPortResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BFrontendHostPortResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFrontendHostPortResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendHostPortResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendHostPortResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BFrontendHostPortResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostPort_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendHostPortResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendHostPortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendHostPortResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type BFrontendCreateDestinationArgs struct {
  CreateRequest *CreateDestinationRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewBFrontendCreateDestinationArgs() *BFrontendCreateDestinationArgs {
  return &BFrontendCreateDestinationArgs{}
}

var BFrontendCreateDestinationArgs_CreateRequest_DEFAULT *CreateDestinationRequest
func (p *BFrontendCreateDestinationArgs) GetCreateRequest() *CreateDestinationRequest {
  if !p.IsSetCreateRequest() {
    return BFrontendCreateDestinationArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *BFrontendCreateDestinationArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *BFrontendCreateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendCreateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &CreateDestinationRequest{
  ChecksumOption:   0,
}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *BFrontendCreateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendCreateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *BFrontendCreateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendCreateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
type BFrontendCreateDestinationResult struct {
  Success *DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendCreateDestinationResult() *BFrontendCreateDestinationResult {
  return &BFrontendCreateDestinationResult{}
}

var BFrontendCreateDestinationResult_Success_DEFAULT *DestinationDescription
func (p *BFrontendCreateDestinationResult) GetSuccess() *DestinationDescription {
  if !p.IsSetSuccess() {
    return BFrontendCreateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendCreateDestinationResult_EntityExistsError_DEFAULT *EntityAlreadyExistsError
func (p *BFrontendCreateDestinationResult) GetEntityExistsError() *EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return BFrontendCreateDestinationResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var BFrontendCreateDestinationResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendCreateDestinationResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendCreateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendCreateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendCreateDestinationResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *BFrontendCreateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendCreateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendCreateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DestinationDescription{
  ChecksumOption:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendCreateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *BFrontendCreateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendCreateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendCreateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendCreateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *BFrontendCreateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendCreateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendCreateDestinationResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type BFrontendReadDestinationArgs struct {
  GetRequest *ReadDestinationRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewBFrontendReadDestinationArgs() *BFrontendReadDestinationArgs {
  return &BFrontendReadDestinationArgs{}
}

var BFrontendReadDestinationArgs_GetRequest_DEFAULT *ReadDestinationRequest
func (p *BFrontendReadDestinationArgs) GetGetRequest() *ReadDestinationRequest {
  if !p.IsSetGetRequest() {
    return BFrontendReadDestinationArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *BFrontendReadDestinationArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *BFrontendReadDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &ReadDestinationRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *BFrontendReadDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *BFrontendReadDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendReadDestinationResult struct {
  Success *DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendReadDestinationResult() *BFrontendReadDestinationResult {
  return &BFrontendReadDestinationResult{}
}

var BFrontendReadDestinationResult_Success_DEFAULT *DestinationDescription
func (p *BFrontendReadDestinationResult) GetSuccess() *DestinationDescription {
  if !p.IsSetSuccess() {
    return BFrontendReadDestinationResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendReadDestinationResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendReadDestinationResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendReadDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendReadDestinationResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendReadDestinationResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendReadDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendReadDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendReadDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendReadDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendReadDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DestinationDescription{
  ChecksumOption:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendReadDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendReadDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendReadDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type BFrontendUpdateDestinationArgs struct {
  UpdateRequest *UpdateDestinationRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewBFrontendUpdateDestinationArgs() *BFrontendUpdateDestinationArgs {
  return &BFrontendUpdateDestinationArgs{}
}

var BFrontendUpdateDestinationArgs_UpdateRequest_DEFAULT *UpdateDestinationRequest
func (p *BFrontendUpdateDestinationArgs) GetUpdateRequest() *UpdateDestinationRequest {
  if !p.IsSetUpdateRequest() {
    return BFrontendUpdateDestinationArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *BFrontendUpdateDestinationArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *BFrontendUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendUpdateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &UpdateDestinationRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *BFrontendUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *BFrontendUpdateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendUpdateDestinationResult struct {
  Success *DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendUpdateDestinationResult() *BFrontendUpdateDestinationResult {
  return &BFrontendUpdateDestinationResult{}
}

var BFrontendUpdateDestinationResult_Success_DEFAULT *DestinationDescription
func (p *BFrontendUpdateDestinationResult) GetSuccess() *DestinationDescription {
  if !p.IsSetSuccess() {
    return BFrontendUpdateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendUpdateDestinationResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendUpdateDestinationResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendUpdateDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendUpdateDestinationResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendUpdateDestinationResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendUpdateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendUpdateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendUpdateDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendUpdateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendUpdateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DestinationDescription{
  ChecksumOption:   0,
}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendUpdateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendUpdateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendUpdateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type BFrontendDeleteDestinationArgs struct {
  DeleteRequest *DeleteDestinationRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewBFrontendDeleteDestinationArgs() *BFrontendDeleteDestinationArgs {
  return &BFrontendDeleteDestinationArgs{}
}

var BFrontendDeleteDestinationArgs_DeleteRequest_DEFAULT *DeleteDestinationRequest
func (p *BFrontendDeleteDestinationArgs) GetDeleteRequest() *DeleteDestinationRequest {
  if !p.IsSetDeleteRequest() {
    return BFrontendDeleteDestinationArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *BFrontendDeleteDestinationArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *BFrontendDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendDeleteDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &DeleteDestinationRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *BFrontendDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *BFrontendDeleteDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendDeleteDestinationResult struct {
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendDeleteDestinationResult() *BFrontendDeleteDestinationResult {
  return &BFrontendDeleteDestinationResult{}
}

var BFrontendDeleteDestinationResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendDeleteDestinationResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendDeleteDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendDeleteDestinationResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendDeleteDestinationResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendDeleteDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendDeleteDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendDeleteDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendDeleteDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendDeleteDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendDeleteDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type BFrontendListDestinationsArgs struct {
  ListRequest *ListDestinationsRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewBFrontendListDestinationsArgs() *BFrontendListDestinationsArgs {
  return &BFrontendListDestinationsArgs{}
}

var BFrontendListDestinationsArgs_ListRequest_DEFAULT *ListDestinationsRequest
func (p *BFrontendListDestinationsArgs) GetListRequest() *ListDestinationsRequest {
  if !p.IsSetListRequest() {
    return BFrontendListDestinationsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *BFrontendListDestinationsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *BFrontendListDestinationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendListDestinationsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &ListDestinationsRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *BFrontendListDestinationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendListDestinationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *BFrontendListDestinationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendListDestinationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
type BFrontendListDestinationsResult struct {
  Success *ListDestinationsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendListDestinationsResult() *BFrontendListDestinationsResult {
  return &BFrontendListDestinationsResult{}
}

var BFrontendListDestinationsResult_Success_DEFAULT *ListDestinationsResult_
func (p *BFrontendListDestinationsResult) GetSuccess() *ListDestinationsResult_ {
  if !p.IsSetSuccess() {
    return BFrontendListDestinationsResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendListDestinationsResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendListDestinationsResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendListDestinationsResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendListDestinationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendListDestinationsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendListDestinationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendListDestinationsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListDestinationsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendListDestinationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendListDestinationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listDestinations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendListDestinationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendListDestinationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendListDestinationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendListDestinationsResult(%+v)", *p)
}

// Attributes:
//  - RegisterRequest
type BFrontendCreateConsumerGroupArgs struct {
  RegisterRequest *CreateConsumerGroupRequest `thrift:"registerRequest,1" db:"registerRequest" json:"registerRequest"`
}

func NewBFrontendCreateConsumerGroupArgs() *BFrontendCreateConsumerGroupArgs {
  return &BFrontendCreateConsumerGroupArgs{}
}

var BFrontendCreateConsumerGroupArgs_RegisterRequest_DEFAULT *CreateConsumerGroupRequest
func (p *BFrontendCreateConsumerGroupArgs) GetRegisterRequest() *CreateConsumerGroupRequest {
  if !p.IsSetRegisterRequest() {
    return BFrontendCreateConsumerGroupArgs_RegisterRequest_DEFAULT
  }
return p.RegisterRequest
}
func (p *BFrontendCreateConsumerGroupArgs) IsSetRegisterRequest() bool {
  return p.RegisterRequest != nil
}

func (p *BFrontendCreateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendCreateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RegisterRequest = &CreateConsumerGroupRequest{}
  if err := p.RegisterRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegisterRequest), err)
  }
  return nil
}

func (p *BFrontendCreateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendCreateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("registerRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:registerRequest: ", p), err) }
  if err := p.RegisterRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegisterRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:registerRequest: ", p), err) }
  return err
}

func (p *BFrontendCreateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendCreateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
type BFrontendCreateConsumerGroupResult struct {
  Success *ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendCreateConsumerGroupResult() *BFrontendCreateConsumerGroupResult {
  return &BFrontendCreateConsumerGroupResult{}
}

var BFrontendCreateConsumerGroupResult_Success_DEFAULT *ConsumerGroupDescription
func (p *BFrontendCreateConsumerGroupResult) GetSuccess() *ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return BFrontendCreateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendCreateConsumerGroupResult_EntityExistsError_DEFAULT *EntityAlreadyExistsError
func (p *BFrontendCreateConsumerGroupResult) GetEntityExistsError() *EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return BFrontendCreateConsumerGroupResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var BFrontendCreateConsumerGroupResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendCreateConsumerGroupResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendCreateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendCreateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendCreateConsumerGroupResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *BFrontendCreateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendCreateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendCreateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendCreateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *BFrontendCreateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendCreateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendCreateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendCreateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *BFrontendCreateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendCreateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendCreateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type BFrontendReadConsumerGroupArgs struct {
  GetRequest *ReadConsumerGroupRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewBFrontendReadConsumerGroupArgs() *BFrontendReadConsumerGroupArgs {
  return &BFrontendReadConsumerGroupArgs{}
}

var BFrontendReadConsumerGroupArgs_GetRequest_DEFAULT *ReadConsumerGroupRequest
func (p *BFrontendReadConsumerGroupArgs) GetGetRequest() *ReadConsumerGroupRequest {
  if !p.IsSetGetRequest() {
    return BFrontendReadConsumerGroupArgs_GetRequest_DEFAULT
  }
return p.GetRequest
}
func (p *BFrontendReadConsumerGroupArgs) IsSetGetRequest() bool {
  return p.GetRequest != nil
}

func (p *BFrontendReadConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetRequest = &ReadConsumerGroupRequest{}
  if err := p.GetRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err) }
  if err := p.GetRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err) }
  return err
}

func (p *BFrontendReadConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendReadConsumerGroupResult struct {
  Success *ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendReadConsumerGroupResult() *BFrontendReadConsumerGroupResult {
  return &BFrontendReadConsumerGroupResult{}
}

var BFrontendReadConsumerGroupResult_Success_DEFAULT *ConsumerGroupDescription
func (p *BFrontendReadConsumerGroupResult) GetSuccess() *ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return BFrontendReadConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendReadConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendReadConsumerGroupResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendReadConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendReadConsumerGroupResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendReadConsumerGroupResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendReadConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendReadConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendReadConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendReadConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendReadConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type BFrontendUpdateConsumerGroupArgs struct {
  UpdateRequest *UpdateConsumerGroupRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewBFrontendUpdateConsumerGroupArgs() *BFrontendUpdateConsumerGroupArgs {
  return &BFrontendUpdateConsumerGroupArgs{}
}

var BFrontendUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *UpdateConsumerGroupRequest
func (p *BFrontendUpdateConsumerGroupArgs) GetUpdateRequest() *UpdateConsumerGroupRequest {
  if !p.IsSetUpdateRequest() {
    return BFrontendUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *BFrontendUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *BFrontendUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendUpdateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &UpdateConsumerGroupRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *BFrontendUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *BFrontendUpdateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
type BFrontendUpdateConsumerGroupResult struct {
  Success *ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendUpdateConsumerGroupResult() *BFrontendUpdateConsumerGroupResult {
  return &BFrontendUpdateConsumerGroupResult{}
}

var BFrontendUpdateConsumerGroupResult_Success_DEFAULT *ConsumerGroupDescription
func (p *BFrontendUpdateConsumerGroupResult) GetSuccess() *ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return BFrontendUpdateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendUpdateConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendUpdateConsumerGroupResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendUpdateConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendUpdateConsumerGroupResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendUpdateConsumerGroupResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendUpdateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendUpdateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendUpdateConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendUpdateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendUpdateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendUpdateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendUpdateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendUpdateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type BFrontendDeleteConsumerGroupArgs struct {
  DeleteRequest *DeleteConsumerGroupRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewBFrontendDeleteConsumerGroupArgs() *BFrontendDeleteConsumerGroupArgs {
  return &BFrontendDeleteConsumerGroupArgs{}
}

var BFrontendDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *DeleteConsumerGroupRequest
func (p *BFrontendDeleteConsumerGroupArgs) GetDeleteRequest() *DeleteConsumerGroupRequest {
  if !p.IsSetDeleteRequest() {
    return BFrontendDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *BFrontendDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *BFrontendDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendDeleteConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &DeleteConsumerGroupRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *BFrontendDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *BFrontendDeleteConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendDeleteConsumerGroupResult struct {
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendDeleteConsumerGroupResult() *BFrontendDeleteConsumerGroupResult {
  return &BFrontendDeleteConsumerGroupResult{}
}

var BFrontendDeleteConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendDeleteConsumerGroupResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendDeleteConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendDeleteConsumerGroupResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendDeleteConsumerGroupResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendDeleteConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendDeleteConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendDeleteConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendDeleteConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendDeleteConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendDeleteConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - ListRequest
type BFrontendListConsumerGroupsArgs struct {
  ListRequest *ListConsumerGroupRequest `thrift:"listRequest,1" db:"listRequest" json:"listRequest"`
}

func NewBFrontendListConsumerGroupsArgs() *BFrontendListConsumerGroupsArgs {
  return &BFrontendListConsumerGroupsArgs{}
}

var BFrontendListConsumerGroupsArgs_ListRequest_DEFAULT *ListConsumerGroupRequest
func (p *BFrontendListConsumerGroupsArgs) GetListRequest() *ListConsumerGroupRequest {
  if !p.IsSetListRequest() {
    return BFrontendListConsumerGroupsArgs_ListRequest_DEFAULT
  }
return p.ListRequest
}
func (p *BFrontendListConsumerGroupsArgs) IsSetListRequest() bool {
  return p.ListRequest != nil
}

func (p *BFrontendListConsumerGroupsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendListConsumerGroupsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ListRequest = &ListConsumerGroupRequest{}
  if err := p.ListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ListRequest), err)
  }
  return nil
}

func (p *BFrontendListConsumerGroupsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listConsumerGroups_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendListConsumerGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listRequest: ", p), err) }
  if err := p.ListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listRequest: ", p), err) }
  return err
}

func (p *BFrontendListConsumerGroupsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendListConsumerGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
type BFrontendListConsumerGroupsResult struct {
  Success *ListConsumerGroupResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendListConsumerGroupsResult() *BFrontendListConsumerGroupsResult {
  return &BFrontendListConsumerGroupsResult{}
}

var BFrontendListConsumerGroupsResult_Success_DEFAULT *ListConsumerGroupResult_
func (p *BFrontendListConsumerGroupsResult) GetSuccess() *ListConsumerGroupResult_ {
  if !p.IsSetSuccess() {
    return BFrontendListConsumerGroupsResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendListConsumerGroupsResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendListConsumerGroupsResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendListConsumerGroupsResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendListConsumerGroupsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendListConsumerGroupsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendListConsumerGroupsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendListConsumerGroupsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ListConsumerGroupResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendListConsumerGroupsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendListConsumerGroupsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("listConsumerGroups_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendListConsumerGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendListConsumerGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendListConsumerGroupsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendListConsumerGroupsResult(%+v)", *p)
}

// Attributes:
//  - GetHostsRequest
type BFrontendReadDestinationHostsArgs struct {
  GetHostsRequest *ReadDestinationHostsRequest `thrift:"getHostsRequest,1" db:"getHostsRequest" json:"getHostsRequest"`
}

func NewBFrontendReadDestinationHostsArgs() *BFrontendReadDestinationHostsArgs {
  return &BFrontendReadDestinationHostsArgs{}
}

var BFrontendReadDestinationHostsArgs_GetHostsRequest_DEFAULT *ReadDestinationHostsRequest
func (p *BFrontendReadDestinationHostsArgs) GetGetHostsRequest() *ReadDestinationHostsRequest {
  if !p.IsSetGetHostsRequest() {
    return BFrontendReadDestinationHostsArgs_GetHostsRequest_DEFAULT
  }
return p.GetHostsRequest
}
func (p *BFrontendReadDestinationHostsArgs) IsSetGetHostsRequest() bool {
  return p.GetHostsRequest != nil
}

func (p *BFrontendReadDestinationHostsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetHostsRequest = &ReadDestinationHostsRequest{}
  if err := p.GetHostsRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestinationHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadDestinationHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err) }
  if err := p.GetHostsRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err) }
  return err
}

func (p *BFrontendReadDestinationHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadDestinationHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
type BFrontendReadDestinationHostsResult struct {
  Success *ReadDestinationHostsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  EntityDisabled *EntityDisabledError `thrift:"entityDisabled,2" db:"entityDisabled" json:"entityDisabled,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,3" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendReadDestinationHostsResult() *BFrontendReadDestinationHostsResult {
  return &BFrontendReadDestinationHostsResult{}
}

var BFrontendReadDestinationHostsResult_Success_DEFAULT *ReadDestinationHostsResult_
func (p *BFrontendReadDestinationHostsResult) GetSuccess() *ReadDestinationHostsResult_ {
  if !p.IsSetSuccess() {
    return BFrontendReadDestinationHostsResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendReadDestinationHostsResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendReadDestinationHostsResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendReadDestinationHostsResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendReadDestinationHostsResult_EntityDisabled_DEFAULT *EntityDisabledError
func (p *BFrontendReadDestinationHostsResult) GetEntityDisabled() *EntityDisabledError {
  if !p.IsSetEntityDisabled() {
    return BFrontendReadDestinationHostsResult_EntityDisabled_DEFAULT
  }
return p.EntityDisabled
}
var BFrontendReadDestinationHostsResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendReadDestinationHostsResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendReadDestinationHostsResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendReadDestinationHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendReadDestinationHostsResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendReadDestinationHostsResult) IsSetEntityDisabled() bool {
  return p.EntityDisabled != nil
}

func (p *BFrontendReadDestinationHostsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendReadDestinationHostsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadDestinationHostsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityDisabled = &EntityDisabledError{}
  if err := p.EntityDisabled.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendReadDestinationHostsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readDestinationHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadDestinationHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityDisabled() {
    if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err) }
    if err := p.EntityDisabled.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationHostsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadDestinationHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadDestinationHostsResult(%+v)", *p)
}

// Attributes:
//  - GetPublisherOptionsRequest
type BFrontendReadPublisherOptionsArgs struct {
  GetPublisherOptionsRequest *ReadPublisherOptionsRequest `thrift:"getPublisherOptionsRequest,1" db:"getPublisherOptionsRequest" json:"getPublisherOptionsRequest"`
}

func NewBFrontendReadPublisherOptionsArgs() *BFrontendReadPublisherOptionsArgs {
  return &BFrontendReadPublisherOptionsArgs{}
}

var BFrontendReadPublisherOptionsArgs_GetPublisherOptionsRequest_DEFAULT *ReadPublisherOptionsRequest
func (p *BFrontendReadPublisherOptionsArgs) GetGetPublisherOptionsRequest() *ReadPublisherOptionsRequest {
  if !p.IsSetGetPublisherOptionsRequest() {
    return BFrontendReadPublisherOptionsArgs_GetPublisherOptionsRequest_DEFAULT
  }
return p.GetPublisherOptionsRequest
}
func (p *BFrontendReadPublisherOptionsArgs) IsSetGetPublisherOptionsRequest() bool {
  return p.GetPublisherOptionsRequest != nil
}

func (p *BFrontendReadPublisherOptionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetPublisherOptionsRequest = &ReadPublisherOptionsRequest{}
  if err := p.GetPublisherOptionsRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetPublisherOptionsRequest), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readPublisherOptions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadPublisherOptionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getPublisherOptionsRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getPublisherOptionsRequest: ", p), err) }
  if err := p.GetPublisherOptionsRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetPublisherOptionsRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getPublisherOptionsRequest: ", p), err) }
  return err
}

func (p *BFrontendReadPublisherOptionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadPublisherOptionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
type BFrontendReadPublisherOptionsResult struct {
  Success *ReadPublisherOptionsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  EntityDisabled *EntityDisabledError `thrift:"entityDisabled,2" db:"entityDisabled" json:"entityDisabled,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,3" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendReadPublisherOptionsResult() *BFrontendReadPublisherOptionsResult {
  return &BFrontendReadPublisherOptionsResult{}
}

var BFrontendReadPublisherOptionsResult_Success_DEFAULT *ReadPublisherOptionsResult_
func (p *BFrontendReadPublisherOptionsResult) GetSuccess() *ReadPublisherOptionsResult_ {
  if !p.IsSetSuccess() {
    return BFrontendReadPublisherOptionsResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendReadPublisherOptionsResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendReadPublisherOptionsResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendReadPublisherOptionsResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendReadPublisherOptionsResult_EntityDisabled_DEFAULT *EntityDisabledError
func (p *BFrontendReadPublisherOptionsResult) GetEntityDisabled() *EntityDisabledError {
  if !p.IsSetEntityDisabled() {
    return BFrontendReadPublisherOptionsResult_EntityDisabled_DEFAULT
  }
return p.EntityDisabled
}
var BFrontendReadPublisherOptionsResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendReadPublisherOptionsResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendReadPublisherOptionsResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendReadPublisherOptionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendReadPublisherOptionsResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendReadPublisherOptionsResult) IsSetEntityDisabled() bool {
  return p.EntityDisabled != nil
}

func (p *BFrontendReadPublisherOptionsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendReadPublisherOptionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadPublisherOptionsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityDisabled = &EntityDisabledError{}
  if err := p.EntityDisabled.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendReadPublisherOptionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readPublisherOptions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadPublisherOptionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendReadPublisherOptionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadPublisherOptionsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityDisabled() {
    if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err) }
    if err := p.EntityDisabled.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err) }
  }
  return err
}

func (p *BFrontendReadPublisherOptionsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadPublisherOptionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadPublisherOptionsResult(%+v)", *p)
}

// Attributes:
//  - GetHostsRequest
type BFrontendReadConsumerGroupHostsArgs struct {
  GetHostsRequest *ReadConsumerGroupHostsRequest `thrift:"getHostsRequest,1" db:"getHostsRequest" json:"getHostsRequest"`
}

func NewBFrontendReadConsumerGroupHostsArgs() *BFrontendReadConsumerGroupHostsArgs {
  return &BFrontendReadConsumerGroupHostsArgs{}
}

var BFrontendReadConsumerGroupHostsArgs_GetHostsRequest_DEFAULT *ReadConsumerGroupHostsRequest
func (p *BFrontendReadConsumerGroupHostsArgs) GetGetHostsRequest() *ReadConsumerGroupHostsRequest {
  if !p.IsSetGetHostsRequest() {
    return BFrontendReadConsumerGroupHostsArgs_GetHostsRequest_DEFAULT
  }
return p.GetHostsRequest
}
func (p *BFrontendReadConsumerGroupHostsArgs) IsSetGetHostsRequest() bool {
  return p.GetHostsRequest != nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetHostsRequest = &ReadConsumerGroupHostsRequest{}
  if err := p.GetHostsRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err) }
  if err := p.GetHostsRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err) }
  return err
}

func (p *BFrontendReadConsumerGroupHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadConsumerGroupHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
type BFrontendReadConsumerGroupHostsResult struct {
  Success *ReadConsumerGroupHostsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  EntityDisabled *EntityDisabledError `thrift:"entityDisabled,2" db:"entityDisabled" json:"entityDisabled,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,3" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendReadConsumerGroupHostsResult() *BFrontendReadConsumerGroupHostsResult {
  return &BFrontendReadConsumerGroupHostsResult{}
}

var BFrontendReadConsumerGroupHostsResult_Success_DEFAULT *ReadConsumerGroupHostsResult_
func (p *BFrontendReadConsumerGroupHostsResult) GetSuccess() *ReadConsumerGroupHostsResult_ {
  if !p.IsSetSuccess() {
    return BFrontendReadConsumerGroupHostsResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendReadConsumerGroupHostsResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendReadConsumerGroupHostsResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendReadConsumerGroupHostsResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendReadConsumerGroupHostsResult_EntityDisabled_DEFAULT *EntityDisabledError
func (p *BFrontendReadConsumerGroupHostsResult) GetEntityDisabled() *EntityDisabledError {
  if !p.IsSetEntityDisabled() {
    return BFrontendReadConsumerGroupHostsResult_EntityDisabled_DEFAULT
  }
return p.EntityDisabled
}
var BFrontendReadConsumerGroupHostsResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendReadConsumerGroupHostsResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendReadConsumerGroupHostsResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendReadConsumerGroupHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) IsSetEntityDisabled() bool {
  return p.EntityDisabled != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendReadConsumerGroupHostsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReadConsumerGroupHostsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityDisabled = &EntityDisabledError{}
  if err := p.EntityDisabled.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readConsumerGroupHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityDisabled() {
    if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err) }
    if err := p.EntityDisabled.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupHostsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendReadConsumerGroupHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendReadConsumerGroupHostsResult(%+v)", *p)
}

// Attributes:
//  - PurgeRequest
type BFrontendPurgeDLQForConsumerGroupArgs struct {
  PurgeRequest *PurgeDLQForConsumerGroupRequest `thrift:"purgeRequest,1" db:"purgeRequest" json:"purgeRequest"`
}

func NewBFrontendPurgeDLQForConsumerGroupArgs() *BFrontendPurgeDLQForConsumerGroupArgs {
  return &BFrontendPurgeDLQForConsumerGroupArgs{}
}

var BFrontendPurgeDLQForConsumerGroupArgs_PurgeRequest_DEFAULT *PurgeDLQForConsumerGroupRequest
func (p *BFrontendPurgeDLQForConsumerGroupArgs) GetPurgeRequest() *PurgeDLQForConsumerGroupRequest {
  if !p.IsSetPurgeRequest() {
    return BFrontendPurgeDLQForConsumerGroupArgs_PurgeRequest_DEFAULT
  }
return p.PurgeRequest
}
func (p *BFrontendPurgeDLQForConsumerGroupArgs) IsSetPurgeRequest() bool {
  return p.PurgeRequest != nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PurgeRequest = &PurgeDLQForConsumerGroupRequest{}
  if err := p.PurgeRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PurgeRequest), err)
  }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("purgeDLQForConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("purgeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:purgeRequest: ", p), err) }
  if err := p.PurgeRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PurgeRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:purgeRequest: ", p), err) }
  return err
}

func (p *BFrontendPurgeDLQForConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendPurgeDLQForConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendPurgeDLQForConsumerGroupResult struct {
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendPurgeDLQForConsumerGroupResult() *BFrontendPurgeDLQForConsumerGroupResult {
  return &BFrontendPurgeDLQForConsumerGroupResult{}
}

var BFrontendPurgeDLQForConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendPurgeDLQForConsumerGroupResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendPurgeDLQForConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendPurgeDLQForConsumerGroupResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendPurgeDLQForConsumerGroupResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendPurgeDLQForConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendPurgeDLQForConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("purgeDLQForConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendPurgeDLQForConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendPurgeDLQForConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - MergeRequest
type BFrontendMergeDLQForConsumerGroupArgs struct {
  MergeRequest *MergeDLQForConsumerGroupRequest `thrift:"mergeRequest,1" db:"mergeRequest" json:"mergeRequest"`
}

func NewBFrontendMergeDLQForConsumerGroupArgs() *BFrontendMergeDLQForConsumerGroupArgs {
  return &BFrontendMergeDLQForConsumerGroupArgs{}
}

var BFrontendMergeDLQForConsumerGroupArgs_MergeRequest_DEFAULT *MergeDLQForConsumerGroupRequest
func (p *BFrontendMergeDLQForConsumerGroupArgs) GetMergeRequest() *MergeDLQForConsumerGroupRequest {
  if !p.IsSetMergeRequest() {
    return BFrontendMergeDLQForConsumerGroupArgs_MergeRequest_DEFAULT
  }
return p.MergeRequest
}
func (p *BFrontendMergeDLQForConsumerGroupArgs) IsSetMergeRequest() bool {
  return p.MergeRequest != nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.MergeRequest = &MergeDLQForConsumerGroupRequest{}
  if err := p.MergeRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MergeRequest), err)
  }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("mergeDLQForConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mergeRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mergeRequest: ", p), err) }
  if err := p.MergeRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MergeRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mergeRequest: ", p), err) }
  return err
}

func (p *BFrontendMergeDLQForConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendMergeDLQForConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BFrontendMergeDLQForConsumerGroupResult struct {
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendMergeDLQForConsumerGroupResult() *BFrontendMergeDLQForConsumerGroupResult {
  return &BFrontendMergeDLQForConsumerGroupResult{}
}

var BFrontendMergeDLQForConsumerGroupResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BFrontendMergeDLQForConsumerGroupResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BFrontendMergeDLQForConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BFrontendMergeDLQForConsumerGroupResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendMergeDLQForConsumerGroupResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendMergeDLQForConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendMergeDLQForConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("mergeDLQForConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendMergeDLQForConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BFrontendMergeDLQForConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendMergeDLQForConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendMergeDLQForConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - GetQueueDepthInfoRequest
type BFrontendGetQueueDepthInfoArgs struct {
  GetQueueDepthInfoRequest *GetQueueDepthInfoRequest `thrift:"getQueueDepthInfoRequest,1" db:"getQueueDepthInfoRequest" json:"getQueueDepthInfoRequest"`
}

func NewBFrontendGetQueueDepthInfoArgs() *BFrontendGetQueueDepthInfoArgs {
  return &BFrontendGetQueueDepthInfoArgs{}
}

var BFrontendGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT *GetQueueDepthInfoRequest
func (p *BFrontendGetQueueDepthInfoArgs) GetGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
  if !p.IsSetGetQueueDepthInfoRequest() {
    return BFrontendGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT
  }
return p.GetQueueDepthInfoRequest
}
func (p *BFrontendGetQueueDepthInfoArgs) IsSetGetQueueDepthInfoRequest() bool {
  return p.GetQueueDepthInfoRequest != nil
}

func (p *BFrontendGetQueueDepthInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendGetQueueDepthInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetQueueDepthInfoRequest = &GetQueueDepthInfoRequest{}
  if err := p.GetQueueDepthInfoRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetQueueDepthInfoRequest), err)
  }
  return nil
}

func (p *BFrontendGetQueueDepthInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getQueueDepthInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendGetQueueDepthInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getQueueDepthInfoRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getQueueDepthInfoRequest: ", p), err) }
  if err := p.GetQueueDepthInfoRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetQueueDepthInfoRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getQueueDepthInfoRequest: ", p), err) }
  return err
}

func (p *BFrontendGetQueueDepthInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendGetQueueDepthInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - CacheMissError
//  - RequestError
type BFrontendGetQueueDepthInfoResult struct {
  Success *GetQueueDepthInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  CacheMissError *QueueCacheMissError `thrift:"cacheMissError,1" db:"cacheMissError" json:"cacheMissError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBFrontendGetQueueDepthInfoResult() *BFrontendGetQueueDepthInfoResult {
  return &BFrontendGetQueueDepthInfoResult{}
}

var BFrontendGetQueueDepthInfoResult_Success_DEFAULT *GetQueueDepthInfoResult_
func (p *BFrontendGetQueueDepthInfoResult) GetSuccess() *GetQueueDepthInfoResult_ {
  if !p.IsSetSuccess() {
    return BFrontendGetQueueDepthInfoResult_Success_DEFAULT
  }
return p.Success
}
var BFrontendGetQueueDepthInfoResult_CacheMissError_DEFAULT *QueueCacheMissError
func (p *BFrontendGetQueueDepthInfoResult) GetCacheMissError() *QueueCacheMissError {
  if !p.IsSetCacheMissError() {
    return BFrontendGetQueueDepthInfoResult_CacheMissError_DEFAULT
  }
return p.CacheMissError
}
var BFrontendGetQueueDepthInfoResult_RequestError_DEFAULT *BadRequestError
func (p *BFrontendGetQueueDepthInfoResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BFrontendGetQueueDepthInfoResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BFrontendGetQueueDepthInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFrontendGetQueueDepthInfoResult) IsSetCacheMissError() bool {
  return p.CacheMissError != nil
}

func (p *BFrontendGetQueueDepthInfoResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BFrontendGetQueueDepthInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFrontendGetQueueDepthInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetQueueDepthInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFrontendGetQueueDepthInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.CacheMissError = &QueueCacheMissError{}
  if err := p.CacheMissError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CacheMissError), err)
  }
  return nil
}

func (p *BFrontendGetQueueDepthInfoResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BFrontendGetQueueDepthInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getQueueDepthInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFrontendGetQueueDepthInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFrontendGetQueueDepthInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCacheMissError() {
    if err := oprot.WriteFieldBegin("cacheMissError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cacheMissError: ", p), err) }
    if err := p.CacheMissError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CacheMissError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cacheMissError: ", p), err) }
  }
  return err
}

func (p *BFrontendGetQueueDepthInfoResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BFrontendGetQueueDepthInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFrontendGetQueueDepthInfoResult(%+v)", *p)
}


type BIn interface {
  // Non-streaming publish API
  // 
  // 
  // Parameters:
  //  - Request
  PutMessageBatch(request *PutMessageBatchRequest) (r *PutMessageBatchResult_, err error)
}

type BInClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewBInClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BInClient {
  return &BInClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewBInClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BInClient {
  return &BInClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Non-streaming publish API
// 
// 
// Parameters:
//  - Request
func (p *BInClient) PutMessageBatch(request *PutMessageBatchRequest) (r *PutMessageBatchResult_, err error) {
  if err = p.sendPutMessageBatch(request); err != nil { return }
  return p.recvPutMessageBatch()
}

func (p *BInClient) sendPutMessageBatch(request *PutMessageBatchRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("putMessageBatch", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BInPutMessageBatchArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BInClient) recvPutMessageBatch() (value *PutMessageBatchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "putMessageBatch" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "putMessageBatch failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putMessageBatch failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error157 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error158 error
    error158, err = error157.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error158
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "putMessageBatch failed: invalid message type")
    return
  }
  result := BInPutMessageBatchResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.EntityDisabled != nil {
    err = result.EntityDisabled
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalServiceError != nil {
    err = result.InternalServiceError
    return 
  }
  value = result.GetSuccess()
  return
}


type BInProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BIn
}

func (p *BInProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BInProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BInProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBInProcessor(handler BIn) *BInProcessor {

  self159 := &BInProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self159.processorMap["putMessageBatch"] = &bInProcessorPutMessageBatch{handler:handler}
return self159
}

func (p *BInProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x160 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x160.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x160

}

type bInProcessorPutMessageBatch struct {
  handler BIn
}

func (p *bInProcessorPutMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BInPutMessageBatchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putMessageBatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BInPutMessageBatchResult{}
var retval *PutMessageBatchResult_
  var err2 error
  if retval, err2 = p.handler.PutMessageBatch(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *EntityDisabledError:
  result.EntityDisabled = v
    case *BadRequestError:
  result.RequestError = v
    case *InternalServiceError:
  result.InternalServiceError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putMessageBatch: " + err2.Error())
    oprot.WriteMessageBegin("putMessageBatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("putMessageBatch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type BInPutMessageBatchArgs struct {
  Request *PutMessageBatchRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBInPutMessageBatchArgs() *BInPutMessageBatchArgs {
  return &BInPutMessageBatchArgs{}
}

var BInPutMessageBatchArgs_Request_DEFAULT *PutMessageBatchRequest
func (p *BInPutMessageBatchArgs) GetRequest() *PutMessageBatchRequest {
  if !p.IsSetRequest() {
    return BInPutMessageBatchArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BInPutMessageBatchArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BInPutMessageBatchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BInPutMessageBatchArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &PutMessageBatchRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BInPutMessageBatchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putMessageBatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BInPutMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BInPutMessageBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BInPutMessageBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
//  - InternalServiceError
type BInPutMessageBatchResult struct {
  Success *PutMessageBatchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  EntityDisabled *EntityDisabledError `thrift:"entityDisabled,2" db:"entityDisabled" json:"entityDisabled,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,3" db:"requestError" json:"requestError,omitempty"`
  InternalServiceError *InternalServiceError `thrift:"internalServiceError,4" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewBInPutMessageBatchResult() *BInPutMessageBatchResult {
  return &BInPutMessageBatchResult{}
}

var BInPutMessageBatchResult_Success_DEFAULT *PutMessageBatchResult_
func (p *BInPutMessageBatchResult) GetSuccess() *PutMessageBatchResult_ {
  if !p.IsSetSuccess() {
    return BInPutMessageBatchResult_Success_DEFAULT
  }
return p.Success
}
var BInPutMessageBatchResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BInPutMessageBatchResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BInPutMessageBatchResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BInPutMessageBatchResult_EntityDisabled_DEFAULT *EntityDisabledError
func (p *BInPutMessageBatchResult) GetEntityDisabled() *EntityDisabledError {
  if !p.IsSetEntityDisabled() {
    return BInPutMessageBatchResult_EntityDisabled_DEFAULT
  }
return p.EntityDisabled
}
var BInPutMessageBatchResult_RequestError_DEFAULT *BadRequestError
func (p *BInPutMessageBatchResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BInPutMessageBatchResult_RequestError_DEFAULT
  }
return p.RequestError
}
var BInPutMessageBatchResult_InternalServiceError_DEFAULT *InternalServiceError
func (p *BInPutMessageBatchResult) GetInternalServiceError() *InternalServiceError {
  if !p.IsSetInternalServiceError() {
    return BInPutMessageBatchResult_InternalServiceError_DEFAULT
  }
return p.InternalServiceError
}
func (p *BInPutMessageBatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BInPutMessageBatchResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BInPutMessageBatchResult) IsSetEntityDisabled() bool {
  return p.EntityDisabled != nil
}

func (p *BInPutMessageBatchResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BInPutMessageBatchResult) IsSetInternalServiceError() bool {
  return p.InternalServiceError != nil
}

func (p *BInPutMessageBatchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BInPutMessageBatchResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PutMessageBatchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BInPutMessageBatchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BInPutMessageBatchResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityDisabled = &EntityDisabledError{}
  if err := p.EntityDisabled.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
  }
  return nil
}

func (p *BInPutMessageBatchResult)  ReadField3(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BInPutMessageBatchResult)  ReadField4(iprot thrift.TProtocol) error {
  p.InternalServiceError = &InternalServiceError{}
  if err := p.InternalServiceError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
  }
  return nil
}

func (p *BInPutMessageBatchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putMessageBatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BInPutMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BInPutMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BInPutMessageBatchResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityDisabled() {
    if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err) }
    if err := p.EntityDisabled.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err) }
  }
  return err
}

func (p *BInPutMessageBatchResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err) }
  }
  return err
}

func (p *BInPutMessageBatchResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalServiceError() {
    if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:internalServiceError: ", p), err) }
    if err := p.InternalServiceError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:internalServiceError: ", p), err) }
  }
  return err
}

func (p *BInPutMessageBatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BInPutMessageBatchResult(%+v)", *p)
}


type BOut interface {
  // Parameters:
  //  - AckRequest
  AckMessages(ackRequest *AckMessagesRequest) (err error)
  // Parameters:
  //  - Request
  SetConsumedMessages(request *SetConsumedMessagesRequest) (err error)
  // Non-streaming consume API
  // 
  // 
  // Parameters:
  //  - Request
  ReceiveMessageBatch(request *ReceiveMessageBatchRequest) (r *ReceiveMessageBatchResult_, err error)
}

type BOutClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewBOutClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BOutClient {
  return &BOutClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewBOutClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BOutClient {
  return &BOutClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - AckRequest
func (p *BOutClient) AckMessages(ackRequest *AckMessagesRequest) (err error) {
  if err = p.sendAckMessages(ackRequest); err != nil { return }
  return p.recvAckMessages()
}

func (p *BOutClient) sendAckMessages(ackRequest *AckMessagesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ackMessages", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BOutAckMessagesArgs{
  AckRequest : ackRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BOutClient) recvAckMessages() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ackMessages" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ackMessages failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ackMessages failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error168 error
    error168, err = error167.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error168
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ackMessages failed: invalid message type")
    return
  }
  result := BOutAckMessagesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  return
}

// Parameters:
//  - Request
func (p *BOutClient) SetConsumedMessages(request *SetConsumedMessagesRequest) (err error) {
  if err = p.sendSetConsumedMessages(request); err != nil { return }
  return p.recvSetConsumedMessages()
}

func (p *BOutClient) sendSetConsumedMessages(request *SetConsumedMessagesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("setConsumedMessages", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BOutSetConsumedMessagesArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BOutClient) recvSetConsumedMessages() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "setConsumedMessages" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setConsumedMessages failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setConsumedMessages failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error169 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error170 error
    error170, err = error169.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error170
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setConsumedMessages failed: invalid message type")
    return
  }
  result := BOutSetConsumedMessagesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  }
  return
}

// Non-streaming consume API
// 
// 
// Parameters:
//  - Request
func (p *BOutClient) ReceiveMessageBatch(request *ReceiveMessageBatchRequest) (r *ReceiveMessageBatchResult_, err error) {
  if err = p.sendReceiveMessageBatch(request); err != nil { return }
  return p.recvReceiveMessageBatch()
}

func (p *BOutClient) sendReceiveMessageBatch(request *ReceiveMessageBatchRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("receiveMessageBatch", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BOutReceiveMessageBatchArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BOutClient) recvReceiveMessageBatch() (value *ReceiveMessageBatchResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "receiveMessageBatch" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "receiveMessageBatch failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "receiveMessageBatch failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error171 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error172 error
    error172, err = error171.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error172
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "receiveMessageBatch failed: invalid message type")
    return
  }
  result := BOutReceiveMessageBatchResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.EntityDisabled != nil {
    err = result.EntityDisabled
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.TimeoutError != nil {
    err = result.TimeoutError
    return 
  }
  value = result.GetSuccess()
  return
}


type BOutProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BOut
}

func (p *BOutProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BOutProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BOutProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBOutProcessor(handler BOut) *BOutProcessor {

  self173 := &BOutProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self173.processorMap["ackMessages"] = &bOutProcessorAckMessages{handler:handler}
  self173.processorMap["setConsumedMessages"] = &bOutProcessorSetConsumedMessages{handler:handler}
  self173.processorMap["receiveMessageBatch"] = &bOutProcessorReceiveMessageBatch{handler:handler}
return self173
}

func (p *BOutProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x174 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x174.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x174

}

type bOutProcessorAckMessages struct {
  handler BOut
}

func (p *bOutProcessorAckMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BOutAckMessagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ackMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BOutAckMessagesResult{}
  var err2 error
  if err2 = p.handler.AckMessages(args.AckRequest); err2 != nil {
  switch v := err2.(type) {
    case *InvalidAckIdError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ackMessages: " + err2.Error())
    oprot.WriteMessageBegin("ackMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("ackMessages", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bOutProcessorSetConsumedMessages struct {
  handler BOut
}

func (p *bOutProcessorSetConsumedMessages) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BOutSetConsumedMessagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setConsumedMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BOutSetConsumedMessagesResult{}
  var err2 error
  if err2 = p.handler.SetConsumedMessages(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *InvalidAddressError:
  result.EntityError = v
    case *BadRequestError:
  result.RequestError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setConsumedMessages: " + err2.Error())
    oprot.WriteMessageBegin("setConsumedMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setConsumedMessages", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bOutProcessorReceiveMessageBatch struct {
  handler BOut
}

func (p *bOutProcessorReceiveMessageBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BOutReceiveMessageBatchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("receiveMessageBatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BOutReceiveMessageBatchResult{}
var retval *ReceiveMessageBatchResult_
  var err2 error
  if retval, err2 = p.handler.ReceiveMessageBatch(args.Request); err2 != nil {
  switch v := err2.(type) {
    case *EntityNotExistsError:
  result.EntityError = v
    case *EntityDisabledError:
  result.EntityDisabled = v
    case *BadRequestError:
  result.RequestError = v
    case *TimeoutError:
  result.TimeoutError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing receiveMessageBatch: " + err2.Error())
    oprot.WriteMessageBegin("receiveMessageBatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("receiveMessageBatch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AckRequest
type BOutAckMessagesArgs struct {
  AckRequest *AckMessagesRequest `thrift:"ackRequest,1" db:"ackRequest" json:"ackRequest"`
}

func NewBOutAckMessagesArgs() *BOutAckMessagesArgs {
  return &BOutAckMessagesArgs{}
}

var BOutAckMessagesArgs_AckRequest_DEFAULT *AckMessagesRequest
func (p *BOutAckMessagesArgs) GetAckRequest() *AckMessagesRequest {
  if !p.IsSetAckRequest() {
    return BOutAckMessagesArgs_AckRequest_DEFAULT
  }
return p.AckRequest
}
func (p *BOutAckMessagesArgs) IsSetAckRequest() bool {
  return p.AckRequest != nil
}

func (p *BOutAckMessagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BOutAckMessagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AckRequest = &AckMessagesRequest{}
  if err := p.AckRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AckRequest), err)
  }
  return nil
}

func (p *BOutAckMessagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ackMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BOutAckMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ackRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ackRequest: ", p), err) }
  if err := p.AckRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AckRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ackRequest: ", p), err) }
  return err
}

func (p *BOutAckMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BOutAckMessagesArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BOutAckMessagesResult struct {
  EntityError *InvalidAckIdError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBOutAckMessagesResult() *BOutAckMessagesResult {
  return &BOutAckMessagesResult{}
}

var BOutAckMessagesResult_EntityError_DEFAULT *InvalidAckIdError
func (p *BOutAckMessagesResult) GetEntityError() *InvalidAckIdError {
  if !p.IsSetEntityError() {
    return BOutAckMessagesResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BOutAckMessagesResult_RequestError_DEFAULT *BadRequestError
func (p *BOutAckMessagesResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BOutAckMessagesResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BOutAckMessagesResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BOutAckMessagesResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BOutAckMessagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BOutAckMessagesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &InvalidAckIdError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BOutAckMessagesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BOutAckMessagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ackMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BOutAckMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BOutAckMessagesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BOutAckMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BOutAckMessagesResult(%+v)", *p)
}

// Attributes:
//  - Request
type BOutSetConsumedMessagesArgs struct {
  Request *SetConsumedMessagesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBOutSetConsumedMessagesArgs() *BOutSetConsumedMessagesArgs {
  return &BOutSetConsumedMessagesArgs{}
}

var BOutSetConsumedMessagesArgs_Request_DEFAULT *SetConsumedMessagesRequest
func (p *BOutSetConsumedMessagesArgs) GetRequest() *SetConsumedMessagesRequest {
  if !p.IsSetRequest() {
    return BOutSetConsumedMessagesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BOutSetConsumedMessagesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BOutSetConsumedMessagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BOutSetConsumedMessagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SetConsumedMessagesRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BOutSetConsumedMessagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setConsumedMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BOutSetConsumedMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BOutSetConsumedMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BOutSetConsumedMessagesArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
type BOutSetConsumedMessagesResult struct {
  EntityError *InvalidAddressError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
}

func NewBOutSetConsumedMessagesResult() *BOutSetConsumedMessagesResult {
  return &BOutSetConsumedMessagesResult{}
}

var BOutSetConsumedMessagesResult_EntityError_DEFAULT *InvalidAddressError
func (p *BOutSetConsumedMessagesResult) GetEntityError() *InvalidAddressError {
  if !p.IsSetEntityError() {
    return BOutSetConsumedMessagesResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BOutSetConsumedMessagesResult_RequestError_DEFAULT *BadRequestError
func (p *BOutSetConsumedMessagesResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BOutSetConsumedMessagesResult_RequestError_DEFAULT
  }
return p.RequestError
}
func (p *BOutSetConsumedMessagesResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BOutSetConsumedMessagesResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BOutSetConsumedMessagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BOutSetConsumedMessagesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &InvalidAddressError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BOutSetConsumedMessagesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BOutSetConsumedMessagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setConsumedMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BOutSetConsumedMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BOutSetConsumedMessagesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *BOutSetConsumedMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BOutSetConsumedMessagesResult(%+v)", *p)
}

// Attributes:
//  - Request
type BOutReceiveMessageBatchArgs struct {
  Request *ReceiveMessageBatchRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewBOutReceiveMessageBatchArgs() *BOutReceiveMessageBatchArgs {
  return &BOutReceiveMessageBatchArgs{}
}

var BOutReceiveMessageBatchArgs_Request_DEFAULT *ReceiveMessageBatchRequest
func (p *BOutReceiveMessageBatchArgs) GetRequest() *ReceiveMessageBatchRequest {
  if !p.IsSetRequest() {
    return BOutReceiveMessageBatchArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BOutReceiveMessageBatchArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BOutReceiveMessageBatchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReceiveMessageBatchRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("receiveMessageBatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BOutReceiveMessageBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BOutReceiveMessageBatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BOutReceiveMessageBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - EntityDisabled
//  - RequestError
//  - TimeoutError
type BOutReceiveMessageBatchResult struct {
  Success *ReceiveMessageBatchResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  EntityDisabled *EntityDisabledError `thrift:"entityDisabled,2" db:"entityDisabled" json:"entityDisabled,omitempty"`
  RequestError *BadRequestError `thrift:"requestError,3" db:"requestError" json:"requestError,omitempty"`
  TimeoutError *TimeoutError `thrift:"timeoutError,4" db:"timeoutError" json:"timeoutError,omitempty"`
}

func NewBOutReceiveMessageBatchResult() *BOutReceiveMessageBatchResult {
  return &BOutReceiveMessageBatchResult{}
}

var BOutReceiveMessageBatchResult_Success_DEFAULT *ReceiveMessageBatchResult_
func (p *BOutReceiveMessageBatchResult) GetSuccess() *ReceiveMessageBatchResult_ {
  if !p.IsSetSuccess() {
    return BOutReceiveMessageBatchResult_Success_DEFAULT
  }
return p.Success
}
var BOutReceiveMessageBatchResult_EntityError_DEFAULT *EntityNotExistsError
func (p *BOutReceiveMessageBatchResult) GetEntityError() *EntityNotExistsError {
  if !p.IsSetEntityError() {
    return BOutReceiveMessageBatchResult_EntityError_DEFAULT
  }
return p.EntityError
}
var BOutReceiveMessageBatchResult_EntityDisabled_DEFAULT *EntityDisabledError
func (p *BOutReceiveMessageBatchResult) GetEntityDisabled() *EntityDisabledError {
  if !p.IsSetEntityDisabled() {
    return BOutReceiveMessageBatchResult_EntityDisabled_DEFAULT
  }
return p.EntityDisabled
}
var BOutReceiveMessageBatchResult_RequestError_DEFAULT *BadRequestError
func (p *BOutReceiveMessageBatchResult) GetRequestError() *BadRequestError {
  if !p.IsSetRequestError() {
    return BOutReceiveMessageBatchResult_RequestError_DEFAULT
  }
return p.RequestError
}
var BOutReceiveMessageBatchResult_TimeoutError_DEFAULT *TimeoutError
func (p *BOutReceiveMessageBatchResult) GetTimeoutError() *TimeoutError {
  if !p.IsSetTimeoutError() {
    return BOutReceiveMessageBatchResult_TimeoutError_DEFAULT
  }
return p.TimeoutError
}
func (p *BOutReceiveMessageBatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetEntityDisabled() bool {
  return p.EntityDisabled != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *BOutReceiveMessageBatchResult) IsSetTimeoutError() bool {
  return p.TimeoutError != nil
}

func (p *BOutReceiveMessageBatchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReceiveMessageBatchResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EntityDisabled = &EntityDisabledError{}
  if err := p.EntityDisabled.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityDisabled), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchResult)  ReadField3(iprot thrift.TProtocol) error {
  p.RequestError = &BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchResult)  ReadField4(iprot thrift.TProtocol) error {
  p.TimeoutError = &TimeoutError{}
  if err := p.TimeoutError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimeoutError), err)
  }
  return nil
}

func (p *BOutReceiveMessageBatchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("receiveMessageBatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BOutReceiveMessageBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BOutReceiveMessageBatchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *BOutReceiveMessageBatchResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityDisabled() {
    if err := oprot.WriteFieldBegin("entityDisabled", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entityDisabled: ", p), err) }
    if err := p.EntityDisabled.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityDisabled), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entityDisabled: ", p), err) }
  }
  return err
}

func (p *BOutReceiveMessageBatchResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestError: ", p), err) }
  }
  return err
}

func (p *BOutReceiveMessageBatchResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeoutError() {
    if err := oprot.WriteFieldBegin("timeoutError", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutError: ", p), err) }
    if err := p.TimeoutError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimeoutError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutError: ", p), err) }
  }
  return err
}

func (p *BOutReceiveMessageBatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BOutReceiveMessageBatchResult(%+v)", *p)
}


