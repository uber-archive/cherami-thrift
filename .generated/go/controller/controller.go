// Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package controller

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/cherami-thrift/.generated/go/shared"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
type SKU int64
const (
  SKU_Machine1 SKU = 0
)

func (p SKU) String() string {
  switch p {
  case SKU_Machine1: return "Machine1"
  }
  return "<UNSET>"
}

func SKUFromString(s string) (SKU, error) {
  switch s {
  case "Machine1": return SKU_Machine1, nil 
  }
  return SKU(0), fmt.Errorf("not a valid SKU string")
}


func SKUPtr(v SKU) *SKU { return &v }

func (p SKU) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SKU) UnmarshalText(text []byte) error {
q, err := SKUFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SKU) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SKU(v)
return nil
}

func (p * SKU) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Role int64
const (
  Role_IN Role = 0
  Role_OUT Role = 1
  Role_STORE Role = 2
)

func (p Role) String() string {
  switch p {
  case Role_IN: return "IN"
  case Role_OUT: return "OUT"
  case Role_STORE: return "STORE"
  }
  return "<UNSET>"
}

func RoleFromString(s string) (Role, error) {
  switch s {
  case "IN": return Role_IN, nil 
  case "OUT": return Role_OUT, nil 
  case "STORE": return Role_STORE, nil 
  }
  return Role(0), fmt.Errorf("not a valid Role string")
}


func RolePtr(v Role) *Role { return &v }

func (p Role) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Role) UnmarshalText(text []byte) error {
q, err := RoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Role) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Role(v)
return nil
}

func (p * Role) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NodeStatus int64
const (
  NodeStatus_DOWN NodeStatus = 0
  NodeStatus_UP NodeStatus = 1
  NodeStatus_GOING_DOWN NodeStatus = 2
)

func (p NodeStatus) String() string {
  switch p {
  case NodeStatus_DOWN: return "DOWN"
  case NodeStatus_UP: return "UP"
  case NodeStatus_GOING_DOWN: return "GOING_DOWN"
  }
  return "<UNSET>"
}

func NodeStatusFromString(s string) (NodeStatus, error) {
  switch s {
  case "DOWN": return NodeStatus_DOWN, nil 
  case "UP": return NodeStatus_UP, nil 
  case "GOING_DOWN": return NodeStatus_GOING_DOWN, nil 
  }
  return NodeStatus(0), fmt.Errorf("not a valid NodeStatus string")
}


func NodeStatusPtr(v NodeStatus) *NodeStatus { return &v }

func (p NodeStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NodeStatus) UnmarshalText(text []byte) error {
q, err := NodeStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NodeStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NodeStatus(v)
return nil
}

func (p * NodeStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Message
type QueueCacheMissError struct {
  Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewQueueCacheMissError() *QueueCacheMissError {
  return &QueueCacheMissError{}
}


func (p *QueueCacheMissError) GetMessage() string {
  return p.Message
}
func (p *QueueCacheMissError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *QueueCacheMissError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *QueueCacheMissError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueueCacheMissError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueueCacheMissError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *QueueCacheMissError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueueCacheMissError(%+v)", *p)
}

func (p *QueueCacheMissError) Error() string {
  return p.String()
}

// Attributes:
//  - DestinationUUID
type GetInputHostsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
}

func NewGetInputHostsRequest() *GetInputHostsRequest {
  return &GetInputHostsRequest{}
}

var GetInputHostsRequest_DestinationUUID_DEFAULT string
func (p *GetInputHostsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return GetInputHostsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
func (p *GetInputHostsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *GetInputHostsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetInputHostsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *GetInputHostsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetInputHostsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetInputHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *GetInputHostsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetInputHostsRequest(%+v)", *p)
}

// Attributes:
//  - InputHostIds
type GetInputHostsResult_ struct {
  InputHostIds []string `thrift:"inputHostIds,1" db:"inputHostIds" json:"inputHostIds,omitempty"`
}

func NewGetInputHostsResult_() *GetInputHostsResult_ {
  return &GetInputHostsResult_{}
}

var GetInputHostsResult__InputHostIds_DEFAULT []string

func (p *GetInputHostsResult_) GetInputHostIds() []string {
  return p.InputHostIds
}
func (p *GetInputHostsResult_) IsSetInputHostIds() bool {
  return p.InputHostIds != nil
}

func (p *GetInputHostsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetInputHostsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.InputHostIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.InputHostIds = append(p.InputHostIds, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetInputHostsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetInputHostsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetInputHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInputHostIds() {
    if err := oprot.WriteFieldBegin("inputHostIds", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputHostIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InputHostIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.InputHostIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputHostIds: ", p), err) }
  }
  return err
}

func (p *GetInputHostsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetInputHostsResult_(%+v)", *p)
}

// Attributes:
//  - DestinationUUID
//  - ConsumerGroupUUID
type GetOutputHostsRequest struct {
  DestinationUUID *string `thrift:"destinationUUID,1" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,2" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
}

func NewGetOutputHostsRequest() *GetOutputHostsRequest {
  return &GetOutputHostsRequest{}
}

var GetOutputHostsRequest_DestinationUUID_DEFAULT string
func (p *GetOutputHostsRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return GetOutputHostsRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var GetOutputHostsRequest_ConsumerGroupUUID_DEFAULT string
func (p *GetOutputHostsRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return GetOutputHostsRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
func (p *GetOutputHostsRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *GetOutputHostsRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *GetOutputHostsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetOutputHostsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *GetOutputHostsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *GetOutputHostsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetOutputHostsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetOutputHostsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:destinationUUID: ", p), err) }
  }
  return err
}

func (p *GetOutputHostsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *GetOutputHostsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOutputHostsRequest(%+v)", *p)
}

// Attributes:
//  - OutputHostIds
type GetOutputHostsResult_ struct {
  OutputHostIds []string `thrift:"outputHostIds,1" db:"outputHostIds" json:"outputHostIds,omitempty"`
}

func NewGetOutputHostsResult_() *GetOutputHostsResult_ {
  return &GetOutputHostsResult_{}
}

var GetOutputHostsResult__OutputHostIds_DEFAULT []string

func (p *GetOutputHostsResult_) GetOutputHostIds() []string {
  return p.OutputHostIds
}
func (p *GetOutputHostsResult_) IsSetOutputHostIds() bool {
  return p.OutputHostIds != nil
}

func (p *GetOutputHostsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetOutputHostsResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OutputHostIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.OutputHostIds = append(p.OutputHostIds, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetOutputHostsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetOutputHostsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetOutputHostsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostIds() {
    if err := oprot.WriteFieldBegin("outputHostIds", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outputHostIds: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputHostIds)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OutputHostIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outputHostIds: ", p), err) }
  }
  return err
}

func (p *GetOutputHostsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetOutputHostsResult_(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - RemainingDiskSpace
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - IncomingMessagesCounter
//  - OutgoingMessagesCounter
//  - IncomingBytesCounter
//  - OutgoingBytesCounter
//  - NodeStatus
type NodeMetrics struct {
  CPU *int64 `thrift:"cpu,1" db:"cpu" json:"cpu,omitempty"`
  Memory *int64 `thrift:"memory,2" db:"memory" json:"memory,omitempty"`
  RemainingDiskSpace *int64 `thrift:"remainingDiskSpace,3" db:"remainingDiskSpace" json:"remainingDiskSpace,omitempty"`
  NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,4" db:"numberOfActiveExtents" json:"numberOfActiveExtents,omitempty"`
  NumberOfConnections *int64 `thrift:"numberOfConnections,5" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,6" db:"incomingMessagesCounter" json:"incomingMessagesCounter,omitempty"`
  OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,7" db:"outgoingMessagesCounter" json:"outgoingMessagesCounter,omitempty"`
  IncomingBytesCounter *int64 `thrift:"incomingBytesCounter,8" db:"incomingBytesCounter" json:"incomingBytesCounter,omitempty"`
  OutgoingBytesCounter *int64 `thrift:"outgoingBytesCounter,9" db:"outgoingBytesCounter" json:"outgoingBytesCounter,omitempty"`
  NodeStatus *NodeStatus `thrift:"nodeStatus,10" db:"nodeStatus" json:"nodeStatus,omitempty"`
}

func NewNodeMetrics() *NodeMetrics {
  return &NodeMetrics{}
}

var NodeMetrics_CPU_DEFAULT int64
func (p *NodeMetrics) GetCPU() int64 {
  if !p.IsSetCPU() {
    return NodeMetrics_CPU_DEFAULT
  }
return *p.CPU
}
var NodeMetrics_Memory_DEFAULT int64
func (p *NodeMetrics) GetMemory() int64 {
  if !p.IsSetMemory() {
    return NodeMetrics_Memory_DEFAULT
  }
return *p.Memory
}
var NodeMetrics_RemainingDiskSpace_DEFAULT int64
func (p *NodeMetrics) GetRemainingDiskSpace() int64 {
  if !p.IsSetRemainingDiskSpace() {
    return NodeMetrics_RemainingDiskSpace_DEFAULT
  }
return *p.RemainingDiskSpace
}
var NodeMetrics_NumberOfActiveExtents_DEFAULT int64
func (p *NodeMetrics) GetNumberOfActiveExtents() int64 {
  if !p.IsSetNumberOfActiveExtents() {
    return NodeMetrics_NumberOfActiveExtents_DEFAULT
  }
return *p.NumberOfActiveExtents
}
var NodeMetrics_NumberOfConnections_DEFAULT int64
func (p *NodeMetrics) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return NodeMetrics_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var NodeMetrics_IncomingMessagesCounter_DEFAULT int64
func (p *NodeMetrics) GetIncomingMessagesCounter() int64 {
  if !p.IsSetIncomingMessagesCounter() {
    return NodeMetrics_IncomingMessagesCounter_DEFAULT
  }
return *p.IncomingMessagesCounter
}
var NodeMetrics_OutgoingMessagesCounter_DEFAULT int64
func (p *NodeMetrics) GetOutgoingMessagesCounter() int64 {
  if !p.IsSetOutgoingMessagesCounter() {
    return NodeMetrics_OutgoingMessagesCounter_DEFAULT
  }
return *p.OutgoingMessagesCounter
}
var NodeMetrics_IncomingBytesCounter_DEFAULT int64
func (p *NodeMetrics) GetIncomingBytesCounter() int64 {
  if !p.IsSetIncomingBytesCounter() {
    return NodeMetrics_IncomingBytesCounter_DEFAULT
  }
return *p.IncomingBytesCounter
}
var NodeMetrics_OutgoingBytesCounter_DEFAULT int64
func (p *NodeMetrics) GetOutgoingBytesCounter() int64 {
  if !p.IsSetOutgoingBytesCounter() {
    return NodeMetrics_OutgoingBytesCounter_DEFAULT
  }
return *p.OutgoingBytesCounter
}
var NodeMetrics_NodeStatus_DEFAULT NodeStatus
func (p *NodeMetrics) GetNodeStatus() NodeStatus {
  if !p.IsSetNodeStatus() {
    return NodeMetrics_NodeStatus_DEFAULT
  }
return *p.NodeStatus
}
func (p *NodeMetrics) IsSetCPU() bool {
  return p.CPU != nil
}

func (p *NodeMetrics) IsSetMemory() bool {
  return p.Memory != nil
}

func (p *NodeMetrics) IsSetRemainingDiskSpace() bool {
  return p.RemainingDiskSpace != nil
}

func (p *NodeMetrics) IsSetNumberOfActiveExtents() bool {
  return p.NumberOfActiveExtents != nil
}

func (p *NodeMetrics) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *NodeMetrics) IsSetIncomingMessagesCounter() bool {
  return p.IncomingMessagesCounter != nil
}

func (p *NodeMetrics) IsSetOutgoingMessagesCounter() bool {
  return p.OutgoingMessagesCounter != nil
}

func (p *NodeMetrics) IsSetIncomingBytesCounter() bool {
  return p.IncomingBytesCounter != nil
}

func (p *NodeMetrics) IsSetOutgoingBytesCounter() bool {
  return p.OutgoingBytesCounter != nil
}

func (p *NodeMetrics) IsSetNodeStatus() bool {
  return p.NodeStatus != nil
}

func (p *NodeMetrics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NodeMetrics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CPU = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Memory = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RemainingDiskSpace = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumberOfActiveExtents = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IncomingMessagesCounter = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OutgoingMessagesCounter = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IncomingBytesCounter = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.OutgoingBytesCounter = &v
}
  return nil
}

func (p *NodeMetrics)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := NodeStatus(v)
  p.NodeStatus = &temp
}
  return nil
}

func (p *NodeMetrics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NodeMetrics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NodeMetrics) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCPU() {
    if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemory() {
    if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRemainingDiskSpace() {
    if err := oprot.WriteFieldBegin("remainingDiskSpace", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remainingDiskSpace: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RemainingDiskSpace)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remainingDiskSpace (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remainingDiskSpace: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfActiveExtents() {
    if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfActiveExtents: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfActiveExtents: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingMessagesCounter() {
    if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingMessagesCounter() {
    if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:outgoingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:outgoingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingBytesCounter() {
    if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:incomingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:incomingBytesCounter: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingBytesCounter() {
    if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:outgoingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:outgoingBytesCounter: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetNodeStatus() {
    if err := oprot.WriteFieldBegin("nodeStatus", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nodeStatus: ", p), err) }
    if err := oprot.WriteI32(int32(*p.NodeStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nodeStatus (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nodeStatus: ", p), err) }
  }
  return err
}

func (p *NodeMetrics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeMetrics(%+v)", *p)
}

// Attributes:
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - IncomingMessagesCounter
//  - IncomingBytesCounter
type DestinationMetrics struct {
  NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,1" db:"numberOfActiveExtents" json:"numberOfActiveExtents,omitempty"`
  NumberOfConnections *int64 `thrift:"numberOfConnections,2" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,3" db:"incomingMessagesCounter" json:"incomingMessagesCounter,omitempty"`
  IncomingBytesCounter *int64 `thrift:"incomingBytesCounter,4" db:"incomingBytesCounter" json:"incomingBytesCounter,omitempty"`
}

func NewDestinationMetrics() *DestinationMetrics {
  return &DestinationMetrics{}
}

var DestinationMetrics_NumberOfActiveExtents_DEFAULT int64
func (p *DestinationMetrics) GetNumberOfActiveExtents() int64 {
  if !p.IsSetNumberOfActiveExtents() {
    return DestinationMetrics_NumberOfActiveExtents_DEFAULT
  }
return *p.NumberOfActiveExtents
}
var DestinationMetrics_NumberOfConnections_DEFAULT int64
func (p *DestinationMetrics) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return DestinationMetrics_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var DestinationMetrics_IncomingMessagesCounter_DEFAULT int64
func (p *DestinationMetrics) GetIncomingMessagesCounter() int64 {
  if !p.IsSetIncomingMessagesCounter() {
    return DestinationMetrics_IncomingMessagesCounter_DEFAULT
  }
return *p.IncomingMessagesCounter
}
var DestinationMetrics_IncomingBytesCounter_DEFAULT int64
func (p *DestinationMetrics) GetIncomingBytesCounter() int64 {
  if !p.IsSetIncomingBytesCounter() {
    return DestinationMetrics_IncomingBytesCounter_DEFAULT
  }
return *p.IncomingBytesCounter
}
func (p *DestinationMetrics) IsSetNumberOfActiveExtents() bool {
  return p.NumberOfActiveExtents != nil
}

func (p *DestinationMetrics) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *DestinationMetrics) IsSetIncomingMessagesCounter() bool {
  return p.IncomingMessagesCounter != nil
}

func (p *DestinationMetrics) IsSetIncomingBytesCounter() bool {
  return p.IncomingBytesCounter != nil
}

func (p *DestinationMetrics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationMetrics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumberOfActiveExtents = &v
}
  return nil
}

func (p *DestinationMetrics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *DestinationMetrics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IncomingMessagesCounter = &v
}
  return nil
}

func (p *DestinationMetrics)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IncomingBytesCounter = &v
}
  return nil
}

func (p *DestinationMetrics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationMetrics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationMetrics) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfActiveExtents() {
    if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfActiveExtents: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfActiveExtents: ", p), err) }
  }
  return err
}

func (p *DestinationMetrics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *DestinationMetrics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingMessagesCounter() {
    if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:incomingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:incomingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *DestinationMetrics) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingBytesCounter() {
    if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:incomingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:incomingBytesCounter: ", p), err) }
  }
  return err
}

func (p *DestinationMetrics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationMetrics(%+v)", *p)
}

// Attributes:
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - OutgoingMessagesCounter
//  - OutgoingBytesCounter
//  - SmartRetryOnCounter
type ConsumerGroupMetrics struct {
  NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,1" db:"numberOfActiveExtents" json:"numberOfActiveExtents,omitempty"`
  NumberOfConnections *int64 `thrift:"numberOfConnections,2" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,3" db:"outgoingMessagesCounter" json:"outgoingMessagesCounter,omitempty"`
  OutgoingBytesCounter *int64 `thrift:"outgoingBytesCounter,4" db:"outgoingBytesCounter" json:"outgoingBytesCounter,omitempty"`
  SmartRetryOnCounter *int64 `thrift:"smartRetryOnCounter,5" db:"smartRetryOnCounter" json:"smartRetryOnCounter,omitempty"`
}

func NewConsumerGroupMetrics() *ConsumerGroupMetrics {
  return &ConsumerGroupMetrics{}
}

var ConsumerGroupMetrics_NumberOfActiveExtents_DEFAULT int64
func (p *ConsumerGroupMetrics) GetNumberOfActiveExtents() int64 {
  if !p.IsSetNumberOfActiveExtents() {
    return ConsumerGroupMetrics_NumberOfActiveExtents_DEFAULT
  }
return *p.NumberOfActiveExtents
}
var ConsumerGroupMetrics_NumberOfConnections_DEFAULT int64
func (p *ConsumerGroupMetrics) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return ConsumerGroupMetrics_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var ConsumerGroupMetrics_OutgoingMessagesCounter_DEFAULT int64
func (p *ConsumerGroupMetrics) GetOutgoingMessagesCounter() int64 {
  if !p.IsSetOutgoingMessagesCounter() {
    return ConsumerGroupMetrics_OutgoingMessagesCounter_DEFAULT
  }
return *p.OutgoingMessagesCounter
}
var ConsumerGroupMetrics_OutgoingBytesCounter_DEFAULT int64
func (p *ConsumerGroupMetrics) GetOutgoingBytesCounter() int64 {
  if !p.IsSetOutgoingBytesCounter() {
    return ConsumerGroupMetrics_OutgoingBytesCounter_DEFAULT
  }
return *p.OutgoingBytesCounter
}
var ConsumerGroupMetrics_SmartRetryOnCounter_DEFAULT int64
func (p *ConsumerGroupMetrics) GetSmartRetryOnCounter() int64 {
  if !p.IsSetSmartRetryOnCounter() {
    return ConsumerGroupMetrics_SmartRetryOnCounter_DEFAULT
  }
return *p.SmartRetryOnCounter
}
func (p *ConsumerGroupMetrics) IsSetNumberOfActiveExtents() bool {
  return p.NumberOfActiveExtents != nil
}

func (p *ConsumerGroupMetrics) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *ConsumerGroupMetrics) IsSetOutgoingMessagesCounter() bool {
  return p.OutgoingMessagesCounter != nil
}

func (p *ConsumerGroupMetrics) IsSetOutgoingBytesCounter() bool {
  return p.OutgoingBytesCounter != nil
}

func (p *ConsumerGroupMetrics) IsSetSmartRetryOnCounter() bool {
  return p.SmartRetryOnCounter != nil
}

func (p *ConsumerGroupMetrics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupMetrics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumberOfActiveExtents = &v
}
  return nil
}

func (p *ConsumerGroupMetrics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *ConsumerGroupMetrics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OutgoingMessagesCounter = &v
}
  return nil
}

func (p *ConsumerGroupMetrics)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OutgoingBytesCounter = &v
}
  return nil
}

func (p *ConsumerGroupMetrics)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SmartRetryOnCounter = &v
}
  return nil
}

func (p *ConsumerGroupMetrics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupMetrics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupMetrics) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfActiveExtents() {
    if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfActiveExtents: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfActiveExtents: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupMetrics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupMetrics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingMessagesCounter() {
    if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outgoingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outgoingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupMetrics) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingBytesCounter() {
    if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outgoingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outgoingBytesCounter: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupMetrics) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetSmartRetryOnCounter() {
    if err := oprot.WriteFieldBegin("smartRetryOnCounter", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:smartRetryOnCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.SmartRetryOnCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.smartRetryOnCounter (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:smartRetryOnCounter: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupMetrics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupMetrics(%+v)", *p)
}

// Attributes:
//  - IncomingMessagesCounter
//  - IncomingBytesCounter
//  - PutMessageLatency
type DestinationExtentMetrics struct {
  IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,1" db:"incomingMessagesCounter" json:"incomingMessagesCounter,omitempty"`
  IncomingBytesCounter *int64 `thrift:"incomingBytesCounter,2" db:"incomingBytesCounter" json:"incomingBytesCounter,omitempty"`
  PutMessageLatency *int64 `thrift:"putMessageLatency,3" db:"putMessageLatency" json:"putMessageLatency,omitempty"`
}

func NewDestinationExtentMetrics() *DestinationExtentMetrics {
  return &DestinationExtentMetrics{}
}

var DestinationExtentMetrics_IncomingMessagesCounter_DEFAULT int64
func (p *DestinationExtentMetrics) GetIncomingMessagesCounter() int64 {
  if !p.IsSetIncomingMessagesCounter() {
    return DestinationExtentMetrics_IncomingMessagesCounter_DEFAULT
  }
return *p.IncomingMessagesCounter
}
var DestinationExtentMetrics_IncomingBytesCounter_DEFAULT int64
func (p *DestinationExtentMetrics) GetIncomingBytesCounter() int64 {
  if !p.IsSetIncomingBytesCounter() {
    return DestinationExtentMetrics_IncomingBytesCounter_DEFAULT
  }
return *p.IncomingBytesCounter
}
var DestinationExtentMetrics_PutMessageLatency_DEFAULT int64
func (p *DestinationExtentMetrics) GetPutMessageLatency() int64 {
  if !p.IsSetPutMessageLatency() {
    return DestinationExtentMetrics_PutMessageLatency_DEFAULT
  }
return *p.PutMessageLatency
}
func (p *DestinationExtentMetrics) IsSetIncomingMessagesCounter() bool {
  return p.IncomingMessagesCounter != nil
}

func (p *DestinationExtentMetrics) IsSetIncomingBytesCounter() bool {
  return p.IncomingBytesCounter != nil
}

func (p *DestinationExtentMetrics) IsSetPutMessageLatency() bool {
  return p.PutMessageLatency != nil
}

func (p *DestinationExtentMetrics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DestinationExtentMetrics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IncomingMessagesCounter = &v
}
  return nil
}

func (p *DestinationExtentMetrics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IncomingBytesCounter = &v
}
  return nil
}

func (p *DestinationExtentMetrics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PutMessageLatency = &v
}
  return nil
}

func (p *DestinationExtentMetrics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DestinationExtentMetrics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DestinationExtentMetrics) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingMessagesCounter() {
    if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:incomingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:incomingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *DestinationExtentMetrics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingBytesCounter() {
    if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:incomingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:incomingBytesCounter: ", p), err) }
  }
  return err
}

func (p *DestinationExtentMetrics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPutMessageLatency() {
    if err := oprot.WriteFieldBegin("putMessageLatency", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:putMessageLatency: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PutMessageLatency)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.putMessageLatency (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:putMessageLatency: ", p), err) }
  }
  return err
}

func (p *DestinationExtentMetrics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DestinationExtentMetrics(%+v)", *p)
}

// Attributes:
//  - OutgoingMessagesCounter
//  - OutgoingBytesCounter
type ConsumerGroupExtentMetrics struct {
  OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,1" db:"outgoingMessagesCounter" json:"outgoingMessagesCounter,omitempty"`
  OutgoingBytesCounter *int64 `thrift:"outgoingBytesCounter,2" db:"outgoingBytesCounter" json:"outgoingBytesCounter,omitempty"`
}

func NewConsumerGroupExtentMetrics() *ConsumerGroupExtentMetrics {
  return &ConsumerGroupExtentMetrics{}
}

var ConsumerGroupExtentMetrics_OutgoingMessagesCounter_DEFAULT int64
func (p *ConsumerGroupExtentMetrics) GetOutgoingMessagesCounter() int64 {
  if !p.IsSetOutgoingMessagesCounter() {
    return ConsumerGroupExtentMetrics_OutgoingMessagesCounter_DEFAULT
  }
return *p.OutgoingMessagesCounter
}
var ConsumerGroupExtentMetrics_OutgoingBytesCounter_DEFAULT int64
func (p *ConsumerGroupExtentMetrics) GetOutgoingBytesCounter() int64 {
  if !p.IsSetOutgoingBytesCounter() {
    return ConsumerGroupExtentMetrics_OutgoingBytesCounter_DEFAULT
  }
return *p.OutgoingBytesCounter
}
func (p *ConsumerGroupExtentMetrics) IsSetOutgoingMessagesCounter() bool {
  return p.OutgoingMessagesCounter != nil
}

func (p *ConsumerGroupExtentMetrics) IsSetOutgoingBytesCounter() bool {
  return p.OutgoingBytesCounter != nil
}

func (p *ConsumerGroupExtentMetrics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerGroupExtentMetrics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OutgoingMessagesCounter = &v
}
  return nil
}

func (p *ConsumerGroupExtentMetrics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OutgoingBytesCounter = &v
}
  return nil
}

func (p *ConsumerGroupExtentMetrics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerGroupExtentMetrics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerGroupExtentMetrics) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingMessagesCounter() {
    if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outgoingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outgoingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtentMetrics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingBytesCounter() {
    if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outgoingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outgoingBytesCounter: ", p), err) }
  }
  return err
}

func (p *ConsumerGroupExtentMetrics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerGroupExtentMetrics(%+v)", *p)
}

// Attributes:
//  - NumberOfConnections
//  - IncomingMessagesCounter
//  - IncomingBytesCounter
//  - WriteMessageLatency
//  - OutgoingMessagesCounter
//  - OutgoingBytesCounter
//  - ReadMessageLatency
//  - ExtentStatus
type StoreExtentMetrics struct {
  NumberOfConnections *int64 `thrift:"numberOfConnections,1" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  IncomingMessagesCounter *int64 `thrift:"incomingMessagesCounter,2" db:"incomingMessagesCounter" json:"incomingMessagesCounter,omitempty"`
  IncomingBytesCounter *int64 `thrift:"incomingBytesCounter,3" db:"incomingBytesCounter" json:"incomingBytesCounter,omitempty"`
  WriteMessageLatency *int64 `thrift:"writeMessageLatency,4" db:"writeMessageLatency" json:"writeMessageLatency,omitempty"`
  OutgoingMessagesCounter *int64 `thrift:"outgoingMessagesCounter,5" db:"outgoingMessagesCounter" json:"outgoingMessagesCounter,omitempty"`
  OutgoingBytesCounter *int64 `thrift:"outgoingBytesCounter,6" db:"outgoingBytesCounter" json:"outgoingBytesCounter,omitempty"`
  ReadMessageLatency *int64 `thrift:"readMessageLatency,7" db:"readMessageLatency" json:"readMessageLatency,omitempty"`
  ExtentStatus *shared.ExtentStatus `thrift:"extentStatus,8" db:"extentStatus" json:"extentStatus,omitempty"`
}

func NewStoreExtentMetrics() *StoreExtentMetrics {
  return &StoreExtentMetrics{}
}

var StoreExtentMetrics_NumberOfConnections_DEFAULT int64
func (p *StoreExtentMetrics) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return StoreExtentMetrics_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var StoreExtentMetrics_IncomingMessagesCounter_DEFAULT int64
func (p *StoreExtentMetrics) GetIncomingMessagesCounter() int64 {
  if !p.IsSetIncomingMessagesCounter() {
    return StoreExtentMetrics_IncomingMessagesCounter_DEFAULT
  }
return *p.IncomingMessagesCounter
}
var StoreExtentMetrics_IncomingBytesCounter_DEFAULT int64
func (p *StoreExtentMetrics) GetIncomingBytesCounter() int64 {
  if !p.IsSetIncomingBytesCounter() {
    return StoreExtentMetrics_IncomingBytesCounter_DEFAULT
  }
return *p.IncomingBytesCounter
}
var StoreExtentMetrics_WriteMessageLatency_DEFAULT int64
func (p *StoreExtentMetrics) GetWriteMessageLatency() int64 {
  if !p.IsSetWriteMessageLatency() {
    return StoreExtentMetrics_WriteMessageLatency_DEFAULT
  }
return *p.WriteMessageLatency
}
var StoreExtentMetrics_OutgoingMessagesCounter_DEFAULT int64
func (p *StoreExtentMetrics) GetOutgoingMessagesCounter() int64 {
  if !p.IsSetOutgoingMessagesCounter() {
    return StoreExtentMetrics_OutgoingMessagesCounter_DEFAULT
  }
return *p.OutgoingMessagesCounter
}
var StoreExtentMetrics_OutgoingBytesCounter_DEFAULT int64
func (p *StoreExtentMetrics) GetOutgoingBytesCounter() int64 {
  if !p.IsSetOutgoingBytesCounter() {
    return StoreExtentMetrics_OutgoingBytesCounter_DEFAULT
  }
return *p.OutgoingBytesCounter
}
var StoreExtentMetrics_ReadMessageLatency_DEFAULT int64
func (p *StoreExtentMetrics) GetReadMessageLatency() int64 {
  if !p.IsSetReadMessageLatency() {
    return StoreExtentMetrics_ReadMessageLatency_DEFAULT
  }
return *p.ReadMessageLatency
}
var StoreExtentMetrics_ExtentStatus_DEFAULT shared.ExtentStatus
func (p *StoreExtentMetrics) GetExtentStatus() shared.ExtentStatus {
  if !p.IsSetExtentStatus() {
    return StoreExtentMetrics_ExtentStatus_DEFAULT
  }
return *p.ExtentStatus
}
func (p *StoreExtentMetrics) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *StoreExtentMetrics) IsSetIncomingMessagesCounter() bool {
  return p.IncomingMessagesCounter != nil
}

func (p *StoreExtentMetrics) IsSetIncomingBytesCounter() bool {
  return p.IncomingBytesCounter != nil
}

func (p *StoreExtentMetrics) IsSetWriteMessageLatency() bool {
  return p.WriteMessageLatency != nil
}

func (p *StoreExtentMetrics) IsSetOutgoingMessagesCounter() bool {
  return p.OutgoingMessagesCounter != nil
}

func (p *StoreExtentMetrics) IsSetOutgoingBytesCounter() bool {
  return p.OutgoingBytesCounter != nil
}

func (p *StoreExtentMetrics) IsSetReadMessageLatency() bool {
  return p.ReadMessageLatency != nil
}

func (p *StoreExtentMetrics) IsSetExtentStatus() bool {
  return p.ExtentStatus != nil
}

func (p *StoreExtentMetrics) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StoreExtentMetrics)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IncomingMessagesCounter = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IncomingBytesCounter = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WriteMessageLatency = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OutgoingMessagesCounter = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OutgoingBytesCounter = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ReadMessageLatency = &v
}
  return nil
}

func (p *StoreExtentMetrics)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := shared.ExtentStatus(v)
  p.ExtentStatus = &temp
}
  return nil
}

func (p *StoreExtentMetrics) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StoreExtentMetrics"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StoreExtentMetrics) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingMessagesCounter() {
    if err := oprot.WriteFieldBegin("incomingMessagesCounter", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:incomingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesCounter (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:incomingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingBytesCounter() {
    if err := oprot.WriteFieldBegin("incomingBytesCounter", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:incomingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingBytesCounter (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:incomingBytesCounter: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetWriteMessageLatency() {
    if err := oprot.WriteFieldBegin("writeMessageLatency", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:writeMessageLatency: ", p), err) }
    if err := oprot.WriteI64(int64(*p.WriteMessageLatency)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.writeMessageLatency (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:writeMessageLatency: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingMessagesCounter() {
    if err := oprot.WriteFieldBegin("outgoingMessagesCounter", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outgoingMessagesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingMessagesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesCounter (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outgoingMessagesCounter: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingBytesCounter() {
    if err := oprot.WriteFieldBegin("outgoingBytesCounter", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:outgoingBytesCounter: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingBytesCounter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesCounter (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:outgoingBytesCounter: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadMessageLatency() {
    if err := oprot.WriteFieldBegin("readMessageLatency", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:readMessageLatency: ", p), err) }
    if err := oprot.WriteI64(int64(*p.ReadMessageLatency)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readMessageLatency (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:readMessageLatency: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentStatus() {
    if err := oprot.WriteFieldBegin("extentStatus", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extentStatus: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ExtentStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentStatus (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extentStatus: ", p), err) }
  }
  return err
}

func (p *StoreExtentMetrics) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoreExtentMetrics(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Role
//  - HostId
//  - Metrics
//  - Timestamp
type ReportNodeMetricRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  Role *Role `thrift:"role,2" db:"role" json:"role,omitempty"`
  HostId *string `thrift:"hostId,3" db:"hostId" json:"hostId,omitempty"`
  Metrics *NodeMetrics `thrift:"metrics,4" db:"metrics" json:"metrics,omitempty"`
  Timestamp *int64 `thrift:"timestamp,5" db:"timestamp" json:"timestamp,omitempty"`
}

func NewReportNodeMetricRequest() *ReportNodeMetricRequest {
  return &ReportNodeMetricRequest{}
}

var ReportNodeMetricRequest_Sku_DEFAULT SKU
func (p *ReportNodeMetricRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return ReportNodeMetricRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReportNodeMetricRequest_Role_DEFAULT Role
func (p *ReportNodeMetricRequest) GetRole() Role {
  if !p.IsSetRole() {
    return ReportNodeMetricRequest_Role_DEFAULT
  }
return *p.Role
}
var ReportNodeMetricRequest_HostId_DEFAULT string
func (p *ReportNodeMetricRequest) GetHostId() string {
  if !p.IsSetHostId() {
    return ReportNodeMetricRequest_HostId_DEFAULT
  }
return *p.HostId
}
var ReportNodeMetricRequest_Metrics_DEFAULT *NodeMetrics
func (p *ReportNodeMetricRequest) GetMetrics() *NodeMetrics {
  if !p.IsSetMetrics() {
    return ReportNodeMetricRequest_Metrics_DEFAULT
  }
return p.Metrics
}
var ReportNodeMetricRequest_Timestamp_DEFAULT int64
func (p *ReportNodeMetricRequest) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return ReportNodeMetricRequest_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *ReportNodeMetricRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReportNodeMetricRequest) IsSetRole() bool {
  return p.Role != nil
}

func (p *ReportNodeMetricRequest) IsSetHostId() bool {
  return p.HostId != nil
}

func (p *ReportNodeMetricRequest) IsSetMetrics() bool {
  return p.Metrics != nil
}

func (p *ReportNodeMetricRequest) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ReportNodeMetricRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportNodeMetricRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *ReportNodeMetricRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Role(v)
  p.Role = &temp
}
  return nil
}

func (p *ReportNodeMetricRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HostId = &v
}
  return nil
}

func (p *ReportNodeMetricRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.Metrics = &NodeMetrics{}
  if err := p.Metrics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
  }
  return nil
}

func (p *ReportNodeMetricRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *ReportNodeMetricRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportNodeMetricRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportNodeMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *ReportNodeMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err) }
  }
  return err
}

func (p *ReportNodeMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostId() {
    if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostId: ", p), err) }
    if err := oprot.WriteString(string(*p.HostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostId (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostId: ", p), err) }
  }
  return err
}

func (p *ReportNodeMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetrics() {
    if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metrics: ", p), err) }
    if err := p.Metrics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metrics: ", p), err) }
  }
  return err
}

func (p *ReportNodeMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err) }
  }
  return err
}

func (p *ReportNodeMetricRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportNodeMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - Metrics
//  - Timestamp
type ReportDestinationMetricRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  HostId *string `thrift:"hostId,2" db:"hostId" json:"hostId,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,3" db:"destinationUUID" json:"destinationUUID,omitempty"`
  Metrics *DestinationMetrics `thrift:"metrics,4" db:"metrics" json:"metrics,omitempty"`
  Timestamp *int64 `thrift:"timestamp,5" db:"timestamp" json:"timestamp,omitempty"`
}

func NewReportDestinationMetricRequest() *ReportDestinationMetricRequest {
  return &ReportDestinationMetricRequest{}
}

var ReportDestinationMetricRequest_Sku_DEFAULT SKU
func (p *ReportDestinationMetricRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return ReportDestinationMetricRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReportDestinationMetricRequest_HostId_DEFAULT string
func (p *ReportDestinationMetricRequest) GetHostId() string {
  if !p.IsSetHostId() {
    return ReportDestinationMetricRequest_HostId_DEFAULT
  }
return *p.HostId
}
var ReportDestinationMetricRequest_DestinationUUID_DEFAULT string
func (p *ReportDestinationMetricRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReportDestinationMetricRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReportDestinationMetricRequest_Metrics_DEFAULT *DestinationMetrics
func (p *ReportDestinationMetricRequest) GetMetrics() *DestinationMetrics {
  if !p.IsSetMetrics() {
    return ReportDestinationMetricRequest_Metrics_DEFAULT
  }
return p.Metrics
}
var ReportDestinationMetricRequest_Timestamp_DEFAULT int64
func (p *ReportDestinationMetricRequest) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return ReportDestinationMetricRequest_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *ReportDestinationMetricRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReportDestinationMetricRequest) IsSetHostId() bool {
  return p.HostId != nil
}

func (p *ReportDestinationMetricRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReportDestinationMetricRequest) IsSetMetrics() bool {
  return p.Metrics != nil
}

func (p *ReportDestinationMetricRequest) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ReportDestinationMetricRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportDestinationMetricRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *ReportDestinationMetricRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostId = &v
}
  return nil
}

func (p *ReportDestinationMetricRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReportDestinationMetricRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.Metrics = &DestinationMetrics{}
  if err := p.Metrics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
  }
  return nil
}

func (p *ReportDestinationMetricRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *ReportDestinationMetricRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportDestinationMetricRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportDestinationMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *ReportDestinationMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostId() {
    if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err) }
    if err := oprot.WriteString(string(*p.HostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err) }
  }
  return err
}

func (p *ReportDestinationMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReportDestinationMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetrics() {
    if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metrics: ", p), err) }
    if err := p.Metrics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metrics: ", p), err) }
  }
  return err
}

func (p *ReportDestinationMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err) }
  }
  return err
}

func (p *ReportDestinationMetricRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportDestinationMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - ExtentUUID
//  - Metrics
//  - Timestamp
type ReportDestinationExtentMetricRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  HostId *string `thrift:"hostId,2" db:"hostId" json:"hostId,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,3" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,4" db:"extentUUID" json:"extentUUID,omitempty"`
  Metrics *DestinationExtentMetrics `thrift:"metrics,5" db:"metrics" json:"metrics,omitempty"`
  Timestamp *int64 `thrift:"timestamp,6" db:"timestamp" json:"timestamp,omitempty"`
}

func NewReportDestinationExtentMetricRequest() *ReportDestinationExtentMetricRequest {
  return &ReportDestinationExtentMetricRequest{}
}

var ReportDestinationExtentMetricRequest_Sku_DEFAULT SKU
func (p *ReportDestinationExtentMetricRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return ReportDestinationExtentMetricRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReportDestinationExtentMetricRequest_HostId_DEFAULT string
func (p *ReportDestinationExtentMetricRequest) GetHostId() string {
  if !p.IsSetHostId() {
    return ReportDestinationExtentMetricRequest_HostId_DEFAULT
  }
return *p.HostId
}
var ReportDestinationExtentMetricRequest_DestinationUUID_DEFAULT string
func (p *ReportDestinationExtentMetricRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReportDestinationExtentMetricRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReportDestinationExtentMetricRequest_ExtentUUID_DEFAULT string
func (p *ReportDestinationExtentMetricRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReportDestinationExtentMetricRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ReportDestinationExtentMetricRequest_Metrics_DEFAULT *DestinationExtentMetrics
func (p *ReportDestinationExtentMetricRequest) GetMetrics() *DestinationExtentMetrics {
  if !p.IsSetMetrics() {
    return ReportDestinationExtentMetricRequest_Metrics_DEFAULT
  }
return p.Metrics
}
var ReportDestinationExtentMetricRequest_Timestamp_DEFAULT int64
func (p *ReportDestinationExtentMetricRequest) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return ReportDestinationExtentMetricRequest_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *ReportDestinationExtentMetricRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetHostId() bool {
  return p.HostId != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetMetrics() bool {
  return p.Metrics != nil
}

func (p *ReportDestinationExtentMetricRequest) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ReportDestinationExtentMetricRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportDestinationExtentMetricRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *ReportDestinationExtentMetricRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostId = &v
}
  return nil
}

func (p *ReportDestinationExtentMetricRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReportDestinationExtentMetricRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReportDestinationExtentMetricRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Metrics = &DestinationExtentMetrics{}
  if err := p.Metrics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
  }
  return nil
}

func (p *ReportDestinationExtentMetricRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *ReportDestinationExtentMetricRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportDestinationExtentMetricRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportDestinationExtentMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *ReportDestinationExtentMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostId() {
    if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err) }
    if err := oprot.WriteString(string(*p.HostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err) }
  }
  return err
}

func (p *ReportDestinationExtentMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReportDestinationExtentMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReportDestinationExtentMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetrics() {
    if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:metrics: ", p), err) }
    if err := p.Metrics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:metrics: ", p), err) }
  }
  return err
}

func (p *ReportDestinationExtentMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err) }
  }
  return err
}

func (p *ReportDestinationExtentMetricRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportDestinationExtentMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - Metrics
//  - Timestamp
type ReportConsumerGroupMetricRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  HostId *string `thrift:"hostId,2" db:"hostId" json:"hostId,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,3" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,4" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  Metrics *ConsumerGroupMetrics `thrift:"metrics,5" db:"metrics" json:"metrics,omitempty"`
  Timestamp *int64 `thrift:"timestamp,6" db:"timestamp" json:"timestamp,omitempty"`
}

func NewReportConsumerGroupMetricRequest() *ReportConsumerGroupMetricRequest {
  return &ReportConsumerGroupMetricRequest{}
}

var ReportConsumerGroupMetricRequest_Sku_DEFAULT SKU
func (p *ReportConsumerGroupMetricRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return ReportConsumerGroupMetricRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReportConsumerGroupMetricRequest_HostId_DEFAULT string
func (p *ReportConsumerGroupMetricRequest) GetHostId() string {
  if !p.IsSetHostId() {
    return ReportConsumerGroupMetricRequest_HostId_DEFAULT
  }
return *p.HostId
}
var ReportConsumerGroupMetricRequest_DestinationUUID_DEFAULT string
func (p *ReportConsumerGroupMetricRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReportConsumerGroupMetricRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReportConsumerGroupMetricRequest_ConsumerGroupUUID_DEFAULT string
func (p *ReportConsumerGroupMetricRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ReportConsumerGroupMetricRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ReportConsumerGroupMetricRequest_Metrics_DEFAULT *ConsumerGroupMetrics
func (p *ReportConsumerGroupMetricRequest) GetMetrics() *ConsumerGroupMetrics {
  if !p.IsSetMetrics() {
    return ReportConsumerGroupMetricRequest_Metrics_DEFAULT
  }
return p.Metrics
}
var ReportConsumerGroupMetricRequest_Timestamp_DEFAULT int64
func (p *ReportConsumerGroupMetricRequest) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return ReportConsumerGroupMetricRequest_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *ReportConsumerGroupMetricRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetHostId() bool {
  return p.HostId != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetMetrics() bool {
  return p.Metrics != nil
}

func (p *ReportConsumerGroupMetricRequest) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ReportConsumerGroupMetricRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportConsumerGroupMetricRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *ReportConsumerGroupMetricRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostId = &v
}
  return nil
}

func (p *ReportConsumerGroupMetricRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReportConsumerGroupMetricRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ReportConsumerGroupMetricRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Metrics = &ConsumerGroupMetrics{}
  if err := p.Metrics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
  }
  return nil
}

func (p *ReportConsumerGroupMetricRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *ReportConsumerGroupMetricRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportConsumerGroupMetricRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportConsumerGroupMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostId() {
    if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err) }
    if err := oprot.WriteString(string(*p.HostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetrics() {
    if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:metrics: ", p), err) }
    if err := p.Metrics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:metrics: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupMetricRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportConsumerGroupMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - HostId
//  - DestinationUUID
//  - ConsumerGroupUUID
//  - ExtentUUID
//  - Metrics
//  - Timestamp
type ReportConsumerGroupExtentMetricRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  HostId *string `thrift:"hostId,2" db:"hostId" json:"hostId,omitempty"`
  DestinationUUID *string `thrift:"destinationUUID,3" db:"destinationUUID" json:"destinationUUID,omitempty"`
  ConsumerGroupUUID *string `thrift:"consumerGroupUUID,4" db:"consumerGroupUUID" json:"consumerGroupUUID,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,5" db:"extentUUID" json:"extentUUID,omitempty"`
  Metrics *ConsumerGroupExtentMetrics `thrift:"metrics,6" db:"metrics" json:"metrics,omitempty"`
  Timestamp *int64 `thrift:"timestamp,7" db:"timestamp" json:"timestamp,omitempty"`
}

func NewReportConsumerGroupExtentMetricRequest() *ReportConsumerGroupExtentMetricRequest {
  return &ReportConsumerGroupExtentMetricRequest{}
}

var ReportConsumerGroupExtentMetricRequest_Sku_DEFAULT SKU
func (p *ReportConsumerGroupExtentMetricRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return ReportConsumerGroupExtentMetricRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReportConsumerGroupExtentMetricRequest_HostId_DEFAULT string
func (p *ReportConsumerGroupExtentMetricRequest) GetHostId() string {
  if !p.IsSetHostId() {
    return ReportConsumerGroupExtentMetricRequest_HostId_DEFAULT
  }
return *p.HostId
}
var ReportConsumerGroupExtentMetricRequest_DestinationUUID_DEFAULT string
func (p *ReportConsumerGroupExtentMetricRequest) GetDestinationUUID() string {
  if !p.IsSetDestinationUUID() {
    return ReportConsumerGroupExtentMetricRequest_DestinationUUID_DEFAULT
  }
return *p.DestinationUUID
}
var ReportConsumerGroupExtentMetricRequest_ConsumerGroupUUID_DEFAULT string
func (p *ReportConsumerGroupExtentMetricRequest) GetConsumerGroupUUID() string {
  if !p.IsSetConsumerGroupUUID() {
    return ReportConsumerGroupExtentMetricRequest_ConsumerGroupUUID_DEFAULT
  }
return *p.ConsumerGroupUUID
}
var ReportConsumerGroupExtentMetricRequest_ExtentUUID_DEFAULT string
func (p *ReportConsumerGroupExtentMetricRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReportConsumerGroupExtentMetricRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ReportConsumerGroupExtentMetricRequest_Metrics_DEFAULT *ConsumerGroupExtentMetrics
func (p *ReportConsumerGroupExtentMetricRequest) GetMetrics() *ConsumerGroupExtentMetrics {
  if !p.IsSetMetrics() {
    return ReportConsumerGroupExtentMetricRequest_Metrics_DEFAULT
  }
return p.Metrics
}
var ReportConsumerGroupExtentMetricRequest_Timestamp_DEFAULT int64
func (p *ReportConsumerGroupExtentMetricRequest) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return ReportConsumerGroupExtentMetricRequest_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *ReportConsumerGroupExtentMetricRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetHostId() bool {
  return p.HostId != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetDestinationUUID() bool {
  return p.DestinationUUID != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetConsumerGroupUUID() bool {
  return p.ConsumerGroupUUID != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetMetrics() bool {
  return p.Metrics != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ReportConsumerGroupExtentMetricRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostId = &v
}
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DestinationUUID = &v
}
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConsumerGroupUUID = &v
}
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField6(iprot thrift.TProtocol) error {
  p.Metrics = &ConsumerGroupExtentMetrics{}
  if err := p.Metrics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
  }
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportConsumerGroupExtentMetricRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostId() {
    if err := oprot.WriteFieldBegin("hostId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostId: ", p), err) }
    if err := oprot.WriteString(string(*p.HostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostId: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationUUID() {
    if err := oprot.WriteFieldBegin("destinationUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:destinationUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.DestinationUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:destinationUUID: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetConsumerGroupUUID() {
    if err := oprot.WriteFieldBegin("consumerGroupUUID", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerGroupUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ConsumerGroupUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.consumerGroupUUID (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerGroupUUID: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetrics() {
    if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:metrics: ", p), err) }
    if err := p.Metrics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:metrics: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timestamp: ", p), err) }
  }
  return err
}

func (p *ReportConsumerGroupExtentMetricRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportConsumerGroupExtentMetricRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - StoreId
//  - ExtentUUID
//  - Metrics
//  - Timestamp
type ReportStoreExtentMetricRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  StoreId *string `thrift:"storeId,2" db:"storeId" json:"storeId,omitempty"`
  ExtentUUID *string `thrift:"extentUUID,3" db:"extentUUID" json:"extentUUID,omitempty"`
  Metrics *StoreExtentMetrics `thrift:"metrics,4" db:"metrics" json:"metrics,omitempty"`
  Timestamp *int64 `thrift:"timestamp,5" db:"timestamp" json:"timestamp,omitempty"`
}

func NewReportStoreExtentMetricRequest() *ReportStoreExtentMetricRequest {
  return &ReportStoreExtentMetricRequest{}
}

var ReportStoreExtentMetricRequest_Sku_DEFAULT SKU
func (p *ReportStoreExtentMetricRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return ReportStoreExtentMetricRequest_Sku_DEFAULT
  }
return *p.Sku
}
var ReportStoreExtentMetricRequest_StoreId_DEFAULT string
func (p *ReportStoreExtentMetricRequest) GetStoreId() string {
  if !p.IsSetStoreId() {
    return ReportStoreExtentMetricRequest_StoreId_DEFAULT
  }
return *p.StoreId
}
var ReportStoreExtentMetricRequest_ExtentUUID_DEFAULT string
func (p *ReportStoreExtentMetricRequest) GetExtentUUID() string {
  if !p.IsSetExtentUUID() {
    return ReportStoreExtentMetricRequest_ExtentUUID_DEFAULT
  }
return *p.ExtentUUID
}
var ReportStoreExtentMetricRequest_Metrics_DEFAULT *StoreExtentMetrics
func (p *ReportStoreExtentMetricRequest) GetMetrics() *StoreExtentMetrics {
  if !p.IsSetMetrics() {
    return ReportStoreExtentMetricRequest_Metrics_DEFAULT
  }
return p.Metrics
}
var ReportStoreExtentMetricRequest_Timestamp_DEFAULT int64
func (p *ReportStoreExtentMetricRequest) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return ReportStoreExtentMetricRequest_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *ReportStoreExtentMetricRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetStoreId() bool {
  return p.StoreId != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetExtentUUID() bool {
  return p.ExtentUUID != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetMetrics() bool {
  return p.Metrics != nil
}

func (p *ReportStoreExtentMetricRequest) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *ReportStoreExtentMetricRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReportStoreExtentMetricRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *ReportStoreExtentMetricRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StoreId = &v
}
  return nil
}

func (p *ReportStoreExtentMetricRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExtentUUID = &v
}
  return nil
}

func (p *ReportStoreExtentMetricRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.Metrics = &StoreExtentMetrics{}
  if err := p.Metrics.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metrics), err)
  }
  return nil
}

func (p *ReportStoreExtentMetricRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *ReportStoreExtentMetricRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReportStoreExtentMetricRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReportStoreExtentMetricRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *ReportStoreExtentMetricRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreId() {
    if err := oprot.WriteFieldBegin("storeId", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storeId: ", p), err) }
    if err := oprot.WriteString(string(*p.StoreId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.storeId (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storeId: ", p), err) }
  }
  return err
}

func (p *ReportStoreExtentMetricRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtentUUID() {
    if err := oprot.WriteFieldBegin("extentUUID", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extentUUID: ", p), err) }
    if err := oprot.WriteString(string(*p.ExtentUUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extentUUID (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extentUUID: ", p), err) }
  }
  return err
}

func (p *ReportStoreExtentMetricRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetrics() {
    if err := oprot.WriteFieldBegin("metrics", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metrics: ", p), err) }
    if err := p.Metrics.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metrics), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metrics: ", p), err) }
  }
  return err
}

func (p *ReportStoreExtentMetricRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err) }
  }
  return err
}

func (p *ReportStoreExtentMetricRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReportStoreExtentMetricRequest(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - IncomingMessagesPerSecond
//  - IncomingBytesPerSecond
type InputHostCapacities struct {
  CPU *int64 `thrift:"cpu,1" db:"cpu" json:"cpu,omitempty"`
  Memory *int64 `thrift:"memory,2" db:"memory" json:"memory,omitempty"`
  NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,3" db:"numberOfActiveExtents" json:"numberOfActiveExtents,omitempty"`
  NumberOfConnections *int64 `thrift:"numberOfConnections,4" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  IncomingMessagesPerSecond *int64 `thrift:"incomingMessagesPerSecond,5" db:"incomingMessagesPerSecond" json:"incomingMessagesPerSecond,omitempty"`
  IncomingBytesPerSecond *int64 `thrift:"incomingBytesPerSecond,6" db:"incomingBytesPerSecond" json:"incomingBytesPerSecond,omitempty"`
}

func NewInputHostCapacities() *InputHostCapacities {
  return &InputHostCapacities{}
}

var InputHostCapacities_CPU_DEFAULT int64
func (p *InputHostCapacities) GetCPU() int64 {
  if !p.IsSetCPU() {
    return InputHostCapacities_CPU_DEFAULT
  }
return *p.CPU
}
var InputHostCapacities_Memory_DEFAULT int64
func (p *InputHostCapacities) GetMemory() int64 {
  if !p.IsSetMemory() {
    return InputHostCapacities_Memory_DEFAULT
  }
return *p.Memory
}
var InputHostCapacities_NumberOfActiveExtents_DEFAULT int64
func (p *InputHostCapacities) GetNumberOfActiveExtents() int64 {
  if !p.IsSetNumberOfActiveExtents() {
    return InputHostCapacities_NumberOfActiveExtents_DEFAULT
  }
return *p.NumberOfActiveExtents
}
var InputHostCapacities_NumberOfConnections_DEFAULT int64
func (p *InputHostCapacities) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return InputHostCapacities_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var InputHostCapacities_IncomingMessagesPerSecond_DEFAULT int64
func (p *InputHostCapacities) GetIncomingMessagesPerSecond() int64 {
  if !p.IsSetIncomingMessagesPerSecond() {
    return InputHostCapacities_IncomingMessagesPerSecond_DEFAULT
  }
return *p.IncomingMessagesPerSecond
}
var InputHostCapacities_IncomingBytesPerSecond_DEFAULT int64
func (p *InputHostCapacities) GetIncomingBytesPerSecond() int64 {
  if !p.IsSetIncomingBytesPerSecond() {
    return InputHostCapacities_IncomingBytesPerSecond_DEFAULT
  }
return *p.IncomingBytesPerSecond
}
func (p *InputHostCapacities) IsSetCPU() bool {
  return p.CPU != nil
}

func (p *InputHostCapacities) IsSetMemory() bool {
  return p.Memory != nil
}

func (p *InputHostCapacities) IsSetNumberOfActiveExtents() bool {
  return p.NumberOfActiveExtents != nil
}

func (p *InputHostCapacities) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *InputHostCapacities) IsSetIncomingMessagesPerSecond() bool {
  return p.IncomingMessagesPerSecond != nil
}

func (p *InputHostCapacities) IsSetIncomingBytesPerSecond() bool {
  return p.IncomingBytesPerSecond != nil
}

func (p *InputHostCapacities) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InputHostCapacities)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CPU = &v
}
  return nil
}

func (p *InputHostCapacities)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Memory = &v
}
  return nil
}

func (p *InputHostCapacities)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumberOfActiveExtents = &v
}
  return nil
}

func (p *InputHostCapacities)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *InputHostCapacities)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IncomingMessagesPerSecond = &v
}
  return nil
}

func (p *InputHostCapacities)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IncomingBytesPerSecond = &v
}
  return nil
}

func (p *InputHostCapacities) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InputHostCapacities"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InputHostCapacities) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCPU() {
    if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err) }
  }
  return err
}

func (p *InputHostCapacities) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemory() {
    if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err) }
  }
  return err
}

func (p *InputHostCapacities) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfActiveExtents() {
    if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numberOfActiveExtents: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numberOfActiveExtents: ", p), err) }
  }
  return err
}

func (p *InputHostCapacities) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *InputHostCapacities) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingMessagesPerSecond() {
    if err := oprot.WriteFieldBegin("incomingMessagesPerSecond", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:incomingMessagesPerSecond: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingMessagesPerSecond)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingMessagesPerSecond (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:incomingMessagesPerSecond: ", p), err) }
  }
  return err
}

func (p *InputHostCapacities) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIncomingBytesPerSecond() {
    if err := oprot.WriteFieldBegin("incomingBytesPerSecond", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomingBytesPerSecond: ", p), err) }
    if err := oprot.WriteI64(int64(*p.IncomingBytesPerSecond)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.incomingBytesPerSecond (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomingBytesPerSecond: ", p), err) }
  }
  return err
}

func (p *InputHostCapacities) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InputHostCapacities(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - OutgoingMessagesPerSecond
//  - OutgoingBytesPerSecond
type OutputHostCapacities struct {
  CPU *int64 `thrift:"cpu,1" db:"cpu" json:"cpu,omitempty"`
  Memory *int64 `thrift:"memory,2" db:"memory" json:"memory,omitempty"`
  NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,3" db:"numberOfActiveExtents" json:"numberOfActiveExtents,omitempty"`
  NumberOfConnections *int64 `thrift:"numberOfConnections,4" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  OutgoingMessagesPerSecond *int64 `thrift:"outgoingMessagesPerSecond,5" db:"outgoingMessagesPerSecond" json:"outgoingMessagesPerSecond,omitempty"`
  OutgoingBytesPerSecond *int64 `thrift:"outgoingBytesPerSecond,6" db:"outgoingBytesPerSecond" json:"outgoingBytesPerSecond,omitempty"`
}

func NewOutputHostCapacities() *OutputHostCapacities {
  return &OutputHostCapacities{}
}

var OutputHostCapacities_CPU_DEFAULT int64
func (p *OutputHostCapacities) GetCPU() int64 {
  if !p.IsSetCPU() {
    return OutputHostCapacities_CPU_DEFAULT
  }
return *p.CPU
}
var OutputHostCapacities_Memory_DEFAULT int64
func (p *OutputHostCapacities) GetMemory() int64 {
  if !p.IsSetMemory() {
    return OutputHostCapacities_Memory_DEFAULT
  }
return *p.Memory
}
var OutputHostCapacities_NumberOfActiveExtents_DEFAULT int64
func (p *OutputHostCapacities) GetNumberOfActiveExtents() int64 {
  if !p.IsSetNumberOfActiveExtents() {
    return OutputHostCapacities_NumberOfActiveExtents_DEFAULT
  }
return *p.NumberOfActiveExtents
}
var OutputHostCapacities_NumberOfConnections_DEFAULT int64
func (p *OutputHostCapacities) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return OutputHostCapacities_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var OutputHostCapacities_OutgoingMessagesPerSecond_DEFAULT int64
func (p *OutputHostCapacities) GetOutgoingMessagesPerSecond() int64 {
  if !p.IsSetOutgoingMessagesPerSecond() {
    return OutputHostCapacities_OutgoingMessagesPerSecond_DEFAULT
  }
return *p.OutgoingMessagesPerSecond
}
var OutputHostCapacities_OutgoingBytesPerSecond_DEFAULT int64
func (p *OutputHostCapacities) GetOutgoingBytesPerSecond() int64 {
  if !p.IsSetOutgoingBytesPerSecond() {
    return OutputHostCapacities_OutgoingBytesPerSecond_DEFAULT
  }
return *p.OutgoingBytesPerSecond
}
func (p *OutputHostCapacities) IsSetCPU() bool {
  return p.CPU != nil
}

func (p *OutputHostCapacities) IsSetMemory() bool {
  return p.Memory != nil
}

func (p *OutputHostCapacities) IsSetNumberOfActiveExtents() bool {
  return p.NumberOfActiveExtents != nil
}

func (p *OutputHostCapacities) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *OutputHostCapacities) IsSetOutgoingMessagesPerSecond() bool {
  return p.OutgoingMessagesPerSecond != nil
}

func (p *OutputHostCapacities) IsSetOutgoingBytesPerSecond() bool {
  return p.OutgoingBytesPerSecond != nil
}

func (p *OutputHostCapacities) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OutputHostCapacities)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CPU = &v
}
  return nil
}

func (p *OutputHostCapacities)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Memory = &v
}
  return nil
}

func (p *OutputHostCapacities)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumberOfActiveExtents = &v
}
  return nil
}

func (p *OutputHostCapacities)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *OutputHostCapacities)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OutgoingMessagesPerSecond = &v
}
  return nil
}

func (p *OutputHostCapacities)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OutgoingBytesPerSecond = &v
}
  return nil
}

func (p *OutputHostCapacities) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OutputHostCapacities"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OutputHostCapacities) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCPU() {
    if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err) }
  }
  return err
}

func (p *OutputHostCapacities) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemory() {
    if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err) }
  }
  return err
}

func (p *OutputHostCapacities) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfActiveExtents() {
    if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numberOfActiveExtents: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numberOfActiveExtents: ", p), err) }
  }
  return err
}

func (p *OutputHostCapacities) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *OutputHostCapacities) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingMessagesPerSecond() {
    if err := oprot.WriteFieldBegin("outgoingMessagesPerSecond", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outgoingMessagesPerSecond: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingMessagesPerSecond)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingMessagesPerSecond (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outgoingMessagesPerSecond: ", p), err) }
  }
  return err
}

func (p *OutputHostCapacities) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutgoingBytesPerSecond() {
    if err := oprot.WriteFieldBegin("outgoingBytesPerSecond", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:outgoingBytesPerSecond: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OutgoingBytesPerSecond)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outgoingBytesPerSecond (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:outgoingBytesPerSecond: ", p), err) }
  }
  return err
}

func (p *OutputHostCapacities) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OutputHostCapacities(%+v)", *p)
}

// Attributes:
//  - CPU
//  - Memory
//  - NumberOfActiveExtents
//  - NumberOfConnections
//  - RemainingDiskSpace
type StoreCapacities struct {
  CPU *int64 `thrift:"cpu,1" db:"cpu" json:"cpu,omitempty"`
  Memory *int64 `thrift:"memory,2" db:"memory" json:"memory,omitempty"`
  NumberOfActiveExtents *int64 `thrift:"numberOfActiveExtents,3" db:"numberOfActiveExtents" json:"numberOfActiveExtents,omitempty"`
  NumberOfConnections *int64 `thrift:"numberOfConnections,4" db:"numberOfConnections" json:"numberOfConnections,omitempty"`
  RemainingDiskSpace *int64 `thrift:"remainingDiskSpace,5" db:"remainingDiskSpace" json:"remainingDiskSpace,omitempty"`
}

func NewStoreCapacities() *StoreCapacities {
  return &StoreCapacities{}
}

var StoreCapacities_CPU_DEFAULT int64
func (p *StoreCapacities) GetCPU() int64 {
  if !p.IsSetCPU() {
    return StoreCapacities_CPU_DEFAULT
  }
return *p.CPU
}
var StoreCapacities_Memory_DEFAULT int64
func (p *StoreCapacities) GetMemory() int64 {
  if !p.IsSetMemory() {
    return StoreCapacities_Memory_DEFAULT
  }
return *p.Memory
}
var StoreCapacities_NumberOfActiveExtents_DEFAULT int64
func (p *StoreCapacities) GetNumberOfActiveExtents() int64 {
  if !p.IsSetNumberOfActiveExtents() {
    return StoreCapacities_NumberOfActiveExtents_DEFAULT
  }
return *p.NumberOfActiveExtents
}
var StoreCapacities_NumberOfConnections_DEFAULT int64
func (p *StoreCapacities) GetNumberOfConnections() int64 {
  if !p.IsSetNumberOfConnections() {
    return StoreCapacities_NumberOfConnections_DEFAULT
  }
return *p.NumberOfConnections
}
var StoreCapacities_RemainingDiskSpace_DEFAULT int64
func (p *StoreCapacities) GetRemainingDiskSpace() int64 {
  if !p.IsSetRemainingDiskSpace() {
    return StoreCapacities_RemainingDiskSpace_DEFAULT
  }
return *p.RemainingDiskSpace
}
func (p *StoreCapacities) IsSetCPU() bool {
  return p.CPU != nil
}

func (p *StoreCapacities) IsSetMemory() bool {
  return p.Memory != nil
}

func (p *StoreCapacities) IsSetNumberOfActiveExtents() bool {
  return p.NumberOfActiveExtents != nil
}

func (p *StoreCapacities) IsSetNumberOfConnections() bool {
  return p.NumberOfConnections != nil
}

func (p *StoreCapacities) IsSetRemainingDiskSpace() bool {
  return p.RemainingDiskSpace != nil
}

func (p *StoreCapacities) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StoreCapacities)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CPU = &v
}
  return nil
}

func (p *StoreCapacities)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Memory = &v
}
  return nil
}

func (p *StoreCapacities)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumberOfActiveExtents = &v
}
  return nil
}

func (p *StoreCapacities)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumberOfConnections = &v
}
  return nil
}

func (p *StoreCapacities)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RemainingDiskSpace = &v
}
  return nil
}

func (p *StoreCapacities) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StoreCapacities"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StoreCapacities) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCPU() {
    if err := oprot.WriteFieldBegin("cpu", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cpu: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CPU)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cpu (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cpu: ", p), err) }
  }
  return err
}

func (p *StoreCapacities) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetMemory() {
    if err := oprot.WriteFieldBegin("memory", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memory: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Memory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.memory (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memory: ", p), err) }
  }
  return err
}

func (p *StoreCapacities) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfActiveExtents() {
    if err := oprot.WriteFieldBegin("numberOfActiveExtents", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numberOfActiveExtents: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfActiveExtents)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfActiveExtents (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numberOfActiveExtents: ", p), err) }
  }
  return err
}

func (p *StoreCapacities) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNumberOfConnections() {
    if err := oprot.WriteFieldBegin("numberOfConnections", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numberOfConnections: ", p), err) }
    if err := oprot.WriteI64(int64(*p.NumberOfConnections)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.numberOfConnections (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numberOfConnections: ", p), err) }
  }
  return err
}

func (p *StoreCapacities) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetRemainingDiskSpace() {
    if err := oprot.WriteFieldBegin("remainingDiskSpace", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remainingDiskSpace: ", p), err) }
    if err := oprot.WriteI64(int64(*p.RemainingDiskSpace)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remainingDiskSpace (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remainingDiskSpace: ", p), err) }
  }
  return err
}

func (p *StoreCapacities) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoreCapacities(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Capacities
type UpsertInputHostCapacitiesRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  Capacities *InputHostCapacities `thrift:"capacities,2" db:"capacities" json:"capacities,omitempty"`
}

func NewUpsertInputHostCapacitiesRequest() *UpsertInputHostCapacitiesRequest {
  return &UpsertInputHostCapacitiesRequest{}
}

var UpsertInputHostCapacitiesRequest_Sku_DEFAULT SKU
func (p *UpsertInputHostCapacitiesRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return UpsertInputHostCapacitiesRequest_Sku_DEFAULT
  }
return *p.Sku
}
var UpsertInputHostCapacitiesRequest_Capacities_DEFAULT *InputHostCapacities
func (p *UpsertInputHostCapacitiesRequest) GetCapacities() *InputHostCapacities {
  if !p.IsSetCapacities() {
    return UpsertInputHostCapacitiesRequest_Capacities_DEFAULT
  }
return p.Capacities
}
func (p *UpsertInputHostCapacitiesRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *UpsertInputHostCapacitiesRequest) IsSetCapacities() bool {
  return p.Capacities != nil
}

func (p *UpsertInputHostCapacitiesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpsertInputHostCapacitiesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *UpsertInputHostCapacitiesRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Capacities = &InputHostCapacities{}
  if err := p.Capacities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capacities), err)
  }
  return nil
}

func (p *UpsertInputHostCapacitiesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpsertInputHostCapacitiesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpsertInputHostCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *UpsertInputHostCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCapacities() {
    if err := oprot.WriteFieldBegin("capacities", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capacities: ", p), err) }
    if err := p.Capacities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capacities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capacities: ", p), err) }
  }
  return err
}

func (p *UpsertInputHostCapacitiesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpsertInputHostCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Capacities
type UpsertOutputHostCapacitiesRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  Capacities *OutputHostCapacities `thrift:"capacities,2" db:"capacities" json:"capacities,omitempty"`
}

func NewUpsertOutputHostCapacitiesRequest() *UpsertOutputHostCapacitiesRequest {
  return &UpsertOutputHostCapacitiesRequest{}
}

var UpsertOutputHostCapacitiesRequest_Sku_DEFAULT SKU
func (p *UpsertOutputHostCapacitiesRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return UpsertOutputHostCapacitiesRequest_Sku_DEFAULT
  }
return *p.Sku
}
var UpsertOutputHostCapacitiesRequest_Capacities_DEFAULT *OutputHostCapacities
func (p *UpsertOutputHostCapacitiesRequest) GetCapacities() *OutputHostCapacities {
  if !p.IsSetCapacities() {
    return UpsertOutputHostCapacitiesRequest_Capacities_DEFAULT
  }
return p.Capacities
}
func (p *UpsertOutputHostCapacitiesRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *UpsertOutputHostCapacitiesRequest) IsSetCapacities() bool {
  return p.Capacities != nil
}

func (p *UpsertOutputHostCapacitiesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpsertOutputHostCapacitiesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *UpsertOutputHostCapacitiesRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Capacities = &OutputHostCapacities{}
  if err := p.Capacities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capacities), err)
  }
  return nil
}

func (p *UpsertOutputHostCapacitiesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpsertOutputHostCapacitiesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpsertOutputHostCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *UpsertOutputHostCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCapacities() {
    if err := oprot.WriteFieldBegin("capacities", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capacities: ", p), err) }
    if err := p.Capacities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capacities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capacities: ", p), err) }
  }
  return err
}

func (p *UpsertOutputHostCapacitiesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpsertOutputHostCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Capacities
type UpsertStoreCapacitiesRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  Capacities *StoreCapacities `thrift:"capacities,2" db:"capacities" json:"capacities,omitempty"`
}

func NewUpsertStoreCapacitiesRequest() *UpsertStoreCapacitiesRequest {
  return &UpsertStoreCapacitiesRequest{}
}

var UpsertStoreCapacitiesRequest_Sku_DEFAULT SKU
func (p *UpsertStoreCapacitiesRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return UpsertStoreCapacitiesRequest_Sku_DEFAULT
  }
return *p.Sku
}
var UpsertStoreCapacitiesRequest_Capacities_DEFAULT *StoreCapacities
func (p *UpsertStoreCapacitiesRequest) GetCapacities() *StoreCapacities {
  if !p.IsSetCapacities() {
    return UpsertStoreCapacitiesRequest_Capacities_DEFAULT
  }
return p.Capacities
}
func (p *UpsertStoreCapacitiesRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *UpsertStoreCapacitiesRequest) IsSetCapacities() bool {
  return p.Capacities != nil
}

func (p *UpsertStoreCapacitiesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpsertStoreCapacitiesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *UpsertStoreCapacitiesRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Capacities = &StoreCapacities{}
  if err := p.Capacities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Capacities), err)
  }
  return nil
}

func (p *UpsertStoreCapacitiesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpsertStoreCapacitiesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpsertStoreCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *UpsertStoreCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetCapacities() {
    if err := oprot.WriteFieldBegin("capacities", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:capacities: ", p), err) }
    if err := p.Capacities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Capacities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:capacities: ", p), err) }
  }
  return err
}

func (p *UpsertStoreCapacitiesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpsertStoreCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Role
type RemoveCapacitiesRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  Role *Role `thrift:"role,2" db:"role" json:"role,omitempty"`
}

func NewRemoveCapacitiesRequest() *RemoveCapacitiesRequest {
  return &RemoveCapacitiesRequest{}
}

var RemoveCapacitiesRequest_Sku_DEFAULT SKU
func (p *RemoveCapacitiesRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return RemoveCapacitiesRequest_Sku_DEFAULT
  }
return *p.Sku
}
var RemoveCapacitiesRequest_Role_DEFAULT Role
func (p *RemoveCapacitiesRequest) GetRole() Role {
  if !p.IsSetRole() {
    return RemoveCapacitiesRequest_Role_DEFAULT
  }
return *p.Role
}
func (p *RemoveCapacitiesRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *RemoveCapacitiesRequest) IsSetRole() bool {
  return p.Role != nil
}

func (p *RemoveCapacitiesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveCapacitiesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *RemoveCapacitiesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Role(v)
  p.Role = &temp
}
  return nil
}

func (p *RemoveCapacitiesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoveCapacitiesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *RemoveCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err) }
  }
  return err
}

func (p *RemoveCapacitiesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - Sku
//  - Role
type GetCapacitiesRequest struct {
  Sku *SKU `thrift:"sku,1" db:"sku" json:"sku,omitempty"`
  Role *Role `thrift:"role,2" db:"role" json:"role,omitempty"`
}

func NewGetCapacitiesRequest() *GetCapacitiesRequest {
  return &GetCapacitiesRequest{}
}

var GetCapacitiesRequest_Sku_DEFAULT SKU
func (p *GetCapacitiesRequest) GetSku() SKU {
  if !p.IsSetSku() {
    return GetCapacitiesRequest_Sku_DEFAULT
  }
return *p.Sku
}
var GetCapacitiesRequest_Role_DEFAULT Role
func (p *GetCapacitiesRequest) GetRole() Role {
  if !p.IsSetRole() {
    return GetCapacitiesRequest_Role_DEFAULT
  }
return *p.Role
}
func (p *GetCapacitiesRequest) IsSetSku() bool {
  return p.Sku != nil
}

func (p *GetCapacitiesRequest) IsSetRole() bool {
  return p.Role != nil
}

func (p *GetCapacitiesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetCapacitiesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SKU(v)
  p.Sku = &temp
}
  return nil
}

func (p *GetCapacitiesRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Role(v)
  p.Role = &temp
}
  return nil
}

func (p *GetCapacitiesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCapacitiesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetCapacitiesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSku() {
    if err := oprot.WriteFieldBegin("sku", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sku: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Sku)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sku (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sku: ", p), err) }
  }
  return err
}

func (p *GetCapacitiesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRole() {
    if err := oprot.WriteFieldBegin("role", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:role: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Role)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.role (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:role: ", p), err) }
  }
  return err
}

func (p *GetCapacitiesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCapacitiesRequest(%+v)", *p)
}

// Attributes:
//  - InputHostCapacities
//  - OutputHostCapacities
//  - StoreCapacities
type GetCapacitiesResult_ struct {
  InputHostCapacities *InputHostCapacities `thrift:"inputHostCapacities,1" db:"inputHostCapacities" json:"inputHostCapacities,omitempty"`
  OutputHostCapacities *OutputHostCapacities `thrift:"outputHostCapacities,2" db:"outputHostCapacities" json:"outputHostCapacities,omitempty"`
  StoreCapacities *StoreCapacities `thrift:"storeCapacities,3" db:"storeCapacities" json:"storeCapacities,omitempty"`
}

func NewGetCapacitiesResult_() *GetCapacitiesResult_ {
  return &GetCapacitiesResult_{}
}

var GetCapacitiesResult__InputHostCapacities_DEFAULT *InputHostCapacities
func (p *GetCapacitiesResult_) GetInputHostCapacities() *InputHostCapacities {
  if !p.IsSetInputHostCapacities() {
    return GetCapacitiesResult__InputHostCapacities_DEFAULT
  }
return p.InputHostCapacities
}
var GetCapacitiesResult__OutputHostCapacities_DEFAULT *OutputHostCapacities
func (p *GetCapacitiesResult_) GetOutputHostCapacities() *OutputHostCapacities {
  if !p.IsSetOutputHostCapacities() {
    return GetCapacitiesResult__OutputHostCapacities_DEFAULT
  }
return p.OutputHostCapacities
}
var GetCapacitiesResult__StoreCapacities_DEFAULT *StoreCapacities
func (p *GetCapacitiesResult_) GetStoreCapacities() *StoreCapacities {
  if !p.IsSetStoreCapacities() {
    return GetCapacitiesResult__StoreCapacities_DEFAULT
  }
return p.StoreCapacities
}
func (p *GetCapacitiesResult_) IsSetInputHostCapacities() bool {
  return p.InputHostCapacities != nil
}

func (p *GetCapacitiesResult_) IsSetOutputHostCapacities() bool {
  return p.OutputHostCapacities != nil
}

func (p *GetCapacitiesResult_) IsSetStoreCapacities() bool {
  return p.StoreCapacities != nil
}

func (p *GetCapacitiesResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetCapacitiesResult_)  ReadField1(iprot thrift.TProtocol) error {
  p.InputHostCapacities = &InputHostCapacities{}
  if err := p.InputHostCapacities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InputHostCapacities), err)
  }
  return nil
}

func (p *GetCapacitiesResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.OutputHostCapacities = &OutputHostCapacities{}
  if err := p.OutputHostCapacities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OutputHostCapacities), err)
  }
  return nil
}

func (p *GetCapacitiesResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.StoreCapacities = &StoreCapacities{}
  if err := p.StoreCapacities.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoreCapacities), err)
  }
  return nil
}

func (p *GetCapacitiesResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCapacitiesResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetCapacitiesResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInputHostCapacities() {
    if err := oprot.WriteFieldBegin("inputHostCapacities", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputHostCapacities: ", p), err) }
    if err := p.InputHostCapacities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InputHostCapacities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputHostCapacities: ", p), err) }
  }
  return err
}

func (p *GetCapacitiesResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputHostCapacities() {
    if err := oprot.WriteFieldBegin("outputHostCapacities", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outputHostCapacities: ", p), err) }
    if err := p.OutputHostCapacities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OutputHostCapacities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outputHostCapacities: ", p), err) }
  }
  return err
}

func (p *GetCapacitiesResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStoreCapacities() {
    if err := oprot.WriteFieldBegin("storeCapacities", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storeCapacities: ", p), err) }
    if err := p.StoreCapacities.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoreCapacities), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storeCapacities: ", p), err) }
  }
  return err
}

func (p *GetCapacitiesResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCapacitiesResult_(%+v)", *p)
}

// Attributes:
//  - Key
type GetQueueDepthInfoRequest struct {
  Key *string `thrift:"key,1" db:"key" json:"key,omitempty"`
}

func NewGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
  return &GetQueueDepthInfoRequest{}
}

var GetQueueDepthInfoRequest_Key_DEFAULT string
func (p *GetQueueDepthInfoRequest) GetKey() string {
  if !p.IsSetKey() {
    return GetQueueDepthInfoRequest_Key_DEFAULT
  }
return *p.Key
}
func (p *GetQueueDepthInfoRequest) IsSetKey() bool {
  return p.Key != nil
}

func (p *GetQueueDepthInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetQueueDepthInfoRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = &v
}
  return nil
}

func (p *GetQueueDepthInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetQueueDepthInfoRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetQueueDepthInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetKey() {
    if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
    if err := oprot.WriteString(string(*p.Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  }
  return err
}

func (p *GetQueueDepthInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetQueueDepthInfoRequest(%+v)", *p)
}

// Attributes:
//  - Value
type GetQueueDepthInfoResult_ struct {
  Value *string `thrift:"value,1" db:"value" json:"value,omitempty"`
}

func NewGetQueueDepthInfoResult_() *GetQueueDepthInfoResult_ {
  return &GetQueueDepthInfoResult_{}
}

var GetQueueDepthInfoResult__Value_DEFAULT string
func (p *GetQueueDepthInfoResult_) GetValue() string {
  if !p.IsSetValue() {
    return GetQueueDepthInfoResult__Value_DEFAULT
  }
return *p.Value
}
func (p *GetQueueDepthInfoResult_) IsSetValue() bool {
  return p.Value != nil
}

func (p *GetQueueDepthInfoResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetQueueDepthInfoResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *GetQueueDepthInfoResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetQueueDepthInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetQueueDepthInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  }
  return err
}

func (p *GetQueueDepthInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetQueueDepthInfoResult_(%+v)", *p)
}

type Controller interface {  //InputHost Stats:
  //1) CPU
  //2) Memory
  //3) NumberOfActiveExtents
  //4) NumberOfConnections
  //
  //OutputHost Stats:
  //1) CPU
  //2) Memory
  //3) NumberOfActiveExtents
  //4) NumberOfConnections
  //
  //StoreHost Stats:
  //1) CPU
  //2) Memory
  //3) RemainingDiskSpace
  //4) NumberOfActiveExtents
  //5) NumberOfConnections
  //
  //Destination Stats: [Dimensions: ExtentId, InputHostId, DestinationId, TChannelId]
  //1) IncomingMessagesPerSecond
  //2) IncomingBytesPerSecond
  //3) PutMessageLatency
  //
  //ConsumerGroup Stats: [Dimensions: ExtentId, OutputHostId, ConsumerGroupId, TChannelId]
  //1) OutgoingMessagesPerSecond
  //2) OutgoingBytesPerSecond
  //
  //StoreExtent Stats: [Dimensions: ExtentId, StoreId, DestinationId, ConsumerGroupId, TChannelId]
  //
  //

  // ******************** Host Placement **********************************
  // 
  // Parameters:
  //  - GetHostsRequest
  GetInputHosts(getHostsRequest *GetInputHostsRequest) (r *GetInputHostsResult_, err error)
  // Parameters:
  //  - GetHostsRequest
  GetOutputHosts(getHostsRequest *GetOutputHostsRequest) (r *GetOutputHostsResult_, err error)
  // ******************** Destination CUD *********************************
  // 
  // Parameters:
  //  - CreateRequest
  CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error)
  // Parameters:
  //  - DeleteRequest
  DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error)
  // ******************** ConsumerGroup CUD *******************************
  // 
  // Parameters:
  //  - CreateRequest
  CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - UpdateRequest
  UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error)
  // Parameters:
  //  - DeleteRequest
  DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error)
  // ******************** Extent Creation ***********************************
  // 
  // Parameters:
  //  - CreateRequest
  CreateRemoteZoneExtent(createRequest *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error)
  // ****************** Report Load ***************************************
  // 
  // Parameters:
  //  - ReportMetricRequest
  ReportNodeMetric(reportMetricRequest *ReportNodeMetricRequest) (err error)
  // Parameters:
  //  - ReportMetricRequest
  ReportDestinationMetric(reportMetricRequest *ReportDestinationMetricRequest) (err error)
  // Parameters:
  //  - ReportMetricRequest
  ReportDestinationExtentMetric(reportMetricRequest *ReportDestinationExtentMetricRequest) (err error)
  // Parameters:
  //  - ReportMetricRequest
  ReportConsumerGroupMetric(reportMetricRequest *ReportConsumerGroupMetricRequest) (err error)
  // Parameters:
  //  - ReportMetricRequest
  ReportConsumerGroupExtentMetric(reportMetricRequest *ReportConsumerGroupExtentMetricRequest) (err error)
  // Parameters:
  //  - ReportMetricRequest
  ReportStoreExtentMetric(reportMetricRequest *ReportStoreExtentMetricRequest) (err error)
  // ********* Node Capacity Constraints CRUD *****************************
  // 
  // Parameters:
  //  - UpsertCapacitiesRequest
  UpsertInputHostCapacities(upsertCapacitiesRequest *UpsertInputHostCapacitiesRequest) (err error)
  // Parameters:
  //  - UpsertCapacitiesRequest
  UpsertOutputHostCapacities(upsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest) (err error)
  // Parameters:
  //  - UpsertCapacitiesRequest
  UpsertStoreCapacities(upsertCapacitiesRequest *UpsertStoreCapacitiesRequest) (err error)
  // Parameters:
  //  - RemoveCapacitiesRequest
  RemoveCapacities(removeCapacitiesRequest *RemoveCapacitiesRequest) (err error)
  // Parameters:
  //  - GetCapacitiesRequest
  GetCapacities(getCapacitiesRequest *GetCapacitiesRequest) (r *GetCapacitiesResult_, err error)
  // ********* Queue Information  *****************************
  // 
  // Parameters:
  //  - GetQueueDepthInfoRequest
  GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error)
}

//InputHost Stats:
//1) CPU
//2) Memory
//3) NumberOfActiveExtents
//4) NumberOfConnections
//
//OutputHost Stats:
//1) CPU
//2) Memory
//3) NumberOfActiveExtents
//4) NumberOfConnections
//
//StoreHost Stats:
//1) CPU
//2) Memory
//3) RemainingDiskSpace
//4) NumberOfActiveExtents
//5) NumberOfConnections
//
//Destination Stats: [Dimensions: ExtentId, InputHostId, DestinationId, TChannelId]
//1) IncomingMessagesPerSecond
//2) IncomingBytesPerSecond
//3) PutMessageLatency
//
//ConsumerGroup Stats: [Dimensions: ExtentId, OutputHostId, ConsumerGroupId, TChannelId]
//1) OutgoingMessagesPerSecond
//2) OutgoingBytesPerSecond
//
//StoreExtent Stats: [Dimensions: ExtentId, StoreId, DestinationId, ConsumerGroupId, TChannelId]
//
//
type ControllerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewControllerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ControllerClient {
  return &ControllerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewControllerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ControllerClient {
  return &ControllerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// ******************** Host Placement **********************************
// 
// Parameters:
//  - GetHostsRequest
func (p *ControllerClient) GetInputHosts(getHostsRequest *GetInputHostsRequest) (r *GetInputHostsResult_, err error) {
  if err = p.sendGetInputHosts(getHostsRequest); err != nil { return }
  return p.recvGetInputHosts()
}

func (p *ControllerClient) sendGetInputHosts(getHostsRequest *GetInputHostsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getInputHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerGetInputHostsArgs{
  GetHostsRequest : getHostsRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvGetInputHosts() (value *GetInputHostsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getInputHosts" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getInputHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getInputHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getInputHosts failed: invalid message type")
    return
  }
  result := ControllerGetInputHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - GetHostsRequest
func (p *ControllerClient) GetOutputHosts(getHostsRequest *GetOutputHostsRequest) (r *GetOutputHostsResult_, err error) {
  if err = p.sendGetOutputHosts(getHostsRequest); err != nil { return }
  return p.recvGetOutputHosts()
}

func (p *ControllerClient) sendGetOutputHosts(getHostsRequest *GetOutputHostsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getOutputHosts", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerGetOutputHostsArgs{
  GetHostsRequest : getHostsRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvGetOutputHosts() (value *GetOutputHostsResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getOutputHosts" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getOutputHosts failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getOutputHosts failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getOutputHosts failed: invalid message type")
    return
  }
  result := ControllerGetOutputHostsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// ******************** Destination CUD *********************************
// 
// Parameters:
//  - CreateRequest
func (p *ControllerClient) CreateDestination(createRequest *shared.CreateDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendCreateDestination(createRequest); err != nil { return }
  return p.recvCreateDestination()
}

func (p *ControllerClient) sendCreateDestination(createRequest *shared.CreateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerCreateDestinationArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvCreateDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDestination failed: invalid message type")
    return
  }
  result := ControllerCreateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *ControllerClient) UpdateDestination(updateRequest *shared.UpdateDestinationRequest) (r *shared.DestinationDescription, err error) {
  if err = p.sendUpdateDestination(updateRequest); err != nil { return }
  return p.recvUpdateDestination()
}

func (p *ControllerClient) sendUpdateDestination(updateRequest *shared.UpdateDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerUpdateDestinationArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvUpdateDestination() (value *shared.DestinationDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDestination failed: invalid message type")
    return
  }
  result := ControllerUpdateDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DeleteRequest
func (p *ControllerClient) DeleteDestination(deleteRequest *shared.DeleteDestinationRequest) (err error) {
  if err = p.sendDeleteDestination(deleteRequest); err != nil { return }
  return p.recvDeleteDestination()
}

func (p *ControllerClient) sendDeleteDestination(deleteRequest *shared.DeleteDestinationRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteDestination", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerDeleteDestinationArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvDeleteDestination() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteDestination" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteDestination failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteDestination failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteDestination failed: invalid message type")
    return
  }
  result := ControllerDeleteDestinationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  return
}

// ******************** ConsumerGroup CUD *******************************
// 
// Parameters:
//  - CreateRequest
func (p *ControllerClient) CreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendCreateConsumerGroup(createRequest); err != nil { return }
  return p.recvCreateConsumerGroup()
}

func (p *ControllerClient) sendCreateConsumerGroup(createRequest *shared.CreateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerCreateConsumerGroupArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvCreateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConsumerGroup failed: invalid message type")
    return
  }
  result := ControllerCreateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - UpdateRequest
func (p *ControllerClient) UpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest) (r *shared.ConsumerGroupDescription, err error) {
  if err = p.sendUpdateConsumerGroup(updateRequest); err != nil { return }
  return p.recvUpdateConsumerGroup()
}

func (p *ControllerClient) sendUpdateConsumerGroup(updateRequest *shared.UpdateConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerUpdateConsumerGroupArgs{
  UpdateRequest : updateRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvUpdateConsumerGroup() (value *shared.ConsumerGroupDescription, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateConsumerGroup failed: invalid message type")
    return
  }
  result := ControllerUpdateConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DeleteRequest
func (p *ControllerClient) DeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest) (err error) {
  if err = p.sendDeleteConsumerGroup(deleteRequest); err != nil { return }
  return p.recvDeleteConsumerGroup()
}

func (p *ControllerClient) sendDeleteConsumerGroup(deleteRequest *shared.DeleteConsumerGroupRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerDeleteConsumerGroupArgs{
  DeleteRequest : deleteRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvDeleteConsumerGroup() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteConsumerGroup" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteConsumerGroup failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteConsumerGroup failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteConsumerGroup failed: invalid message type")
    return
  }
  result := ControllerDeleteConsumerGroupResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityError != nil {
    err = result.EntityError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  return
}

// ******************** Extent Creation ***********************************
// 
// Parameters:
//  - CreateRequest
func (p *ControllerClient) CreateRemoteZoneExtent(createRequest *shared.CreateExtentRequest) (r *shared.CreateExtentResult_, err error) {
  if err = p.sendCreateRemoteZoneExtent(createRequest); err != nil { return }
  return p.recvCreateRemoteZoneExtent()
}

func (p *ControllerClient) sendCreateRemoteZoneExtent(createRequest *shared.CreateExtentRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerCreateRemoteZoneExtentArgs{
  CreateRequest : createRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvCreateRemoteZoneExtent() (value *shared.CreateExtentResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "createRemoteZoneExtent" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createRemoteZoneExtent failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createRemoteZoneExtent failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createRemoteZoneExtent failed: invalid message type")
    return
  }
  result := ControllerCreateRemoteZoneExtentResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.EntityExistsError != nil {
    err = result.EntityExistsError
    return 
  } else   if result.RequestError != nil {
    err = result.RequestError
    return 
  } else   if result.InternalError != nil {
    err = result.InternalError
    return 
  }
  value = result.GetSuccess()
  return
}

// ****************** Report Load ***************************************
// 
// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportNodeMetric(reportMetricRequest *ReportNodeMetricRequest) (err error) {
  if err = p.sendReportNodeMetric(reportMetricRequest); err != nil { return }
  return p.recvReportNodeMetric()
}

func (p *ControllerClient) sendReportNodeMetric(reportMetricRequest *ReportNodeMetricRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportNodeMetric", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerReportNodeMetricArgs{
  ReportMetricRequest : reportMetricRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvReportNodeMetric() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportNodeMetric" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportNodeMetric failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportNodeMetric failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportNodeMetric failed: invalid message type")
    return
  }
  result := ControllerReportNodeMetricResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportDestinationMetric(reportMetricRequest *ReportDestinationMetricRequest) (err error) {
  if err = p.sendReportDestinationMetric(reportMetricRequest); err != nil { return }
  return p.recvReportDestinationMetric()
}

func (p *ControllerClient) sendReportDestinationMetric(reportMetricRequest *ReportDestinationMetricRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportDestinationMetric", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerReportDestinationMetricArgs{
  ReportMetricRequest : reportMetricRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvReportDestinationMetric() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportDestinationMetric" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportDestinationMetric failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportDestinationMetric failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportDestinationMetric failed: invalid message type")
    return
  }
  result := ControllerReportDestinationMetricResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportDestinationExtentMetric(reportMetricRequest *ReportDestinationExtentMetricRequest) (err error) {
  if err = p.sendReportDestinationExtentMetric(reportMetricRequest); err != nil { return }
  return p.recvReportDestinationExtentMetric()
}

func (p *ControllerClient) sendReportDestinationExtentMetric(reportMetricRequest *ReportDestinationExtentMetricRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerReportDestinationExtentMetricArgs{
  ReportMetricRequest : reportMetricRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvReportDestinationExtentMetric() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportDestinationExtentMetric" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportDestinationExtentMetric failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportDestinationExtentMetric failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error25 error
    error25, err = error24.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error25
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportDestinationExtentMetric failed: invalid message type")
    return
  }
  result := ControllerReportDestinationExtentMetricResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportConsumerGroupMetric(reportMetricRequest *ReportConsumerGroupMetricRequest) (err error) {
  if err = p.sendReportConsumerGroupMetric(reportMetricRequest); err != nil { return }
  return p.recvReportConsumerGroupMetric()
}

func (p *ControllerClient) sendReportConsumerGroupMetric(reportMetricRequest *ReportConsumerGroupMetricRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerReportConsumerGroupMetricArgs{
  ReportMetricRequest : reportMetricRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvReportConsumerGroupMetric() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportConsumerGroupMetric" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportConsumerGroupMetric failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportConsumerGroupMetric failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error27 error
    error27, err = error26.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error27
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportConsumerGroupMetric failed: invalid message type")
    return
  }
  result := ControllerReportConsumerGroupMetricResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportConsumerGroupExtentMetric(reportMetricRequest *ReportConsumerGroupExtentMetricRequest) (err error) {
  if err = p.sendReportConsumerGroupExtentMetric(reportMetricRequest); err != nil { return }
  return p.recvReportConsumerGroupExtentMetric()
}

func (p *ControllerClient) sendReportConsumerGroupExtentMetric(reportMetricRequest *ReportConsumerGroupExtentMetricRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerReportConsumerGroupExtentMetricArgs{
  ReportMetricRequest : reportMetricRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvReportConsumerGroupExtentMetric() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportConsumerGroupExtentMetric" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportConsumerGroupExtentMetric failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportConsumerGroupExtentMetric failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error29 error
    error29, err = error28.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error29
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportConsumerGroupExtentMetric failed: invalid message type")
    return
  }
  result := ControllerReportConsumerGroupExtentMetricResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - ReportMetricRequest
func (p *ControllerClient) ReportStoreExtentMetric(reportMetricRequest *ReportStoreExtentMetricRequest) (err error) {
  if err = p.sendReportStoreExtentMetric(reportMetricRequest); err != nil { return }
  return p.recvReportStoreExtentMetric()
}

func (p *ControllerClient) sendReportStoreExtentMetric(reportMetricRequest *ReportStoreExtentMetricRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerReportStoreExtentMetricArgs{
  ReportMetricRequest : reportMetricRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvReportStoreExtentMetric() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "reportStoreExtentMetric" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportStoreExtentMetric failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportStoreExtentMetric failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error31 error
    error31, err = error30.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error31
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportStoreExtentMetric failed: invalid message type")
    return
  }
  result := ControllerReportStoreExtentMetricResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// ********* Node Capacity Constraints CRUD *****************************
// 
// Parameters:
//  - UpsertCapacitiesRequest
func (p *ControllerClient) UpsertInputHostCapacities(upsertCapacitiesRequest *UpsertInputHostCapacitiesRequest) (err error) {
  if err = p.sendUpsertInputHostCapacities(upsertCapacitiesRequest); err != nil { return }
  return p.recvUpsertInputHostCapacities()
}

func (p *ControllerClient) sendUpsertInputHostCapacities(upsertCapacitiesRequest *UpsertInputHostCapacitiesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerUpsertInputHostCapacitiesArgs{
  UpsertCapacitiesRequest : upsertCapacitiesRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvUpsertInputHostCapacities() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "upsertInputHostCapacities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upsertInputHostCapacities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upsertInputHostCapacities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upsertInputHostCapacities failed: invalid message type")
    return
  }
  result := ControllerUpsertInputHostCapacitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - UpsertCapacitiesRequest
func (p *ControllerClient) UpsertOutputHostCapacities(upsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest) (err error) {
  if err = p.sendUpsertOutputHostCapacities(upsertCapacitiesRequest); err != nil { return }
  return p.recvUpsertOutputHostCapacities()
}

func (p *ControllerClient) sendUpsertOutputHostCapacities(upsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerUpsertOutputHostCapacitiesArgs{
  UpsertCapacitiesRequest : upsertCapacitiesRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvUpsertOutputHostCapacities() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "upsertOutputHostCapacities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upsertOutputHostCapacities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upsertOutputHostCapacities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upsertOutputHostCapacities failed: invalid message type")
    return
  }
  result := ControllerUpsertOutputHostCapacitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - UpsertCapacitiesRequest
func (p *ControllerClient) UpsertStoreCapacities(upsertCapacitiesRequest *UpsertStoreCapacitiesRequest) (err error) {
  if err = p.sendUpsertStoreCapacities(upsertCapacitiesRequest); err != nil { return }
  return p.recvUpsertStoreCapacities()
}

func (p *ControllerClient) sendUpsertStoreCapacities(upsertCapacitiesRequest *UpsertStoreCapacitiesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("upsertStoreCapacities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerUpsertStoreCapacitiesArgs{
  UpsertCapacitiesRequest : upsertCapacitiesRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvUpsertStoreCapacities() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "upsertStoreCapacities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "upsertStoreCapacities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "upsertStoreCapacities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error37 error
    error37, err = error36.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error37
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "upsertStoreCapacities failed: invalid message type")
    return
  }
  result := ControllerUpsertStoreCapacitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - RemoveCapacitiesRequest
func (p *ControllerClient) RemoveCapacities(removeCapacitiesRequest *RemoveCapacitiesRequest) (err error) {
  if err = p.sendRemoveCapacities(removeCapacitiesRequest); err != nil { return }
  return p.recvRemoveCapacities()
}

func (p *ControllerClient) sendRemoveCapacities(removeCapacitiesRequest *RemoveCapacitiesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("removeCapacities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerRemoveCapacitiesArgs{
  RemoveCapacitiesRequest : removeCapacitiesRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvRemoveCapacities() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "removeCapacities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeCapacities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeCapacities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeCapacities failed: invalid message type")
    return
  }
  result := ControllerRemoveCapacitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - GetCapacitiesRequest
func (p *ControllerClient) GetCapacities(getCapacitiesRequest *GetCapacitiesRequest) (r *GetCapacitiesResult_, err error) {
  if err = p.sendGetCapacities(getCapacitiesRequest); err != nil { return }
  return p.recvGetCapacities()
}

func (p *ControllerClient) sendGetCapacities(getCapacitiesRequest *GetCapacitiesRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCapacities", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerGetCapacitiesArgs{
  GetCapacitiesRequest : getCapacitiesRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvGetCapacities() (value *GetCapacitiesResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCapacities" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCapacities failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCapacities failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCapacities failed: invalid message type")
    return
  }
  result := ControllerGetCapacitiesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// ********* Queue Information  *****************************
// 
// Parameters:
//  - GetQueueDepthInfoRequest
func (p *ControllerClient) GetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest) (r *GetQueueDepthInfoResult_, err error) {
  if err = p.sendGetQueueDepthInfo(getQueueDepthInfoRequest); err != nil { return }
  return p.recvGetQueueDepthInfo()
}

func (p *ControllerClient) sendGetQueueDepthInfo(getQueueDepthInfoRequest *GetQueueDepthInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ControllerGetQueueDepthInfoArgs{
  GetQueueDepthInfoRequest : getQueueDepthInfoRequest,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ControllerClient) recvGetQueueDepthInfo() (value *GetQueueDepthInfoResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getQueueDepthInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getQueueDepthInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueueDepthInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getQueueDepthInfo failed: invalid message type")
    return
  }
  result := ControllerGetQueueDepthInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.CacheMissError != nil {
    err = result.CacheMissError
    return 
  }
  value = result.GetSuccess()
  return
}


type ControllerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Controller
}

func (p *ControllerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ControllerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ControllerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewControllerProcessor(handler Controller) *ControllerProcessor {

  self44 := &ControllerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self44.processorMap["getInputHosts"] = &controllerProcessorGetInputHosts{handler:handler}
  self44.processorMap["getOutputHosts"] = &controllerProcessorGetOutputHosts{handler:handler}
  self44.processorMap["createDestination"] = &controllerProcessorCreateDestination{handler:handler}
  self44.processorMap["updateDestination"] = &controllerProcessorUpdateDestination{handler:handler}
  self44.processorMap["deleteDestination"] = &controllerProcessorDeleteDestination{handler:handler}
  self44.processorMap["createConsumerGroup"] = &controllerProcessorCreateConsumerGroup{handler:handler}
  self44.processorMap["updateConsumerGroup"] = &controllerProcessorUpdateConsumerGroup{handler:handler}
  self44.processorMap["deleteConsumerGroup"] = &controllerProcessorDeleteConsumerGroup{handler:handler}
  self44.processorMap["createRemoteZoneExtent"] = &controllerProcessorCreateRemoteZoneExtent{handler:handler}
  self44.processorMap["reportNodeMetric"] = &controllerProcessorReportNodeMetric{handler:handler}
  self44.processorMap["reportDestinationMetric"] = &controllerProcessorReportDestinationMetric{handler:handler}
  self44.processorMap["reportDestinationExtentMetric"] = &controllerProcessorReportDestinationExtentMetric{handler:handler}
  self44.processorMap["reportConsumerGroupMetric"] = &controllerProcessorReportConsumerGroupMetric{handler:handler}
  self44.processorMap["reportConsumerGroupExtentMetric"] = &controllerProcessorReportConsumerGroupExtentMetric{handler:handler}
  self44.processorMap["reportStoreExtentMetric"] = &controllerProcessorReportStoreExtentMetric{handler:handler}
  self44.processorMap["upsertInputHostCapacities"] = &controllerProcessorUpsertInputHostCapacities{handler:handler}
  self44.processorMap["upsertOutputHostCapacities"] = &controllerProcessorUpsertOutputHostCapacities{handler:handler}
  self44.processorMap["upsertStoreCapacities"] = &controllerProcessorUpsertStoreCapacities{handler:handler}
  self44.processorMap["removeCapacities"] = &controllerProcessorRemoveCapacities{handler:handler}
  self44.processorMap["getCapacities"] = &controllerProcessorGetCapacities{handler:handler}
  self44.processorMap["getQueueDepthInfo"] = &controllerProcessorGetQueueDepthInfo{handler:handler}
return self44
}

func (p *ControllerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x45.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x45

}

type controllerProcessorGetInputHosts struct {
  handler Controller
}

func (p *controllerProcessorGetInputHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerGetInputHostsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getInputHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerGetInputHostsResult{}
var retval *GetInputHostsResult_
  var err2 error
  if retval, err2 = p.handler.GetInputHosts(args.GetHostsRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getInputHosts: " + err2.Error())
    oprot.WriteMessageBegin("getInputHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getInputHosts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorGetOutputHosts struct {
  handler Controller
}

func (p *controllerProcessorGetOutputHosts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerGetOutputHostsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOutputHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerGetOutputHostsResult{}
var retval *GetOutputHostsResult_
  var err2 error
  if retval, err2 = p.handler.GetOutputHosts(args.GetHostsRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOutputHosts: " + err2.Error())
    oprot.WriteMessageBegin("getOutputHosts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getOutputHosts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorCreateDestination struct {
  handler Controller
}

func (p *controllerProcessorCreateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerCreateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerCreateDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.CreateDestination(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDestination: " + err2.Error())
    oprot.WriteMessageBegin("createDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorUpdateDestination struct {
  handler Controller
}

func (p *controllerProcessorUpdateDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerUpdateDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerUpdateDestinationResult{}
var retval *shared.DestinationDescription
  var err2 error
  if retval, err2 = p.handler.UpdateDestination(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDestination: " + err2.Error())
    oprot.WriteMessageBegin("updateDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorDeleteDestination struct {
  handler Controller
}

func (p *controllerProcessorDeleteDestination) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerDeleteDestinationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerDeleteDestinationResult{}
  var err2 error
  if err2 = p.handler.DeleteDestination(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteDestination: " + err2.Error())
    oprot.WriteMessageBegin("deleteDestination", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteDestination", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorCreateConsumerGroup struct {
  handler Controller
}

func (p *controllerProcessorCreateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerCreateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerCreateConsumerGroupResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.CreateConsumerGroup(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("createConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorUpdateConsumerGroup struct {
  handler Controller
}

func (p *controllerProcessorUpdateConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerUpdateConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerUpdateConsumerGroupResult{}
var retval *shared.ConsumerGroupDescription
  var err2 error
  if retval, err2 = p.handler.UpdateConsumerGroup(args.UpdateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorDeleteConsumerGroup struct {
  handler Controller
}

func (p *controllerProcessorDeleteConsumerGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerDeleteConsumerGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerDeleteConsumerGroupResult{}
  var err2 error
  if err2 = p.handler.DeleteConsumerGroup(args.DeleteRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityNotExistsError:
  result.EntityError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteConsumerGroup: " + err2.Error())
    oprot.WriteMessageBegin("deleteConsumerGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteConsumerGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorCreateRemoteZoneExtent struct {
  handler Controller
}

func (p *controllerProcessorCreateRemoteZoneExtent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerCreateRemoteZoneExtentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerCreateRemoteZoneExtentResult{}
var retval *shared.CreateExtentResult_
  var err2 error
  if retval, err2 = p.handler.CreateRemoteZoneExtent(args.CreateRequest); err2 != nil {
  switch v := err2.(type) {
    case *shared.EntityAlreadyExistsError:
  result.EntityExistsError = v
    case *shared.BadRequestError:
  result.RequestError = v
    case *shared.InternalServiceError:
  result.InternalError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRemoteZoneExtent: " + err2.Error())
    oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createRemoteZoneExtent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorReportNodeMetric struct {
  handler Controller
}

func (p *controllerProcessorReportNodeMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerReportNodeMetricArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportNodeMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerReportNodeMetricResult{}
  var err2 error
  if err2 = p.handler.ReportNodeMetric(args.ReportMetricRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportNodeMetric: " + err2.Error())
    oprot.WriteMessageBegin("reportNodeMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("reportNodeMetric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorReportDestinationMetric struct {
  handler Controller
}

func (p *controllerProcessorReportDestinationMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerReportDestinationMetricArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportDestinationMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerReportDestinationMetricResult{}
  var err2 error
  if err2 = p.handler.ReportDestinationMetric(args.ReportMetricRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportDestinationMetric: " + err2.Error())
    oprot.WriteMessageBegin("reportDestinationMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("reportDestinationMetric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorReportDestinationExtentMetric struct {
  handler Controller
}

func (p *controllerProcessorReportDestinationExtentMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerReportDestinationExtentMetricArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerReportDestinationExtentMetricResult{}
  var err2 error
  if err2 = p.handler.ReportDestinationExtentMetric(args.ReportMetricRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportDestinationExtentMetric: " + err2.Error())
    oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("reportDestinationExtentMetric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorReportConsumerGroupMetric struct {
  handler Controller
}

func (p *controllerProcessorReportConsumerGroupMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerReportConsumerGroupMetricArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerReportConsumerGroupMetricResult{}
  var err2 error
  if err2 = p.handler.ReportConsumerGroupMetric(args.ReportMetricRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportConsumerGroupMetric: " + err2.Error())
    oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("reportConsumerGroupMetric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorReportConsumerGroupExtentMetric struct {
  handler Controller
}

func (p *controllerProcessorReportConsumerGroupExtentMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerReportConsumerGroupExtentMetricArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerReportConsumerGroupExtentMetricResult{}
  var err2 error
  if err2 = p.handler.ReportConsumerGroupExtentMetric(args.ReportMetricRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportConsumerGroupExtentMetric: " + err2.Error())
    oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("reportConsumerGroupExtentMetric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorReportStoreExtentMetric struct {
  handler Controller
}

func (p *controllerProcessorReportStoreExtentMetric) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerReportStoreExtentMetricArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerReportStoreExtentMetricResult{}
  var err2 error
  if err2 = p.handler.ReportStoreExtentMetric(args.ReportMetricRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportStoreExtentMetric: " + err2.Error())
    oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("reportStoreExtentMetric", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorUpsertInputHostCapacities struct {
  handler Controller
}

func (p *controllerProcessorUpsertInputHostCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerUpsertInputHostCapacitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerUpsertInputHostCapacitiesResult{}
  var err2 error
  if err2 = p.handler.UpsertInputHostCapacities(args.UpsertCapacitiesRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upsertInputHostCapacities: " + err2.Error())
    oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("upsertInputHostCapacities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorUpsertOutputHostCapacities struct {
  handler Controller
}

func (p *controllerProcessorUpsertOutputHostCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerUpsertOutputHostCapacitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerUpsertOutputHostCapacitiesResult{}
  var err2 error
  if err2 = p.handler.UpsertOutputHostCapacities(args.UpsertCapacitiesRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upsertOutputHostCapacities: " + err2.Error())
    oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("upsertOutputHostCapacities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorUpsertStoreCapacities struct {
  handler Controller
}

func (p *controllerProcessorUpsertStoreCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerUpsertStoreCapacitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("upsertStoreCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerUpsertStoreCapacitiesResult{}
  var err2 error
  if err2 = p.handler.UpsertStoreCapacities(args.UpsertCapacitiesRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upsertStoreCapacities: " + err2.Error())
    oprot.WriteMessageBegin("upsertStoreCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("upsertStoreCapacities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorRemoveCapacities struct {
  handler Controller
}

func (p *controllerProcessorRemoveCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerRemoveCapacitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerRemoveCapacitiesResult{}
  var err2 error
  if err2 = p.handler.RemoveCapacities(args.RemoveCapacitiesRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeCapacities: " + err2.Error())
    oprot.WriteMessageBegin("removeCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeCapacities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorGetCapacities struct {
  handler Controller
}

func (p *controllerProcessorGetCapacities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerGetCapacitiesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerGetCapacitiesResult{}
var retval *GetCapacitiesResult_
  var err2 error
  if retval, err2 = p.handler.GetCapacities(args.GetCapacitiesRequest); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCapacities: " + err2.Error())
    oprot.WriteMessageBegin("getCapacities", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCapacities", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type controllerProcessorGetQueueDepthInfo struct {
  handler Controller
}

func (p *controllerProcessorGetQueueDepthInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ControllerGetQueueDepthInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ControllerGetQueueDepthInfoResult{}
var retval *GetQueueDepthInfoResult_
  var err2 error
  if retval, err2 = p.handler.GetQueueDepthInfo(args.GetQueueDepthInfoRequest); err2 != nil {
  switch v := err2.(type) {
    case *QueueCacheMissError:
  result.CacheMissError = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueueDepthInfo: " + err2.Error())
    oprot.WriteMessageBegin("getQueueDepthInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getQueueDepthInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GetHostsRequest
type ControllerGetInputHostsArgs struct {
  GetHostsRequest *GetInputHostsRequest `thrift:"getHostsRequest,1" db:"getHostsRequest" json:"getHostsRequest"`
}

func NewControllerGetInputHostsArgs() *ControllerGetInputHostsArgs {
  return &ControllerGetInputHostsArgs{}
}

var ControllerGetInputHostsArgs_GetHostsRequest_DEFAULT *GetInputHostsRequest
func (p *ControllerGetInputHostsArgs) GetGetHostsRequest() *GetInputHostsRequest {
  if !p.IsSetGetHostsRequest() {
    return ControllerGetInputHostsArgs_GetHostsRequest_DEFAULT
  }
return p.GetHostsRequest
}
func (p *ControllerGetInputHostsArgs) IsSetGetHostsRequest() bool {
  return p.GetHostsRequest != nil
}

func (p *ControllerGetInputHostsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetInputHostsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetHostsRequest = &GetInputHostsRequest{}
  if err := p.GetHostsRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
  }
  return nil
}

func (p *ControllerGetInputHostsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getInputHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetInputHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err) }
  if err := p.GetHostsRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err) }
  return err
}

func (p *ControllerGetInputHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetInputHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type ControllerGetInputHostsResult struct {
  Success *GetInputHostsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerGetInputHostsResult() *ControllerGetInputHostsResult {
  return &ControllerGetInputHostsResult{}
}

var ControllerGetInputHostsResult_Success_DEFAULT *GetInputHostsResult_
func (p *ControllerGetInputHostsResult) GetSuccess() *GetInputHostsResult_ {
  if !p.IsSetSuccess() {
    return ControllerGetInputHostsResult_Success_DEFAULT
  }
return p.Success
}
var ControllerGetInputHostsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerGetInputHostsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerGetInputHostsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerGetInputHostsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerGetInputHostsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerGetInputHostsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerGetInputHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerGetInputHostsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerGetInputHostsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerGetInputHostsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetInputHostsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetInputHostsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerGetInputHostsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerGetInputHostsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerGetInputHostsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getInputHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetInputHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerGetInputHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerGetInputHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerGetInputHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetInputHostsResult(%+v)", *p)
}

// Attributes:
//  - GetHostsRequest
type ControllerGetOutputHostsArgs struct {
  GetHostsRequest *GetOutputHostsRequest `thrift:"getHostsRequest,1" db:"getHostsRequest" json:"getHostsRequest"`
}

func NewControllerGetOutputHostsArgs() *ControllerGetOutputHostsArgs {
  return &ControllerGetOutputHostsArgs{}
}

var ControllerGetOutputHostsArgs_GetHostsRequest_DEFAULT *GetOutputHostsRequest
func (p *ControllerGetOutputHostsArgs) GetGetHostsRequest() *GetOutputHostsRequest {
  if !p.IsSetGetHostsRequest() {
    return ControllerGetOutputHostsArgs_GetHostsRequest_DEFAULT
  }
return p.GetHostsRequest
}
func (p *ControllerGetOutputHostsArgs) IsSetGetHostsRequest() bool {
  return p.GetHostsRequest != nil
}

func (p *ControllerGetOutputHostsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetOutputHostsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetHostsRequest = &GetOutputHostsRequest{}
  if err := p.GetHostsRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetHostsRequest), err)
  }
  return nil
}

func (p *ControllerGetOutputHostsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOutputHosts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetOutputHostsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getHostsRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getHostsRequest: ", p), err) }
  if err := p.GetHostsRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetHostsRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getHostsRequest: ", p), err) }
  return err
}

func (p *ControllerGetOutputHostsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetOutputHostsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RequestError
//  - InternalError
type ControllerGetOutputHostsResult struct {
  Success *GetOutputHostsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,1" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,2" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerGetOutputHostsResult() *ControllerGetOutputHostsResult {
  return &ControllerGetOutputHostsResult{}
}

var ControllerGetOutputHostsResult_Success_DEFAULT *GetOutputHostsResult_
func (p *ControllerGetOutputHostsResult) GetSuccess() *GetOutputHostsResult_ {
  if !p.IsSetSuccess() {
    return ControllerGetOutputHostsResult_Success_DEFAULT
  }
return p.Success
}
var ControllerGetOutputHostsResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerGetOutputHostsResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerGetOutputHostsResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerGetOutputHostsResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerGetOutputHostsResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerGetOutputHostsResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerGetOutputHostsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerGetOutputHostsResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerGetOutputHostsResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerGetOutputHostsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetOutputHostsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetOutputHostsResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerGetOutputHostsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerGetOutputHostsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerGetOutputHostsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOutputHosts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetOutputHostsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerGetOutputHostsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerGetOutputHostsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerGetOutputHostsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetOutputHostsResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ControllerCreateDestinationArgs struct {
  CreateRequest *shared.CreateDestinationRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewControllerCreateDestinationArgs() *ControllerCreateDestinationArgs {
  return &ControllerCreateDestinationArgs{}
}

var ControllerCreateDestinationArgs_CreateRequest_DEFAULT *shared.CreateDestinationRequest
func (p *ControllerCreateDestinationArgs) GetCreateRequest() *shared.CreateDestinationRequest {
  if !p.IsSetCreateRequest() {
    return ControllerCreateDestinationArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ControllerCreateDestinationArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ControllerCreateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerCreateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateDestinationRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ControllerCreateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerCreateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ControllerCreateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerCreateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalError
type ControllerCreateDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerCreateDestinationResult() *ControllerCreateDestinationResult {
  return &ControllerCreateDestinationResult{}
}

var ControllerCreateDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *ControllerCreateDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return ControllerCreateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var ControllerCreateDestinationResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ControllerCreateDestinationResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ControllerCreateDestinationResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ControllerCreateDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerCreateDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerCreateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerCreateDestinationResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerCreateDestinationResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerCreateDestinationResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerCreateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerCreateDestinationResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ControllerCreateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerCreateDestinationResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerCreateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerCreateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerCreateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ControllerCreateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerCreateDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerCreateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerCreateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerCreateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerCreateDestinationResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ControllerUpdateDestinationArgs struct {
  UpdateRequest *shared.UpdateDestinationRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewControllerUpdateDestinationArgs() *ControllerUpdateDestinationArgs {
  return &ControllerUpdateDestinationArgs{}
}

var ControllerUpdateDestinationArgs_UpdateRequest_DEFAULT *shared.UpdateDestinationRequest
func (p *ControllerUpdateDestinationArgs) GetUpdateRequest() *shared.UpdateDestinationRequest {
  if !p.IsSetUpdateRequest() {
    return ControllerUpdateDestinationArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *ControllerUpdateDestinationArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *ControllerUpdateDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateDestinationRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpdateDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *ControllerUpdateDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpdateDestinationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerUpdateDestinationResult struct {
  Success *shared.DestinationDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerUpdateDestinationResult() *ControllerUpdateDestinationResult {
  return &ControllerUpdateDestinationResult{}
}

var ControllerUpdateDestinationResult_Success_DEFAULT *shared.DestinationDescription
func (p *ControllerUpdateDestinationResult) GetSuccess() *shared.DestinationDescription {
  if !p.IsSetSuccess() {
    return ControllerUpdateDestinationResult_Success_DEFAULT
  }
return p.Success
}
var ControllerUpdateDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ControllerUpdateDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ControllerUpdateDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ControllerUpdateDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerUpdateDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerUpdateDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerUpdateDestinationResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerUpdateDestinationResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerUpdateDestinationResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerUpdateDestinationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerUpdateDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ControllerUpdateDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerUpdateDestinationResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerUpdateDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.DestinationDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerUpdateDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpdateDestinationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpdateDestinationResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ControllerDeleteDestinationArgs struct {
  DeleteRequest *shared.DeleteDestinationRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewControllerDeleteDestinationArgs() *ControllerDeleteDestinationArgs {
  return &ControllerDeleteDestinationArgs{}
}

var ControllerDeleteDestinationArgs_DeleteRequest_DEFAULT *shared.DeleteDestinationRequest
func (p *ControllerDeleteDestinationArgs) GetDeleteRequest() *shared.DeleteDestinationRequest {
  if !p.IsSetDeleteRequest() {
    return ControllerDeleteDestinationArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *ControllerDeleteDestinationArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *ControllerDeleteDestinationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerDeleteDestinationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteDestinationRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *ControllerDeleteDestinationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerDeleteDestinationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *ControllerDeleteDestinationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerDeleteDestinationArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerDeleteDestinationResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerDeleteDestinationResult() *ControllerDeleteDestinationResult {
  return &ControllerDeleteDestinationResult{}
}

var ControllerDeleteDestinationResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ControllerDeleteDestinationResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ControllerDeleteDestinationResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ControllerDeleteDestinationResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerDeleteDestinationResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerDeleteDestinationResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerDeleteDestinationResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerDeleteDestinationResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerDeleteDestinationResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerDeleteDestinationResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ControllerDeleteDestinationResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerDeleteDestinationResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerDeleteDestinationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerDeleteDestinationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ControllerDeleteDestinationResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerDeleteDestinationResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerDeleteDestinationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteDestination_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerDeleteDestinationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ControllerDeleteDestinationResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerDeleteDestinationResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerDeleteDestinationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerDeleteDestinationResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ControllerCreateConsumerGroupArgs struct {
  CreateRequest *shared.CreateConsumerGroupRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewControllerCreateConsumerGroupArgs() *ControllerCreateConsumerGroupArgs {
  return &ControllerCreateConsumerGroupArgs{}
}

var ControllerCreateConsumerGroupArgs_CreateRequest_DEFAULT *shared.CreateConsumerGroupRequest
func (p *ControllerCreateConsumerGroupArgs) GetCreateRequest() *shared.CreateConsumerGroupRequest {
  if !p.IsSetCreateRequest() {
    return ControllerCreateConsumerGroupArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ControllerCreateConsumerGroupArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ControllerCreateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateConsumerGroupRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerCreateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ControllerCreateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerCreateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalError
type ControllerCreateConsumerGroupResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerCreateConsumerGroupResult() *ControllerCreateConsumerGroupResult {
  return &ControllerCreateConsumerGroupResult{}
}

var ControllerCreateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *ControllerCreateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return ControllerCreateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var ControllerCreateConsumerGroupResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ControllerCreateConsumerGroupResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ControllerCreateConsumerGroupResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ControllerCreateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerCreateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerCreateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerCreateConsumerGroupResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerCreateConsumerGroupResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerCreateConsumerGroupResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerCreateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerCreateConsumerGroupResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ControllerCreateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerCreateConsumerGroupResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerCreateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerCreateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerCreateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerCreateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerCreateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - UpdateRequest
type ControllerUpdateConsumerGroupArgs struct {
  UpdateRequest *shared.UpdateConsumerGroupRequest `thrift:"updateRequest,1" db:"updateRequest" json:"updateRequest"`
}

func NewControllerUpdateConsumerGroupArgs() *ControllerUpdateConsumerGroupArgs {
  return &ControllerUpdateConsumerGroupArgs{}
}

var ControllerUpdateConsumerGroupArgs_UpdateRequest_DEFAULT *shared.UpdateConsumerGroupRequest
func (p *ControllerUpdateConsumerGroupArgs) GetUpdateRequest() *shared.UpdateConsumerGroupRequest {
  if !p.IsSetUpdateRequest() {
    return ControllerUpdateConsumerGroupArgs_UpdateRequest_DEFAULT
  }
return p.UpdateRequest
}
func (p *ControllerUpdateConsumerGroupArgs) IsSetUpdateRequest() bool {
  return p.UpdateRequest != nil
}

func (p *ControllerUpdateConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpdateRequest = &shared.UpdateConsumerGroupRequest{}
  if err := p.UpdateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpdateRequest), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpdateConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updateRequest: ", p), err) }
  if err := p.UpdateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpdateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updateRequest: ", p), err) }
  return err
}

func (p *ControllerUpdateConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpdateConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerUpdateConsumerGroupResult struct {
  Success *shared.ConsumerGroupDescription `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerUpdateConsumerGroupResult() *ControllerUpdateConsumerGroupResult {
  return &ControllerUpdateConsumerGroupResult{}
}

var ControllerUpdateConsumerGroupResult_Success_DEFAULT *shared.ConsumerGroupDescription
func (p *ControllerUpdateConsumerGroupResult) GetSuccess() *shared.ConsumerGroupDescription {
  if !p.IsSetSuccess() {
    return ControllerUpdateConsumerGroupResult_Success_DEFAULT
  }
return p.Success
}
var ControllerUpdateConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ControllerUpdateConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ControllerUpdateConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ControllerUpdateConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerUpdateConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerUpdateConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerUpdateConsumerGroupResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerUpdateConsumerGroupResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerUpdateConsumerGroupResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerUpdateConsumerGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerUpdateConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ControllerUpdateConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerUpdateConsumerGroupResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerUpdateConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.ConsumerGroupDescription{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerUpdateConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpdateConsumerGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerUpdateConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpdateConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - DeleteRequest
type ControllerDeleteConsumerGroupArgs struct {
  DeleteRequest *shared.DeleteConsumerGroupRequest `thrift:"deleteRequest,1" db:"deleteRequest" json:"deleteRequest"`
}

func NewControllerDeleteConsumerGroupArgs() *ControllerDeleteConsumerGroupArgs {
  return &ControllerDeleteConsumerGroupArgs{}
}

var ControllerDeleteConsumerGroupArgs_DeleteRequest_DEFAULT *shared.DeleteConsumerGroupRequest
func (p *ControllerDeleteConsumerGroupArgs) GetDeleteRequest() *shared.DeleteConsumerGroupRequest {
  if !p.IsSetDeleteRequest() {
    return ControllerDeleteConsumerGroupArgs_DeleteRequest_DEFAULT
  }
return p.DeleteRequest
}
func (p *ControllerDeleteConsumerGroupArgs) IsSetDeleteRequest() bool {
  return p.DeleteRequest != nil
}

func (p *ControllerDeleteConsumerGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerDeleteConsumerGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.DeleteRequest = &shared.DeleteConsumerGroupRequest{}
  if err := p.DeleteRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteRequest), err)
  }
  return nil
}

func (p *ControllerDeleteConsumerGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerDeleteConsumerGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deleteRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deleteRequest: ", p), err) }
  if err := p.DeleteRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deleteRequest: ", p), err) }
  return err
}

func (p *ControllerDeleteConsumerGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerDeleteConsumerGroupArgs(%+v)", *p)
}

// Attributes:
//  - EntityError
//  - RequestError
//  - InternalError
type ControllerDeleteConsumerGroupResult struct {
  EntityError *shared.EntityNotExistsError `thrift:"entityError,1" db:"entityError" json:"entityError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerDeleteConsumerGroupResult() *ControllerDeleteConsumerGroupResult {
  return &ControllerDeleteConsumerGroupResult{}
}

var ControllerDeleteConsumerGroupResult_EntityError_DEFAULT *shared.EntityNotExistsError
func (p *ControllerDeleteConsumerGroupResult) GetEntityError() *shared.EntityNotExistsError {
  if !p.IsSetEntityError() {
    return ControllerDeleteConsumerGroupResult_EntityError_DEFAULT
  }
return p.EntityError
}
var ControllerDeleteConsumerGroupResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerDeleteConsumerGroupResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerDeleteConsumerGroupResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerDeleteConsumerGroupResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerDeleteConsumerGroupResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerDeleteConsumerGroupResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerDeleteConsumerGroupResult) IsSetEntityError() bool {
  return p.EntityError != nil
}

func (p *ControllerDeleteConsumerGroupResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerDeleteConsumerGroupResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerDeleteConsumerGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerDeleteConsumerGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityError = &shared.EntityNotExistsError{}
  if err := p.EntityError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityError), err)
  }
  return nil
}

func (p *ControllerDeleteConsumerGroupResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerDeleteConsumerGroupResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerDeleteConsumerGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteConsumerGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerDeleteConsumerGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityError() {
    if err := oprot.WriteFieldBegin("entityError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityError: ", p), err) }
    if err := p.EntityError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityError: ", p), err) }
  }
  return err
}

func (p *ControllerDeleteConsumerGroupResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerDeleteConsumerGroupResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerDeleteConsumerGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerDeleteConsumerGroupResult(%+v)", *p)
}

// Attributes:
//  - CreateRequest
type ControllerCreateRemoteZoneExtentArgs struct {
  CreateRequest *shared.CreateExtentRequest `thrift:"createRequest,1" db:"createRequest" json:"createRequest"`
}

func NewControllerCreateRemoteZoneExtentArgs() *ControllerCreateRemoteZoneExtentArgs {
  return &ControllerCreateRemoteZoneExtentArgs{}
}

var ControllerCreateRemoteZoneExtentArgs_CreateRequest_DEFAULT *shared.CreateExtentRequest
func (p *ControllerCreateRemoteZoneExtentArgs) GetCreateRequest() *shared.CreateExtentRequest {
  if !p.IsSetCreateRequest() {
    return ControllerCreateRemoteZoneExtentArgs_CreateRequest_DEFAULT
  }
return p.CreateRequest
}
func (p *ControllerCreateRemoteZoneExtentArgs) IsSetCreateRequest() bool {
  return p.CreateRequest != nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.CreateRequest = &shared.CreateExtentRequest{}
  if err := p.CreateRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateRequest), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteZoneExtent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createRequest: ", p), err) }
  if err := p.CreateRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createRequest: ", p), err) }
  return err
}

func (p *ControllerCreateRemoteZoneExtentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerCreateRemoteZoneExtentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - EntityExistsError
//  - RequestError
//  - InternalError
type ControllerCreateRemoteZoneExtentResult struct {
  Success *shared.CreateExtentResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  EntityExistsError *shared.EntityAlreadyExistsError `thrift:"entityExistsError,1" db:"entityExistsError" json:"entityExistsError,omitempty"`
  RequestError *shared.BadRequestError `thrift:"requestError,2" db:"requestError" json:"requestError,omitempty"`
  InternalError *shared.InternalServiceError `thrift:"internalError,3" db:"internalError" json:"internalError,omitempty"`
}

func NewControllerCreateRemoteZoneExtentResult() *ControllerCreateRemoteZoneExtentResult {
  return &ControllerCreateRemoteZoneExtentResult{}
}

var ControllerCreateRemoteZoneExtentResult_Success_DEFAULT *shared.CreateExtentResult_
func (p *ControllerCreateRemoteZoneExtentResult) GetSuccess() *shared.CreateExtentResult_ {
  if !p.IsSetSuccess() {
    return ControllerCreateRemoteZoneExtentResult_Success_DEFAULT
  }
return p.Success
}
var ControllerCreateRemoteZoneExtentResult_EntityExistsError_DEFAULT *shared.EntityAlreadyExistsError
func (p *ControllerCreateRemoteZoneExtentResult) GetEntityExistsError() *shared.EntityAlreadyExistsError {
  if !p.IsSetEntityExistsError() {
    return ControllerCreateRemoteZoneExtentResult_EntityExistsError_DEFAULT
  }
return p.EntityExistsError
}
var ControllerCreateRemoteZoneExtentResult_RequestError_DEFAULT *shared.BadRequestError
func (p *ControllerCreateRemoteZoneExtentResult) GetRequestError() *shared.BadRequestError {
  if !p.IsSetRequestError() {
    return ControllerCreateRemoteZoneExtentResult_RequestError_DEFAULT
  }
return p.RequestError
}
var ControllerCreateRemoteZoneExtentResult_InternalError_DEFAULT *shared.InternalServiceError
func (p *ControllerCreateRemoteZoneExtentResult) GetInternalError() *shared.InternalServiceError {
  if !p.IsSetInternalError() {
    return ControllerCreateRemoteZoneExtentResult_InternalError_DEFAULT
  }
return p.InternalError
}
func (p *ControllerCreateRemoteZoneExtentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) IsSetEntityExistsError() bool {
  return p.EntityExistsError != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) IsSetRequestError() bool {
  return p.RequestError != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *ControllerCreateRemoteZoneExtentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &shared.CreateExtentResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.EntityExistsError = &shared.EntityAlreadyExistsError{}
  if err := p.EntityExistsError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityExistsError), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RequestError = &shared.BadRequestError{}
  if err := p.RequestError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestError), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentResult)  ReadField3(iprot thrift.TProtocol) error {
  p.InternalError = &shared.InternalServiceError{}
  if err := p.InternalError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalError), err)
  }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRemoteZoneExtent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityExistsError() {
    if err := oprot.WriteFieldBegin("entityExistsError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entityExistsError: ", p), err) }
    if err := p.EntityExistsError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityExistsError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entityExistsError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestError() {
    if err := oprot.WriteFieldBegin("requestError", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requestError: ", p), err) }
    if err := p.RequestError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requestError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateRemoteZoneExtentResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internalError", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:internalError: ", p), err) }
    if err := p.InternalError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:internalError: ", p), err) }
  }
  return err
}

func (p *ControllerCreateRemoteZoneExtentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerCreateRemoteZoneExtentResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportNodeMetricArgs struct {
  ReportMetricRequest *ReportNodeMetricRequest `thrift:"reportMetricRequest,1" db:"reportMetricRequest" json:"reportMetricRequest"`
}

func NewControllerReportNodeMetricArgs() *ControllerReportNodeMetricArgs {
  return &ControllerReportNodeMetricArgs{}
}

var ControllerReportNodeMetricArgs_ReportMetricRequest_DEFAULT *ReportNodeMetricRequest
func (p *ControllerReportNodeMetricArgs) GetReportMetricRequest() *ReportNodeMetricRequest {
  if !p.IsSetReportMetricRequest() {
    return ControllerReportNodeMetricArgs_ReportMetricRequest_DEFAULT
  }
return p.ReportMetricRequest
}
func (p *ControllerReportNodeMetricArgs) IsSetReportMetricRequest() bool {
  return p.ReportMetricRequest != nil
}

func (p *ControllerReportNodeMetricArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportNodeMetricArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ReportMetricRequest = &ReportNodeMetricRequest{}
  if err := p.ReportMetricRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
  }
  return nil
}

func (p *ControllerReportNodeMetricArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportNodeMetric_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportNodeMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err) }
  if err := p.ReportMetricRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err) }
  return err
}

func (p *ControllerReportNodeMetricArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportNodeMetricArgs(%+v)", *p)
}

type ControllerReportNodeMetricResult struct {
}

func NewControllerReportNodeMetricResult() *ControllerReportNodeMetricResult {
  return &ControllerReportNodeMetricResult{}
}

func (p *ControllerReportNodeMetricResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportNodeMetricResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportNodeMetric_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportNodeMetricResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportNodeMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportDestinationMetricArgs struct {
  ReportMetricRequest *ReportDestinationMetricRequest `thrift:"reportMetricRequest,1" db:"reportMetricRequest" json:"reportMetricRequest"`
}

func NewControllerReportDestinationMetricArgs() *ControllerReportDestinationMetricArgs {
  return &ControllerReportDestinationMetricArgs{}
}

var ControllerReportDestinationMetricArgs_ReportMetricRequest_DEFAULT *ReportDestinationMetricRequest
func (p *ControllerReportDestinationMetricArgs) GetReportMetricRequest() *ReportDestinationMetricRequest {
  if !p.IsSetReportMetricRequest() {
    return ControllerReportDestinationMetricArgs_ReportMetricRequest_DEFAULT
  }
return p.ReportMetricRequest
}
func (p *ControllerReportDestinationMetricArgs) IsSetReportMetricRequest() bool {
  return p.ReportMetricRequest != nil
}

func (p *ControllerReportDestinationMetricArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportDestinationMetricArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ReportMetricRequest = &ReportDestinationMetricRequest{}
  if err := p.ReportMetricRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
  }
  return nil
}

func (p *ControllerReportDestinationMetricArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportDestinationMetric_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportDestinationMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err) }
  if err := p.ReportMetricRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err) }
  return err
}

func (p *ControllerReportDestinationMetricArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportDestinationMetricArgs(%+v)", *p)
}

type ControllerReportDestinationMetricResult struct {
}

func NewControllerReportDestinationMetricResult() *ControllerReportDestinationMetricResult {
  return &ControllerReportDestinationMetricResult{}
}

func (p *ControllerReportDestinationMetricResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportDestinationMetricResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportDestinationMetric_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportDestinationMetricResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportDestinationMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportDestinationExtentMetricArgs struct {
  ReportMetricRequest *ReportDestinationExtentMetricRequest `thrift:"reportMetricRequest,1" db:"reportMetricRequest" json:"reportMetricRequest"`
}

func NewControllerReportDestinationExtentMetricArgs() *ControllerReportDestinationExtentMetricArgs {
  return &ControllerReportDestinationExtentMetricArgs{}
}

var ControllerReportDestinationExtentMetricArgs_ReportMetricRequest_DEFAULT *ReportDestinationExtentMetricRequest
func (p *ControllerReportDestinationExtentMetricArgs) GetReportMetricRequest() *ReportDestinationExtentMetricRequest {
  if !p.IsSetReportMetricRequest() {
    return ControllerReportDestinationExtentMetricArgs_ReportMetricRequest_DEFAULT
  }
return p.ReportMetricRequest
}
func (p *ControllerReportDestinationExtentMetricArgs) IsSetReportMetricRequest() bool {
  return p.ReportMetricRequest != nil
}

func (p *ControllerReportDestinationExtentMetricArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportDestinationExtentMetricArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ReportMetricRequest = &ReportDestinationExtentMetricRequest{}
  if err := p.ReportMetricRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
  }
  return nil
}

func (p *ControllerReportDestinationExtentMetricArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportDestinationExtentMetric_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportDestinationExtentMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err) }
  if err := p.ReportMetricRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err) }
  return err
}

func (p *ControllerReportDestinationExtentMetricArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportDestinationExtentMetricArgs(%+v)", *p)
}

type ControllerReportDestinationExtentMetricResult struct {
}

func NewControllerReportDestinationExtentMetricResult() *ControllerReportDestinationExtentMetricResult {
  return &ControllerReportDestinationExtentMetricResult{}
}

func (p *ControllerReportDestinationExtentMetricResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportDestinationExtentMetricResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportDestinationExtentMetric_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportDestinationExtentMetricResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportDestinationExtentMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportConsumerGroupMetricArgs struct {
  ReportMetricRequest *ReportConsumerGroupMetricRequest `thrift:"reportMetricRequest,1" db:"reportMetricRequest" json:"reportMetricRequest"`
}

func NewControllerReportConsumerGroupMetricArgs() *ControllerReportConsumerGroupMetricArgs {
  return &ControllerReportConsumerGroupMetricArgs{}
}

var ControllerReportConsumerGroupMetricArgs_ReportMetricRequest_DEFAULT *ReportConsumerGroupMetricRequest
func (p *ControllerReportConsumerGroupMetricArgs) GetReportMetricRequest() *ReportConsumerGroupMetricRequest {
  if !p.IsSetReportMetricRequest() {
    return ControllerReportConsumerGroupMetricArgs_ReportMetricRequest_DEFAULT
  }
return p.ReportMetricRequest
}
func (p *ControllerReportConsumerGroupMetricArgs) IsSetReportMetricRequest() bool {
  return p.ReportMetricRequest != nil
}

func (p *ControllerReportConsumerGroupMetricArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportConsumerGroupMetricArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ReportMetricRequest = &ReportConsumerGroupMetricRequest{}
  if err := p.ReportMetricRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
  }
  return nil
}

func (p *ControllerReportConsumerGroupMetricArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportConsumerGroupMetric_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportConsumerGroupMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err) }
  if err := p.ReportMetricRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err) }
  return err
}

func (p *ControllerReportConsumerGroupMetricArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportConsumerGroupMetricArgs(%+v)", *p)
}

type ControllerReportConsumerGroupMetricResult struct {
}

func NewControllerReportConsumerGroupMetricResult() *ControllerReportConsumerGroupMetricResult {
  return &ControllerReportConsumerGroupMetricResult{}
}

func (p *ControllerReportConsumerGroupMetricResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportConsumerGroupMetricResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportConsumerGroupMetric_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportConsumerGroupMetricResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportConsumerGroupMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportConsumerGroupExtentMetricArgs struct {
  ReportMetricRequest *ReportConsumerGroupExtentMetricRequest `thrift:"reportMetricRequest,1" db:"reportMetricRequest" json:"reportMetricRequest"`
}

func NewControllerReportConsumerGroupExtentMetricArgs() *ControllerReportConsumerGroupExtentMetricArgs {
  return &ControllerReportConsumerGroupExtentMetricArgs{}
}

var ControllerReportConsumerGroupExtentMetricArgs_ReportMetricRequest_DEFAULT *ReportConsumerGroupExtentMetricRequest
func (p *ControllerReportConsumerGroupExtentMetricArgs) GetReportMetricRequest() *ReportConsumerGroupExtentMetricRequest {
  if !p.IsSetReportMetricRequest() {
    return ControllerReportConsumerGroupExtentMetricArgs_ReportMetricRequest_DEFAULT
  }
return p.ReportMetricRequest
}
func (p *ControllerReportConsumerGroupExtentMetricArgs) IsSetReportMetricRequest() bool {
  return p.ReportMetricRequest != nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ReportMetricRequest = &ReportConsumerGroupExtentMetricRequest{}
  if err := p.ReportMetricRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
  }
  return nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportConsumerGroupExtentMetric_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err) }
  if err := p.ReportMetricRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err) }
  return err
}

func (p *ControllerReportConsumerGroupExtentMetricArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportConsumerGroupExtentMetricArgs(%+v)", *p)
}

type ControllerReportConsumerGroupExtentMetricResult struct {
}

func NewControllerReportConsumerGroupExtentMetricResult() *ControllerReportConsumerGroupExtentMetricResult {
  return &ControllerReportConsumerGroupExtentMetricResult{}
}

func (p *ControllerReportConsumerGroupExtentMetricResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportConsumerGroupExtentMetricResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportConsumerGroupExtentMetric_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportConsumerGroupExtentMetricResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportConsumerGroupExtentMetricResult(%+v)", *p)
}

// Attributes:
//  - ReportMetricRequest
type ControllerReportStoreExtentMetricArgs struct {
  ReportMetricRequest *ReportStoreExtentMetricRequest `thrift:"reportMetricRequest,1" db:"reportMetricRequest" json:"reportMetricRequest"`
}

func NewControllerReportStoreExtentMetricArgs() *ControllerReportStoreExtentMetricArgs {
  return &ControllerReportStoreExtentMetricArgs{}
}

var ControllerReportStoreExtentMetricArgs_ReportMetricRequest_DEFAULT *ReportStoreExtentMetricRequest
func (p *ControllerReportStoreExtentMetricArgs) GetReportMetricRequest() *ReportStoreExtentMetricRequest {
  if !p.IsSetReportMetricRequest() {
    return ControllerReportStoreExtentMetricArgs_ReportMetricRequest_DEFAULT
  }
return p.ReportMetricRequest
}
func (p *ControllerReportStoreExtentMetricArgs) IsSetReportMetricRequest() bool {
  return p.ReportMetricRequest != nil
}

func (p *ControllerReportStoreExtentMetricArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportStoreExtentMetricArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.ReportMetricRequest = &ReportStoreExtentMetricRequest{}
  if err := p.ReportMetricRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReportMetricRequest), err)
  }
  return nil
}

func (p *ControllerReportStoreExtentMetricArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportStoreExtentMetric_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportStoreExtentMetricArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportMetricRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportMetricRequest: ", p), err) }
  if err := p.ReportMetricRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReportMetricRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportMetricRequest: ", p), err) }
  return err
}

func (p *ControllerReportStoreExtentMetricArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportStoreExtentMetricArgs(%+v)", *p)
}

type ControllerReportStoreExtentMetricResult struct {
}

func NewControllerReportStoreExtentMetricResult() *ControllerReportStoreExtentMetricResult {
  return &ControllerReportStoreExtentMetricResult{}
}

func (p *ControllerReportStoreExtentMetricResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerReportStoreExtentMetricResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportStoreExtentMetric_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerReportStoreExtentMetricResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerReportStoreExtentMetricResult(%+v)", *p)
}

// Attributes:
//  - UpsertCapacitiesRequest
type ControllerUpsertInputHostCapacitiesArgs struct {
  UpsertCapacitiesRequest *UpsertInputHostCapacitiesRequest `thrift:"upsertCapacitiesRequest,1" db:"upsertCapacitiesRequest" json:"upsertCapacitiesRequest"`
}

func NewControllerUpsertInputHostCapacitiesArgs() *ControllerUpsertInputHostCapacitiesArgs {
  return &ControllerUpsertInputHostCapacitiesArgs{}
}

var ControllerUpsertInputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT *UpsertInputHostCapacitiesRequest
func (p *ControllerUpsertInputHostCapacitiesArgs) GetUpsertCapacitiesRequest() *UpsertInputHostCapacitiesRequest {
  if !p.IsSetUpsertCapacitiesRequest() {
    return ControllerUpsertInputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT
  }
return p.UpsertCapacitiesRequest
}
func (p *ControllerUpsertInputHostCapacitiesArgs) IsSetUpsertCapacitiesRequest() bool {
  return p.UpsertCapacitiesRequest != nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpsertCapacitiesRequest = &UpsertInputHostCapacitiesRequest{}
  if err := p.UpsertCapacitiesRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpsertCapacitiesRequest), err)
  }
  return nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upsertInputHostCapacities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpsertInputHostCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upsertCapacitiesRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upsertCapacitiesRequest: ", p), err) }
  if err := p.UpsertCapacitiesRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpsertCapacitiesRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upsertCapacitiesRequest: ", p), err) }
  return err
}

func (p *ControllerUpsertInputHostCapacitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpsertInputHostCapacitiesArgs(%+v)", *p)
}

type ControllerUpsertInputHostCapacitiesResult struct {
}

func NewControllerUpsertInputHostCapacitiesResult() *ControllerUpsertInputHostCapacitiesResult {
  return &ControllerUpsertInputHostCapacitiesResult{}
}

func (p *ControllerUpsertInputHostCapacitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpsertInputHostCapacitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upsertInputHostCapacities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpsertInputHostCapacitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpsertInputHostCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - UpsertCapacitiesRequest
type ControllerUpsertOutputHostCapacitiesArgs struct {
  UpsertCapacitiesRequest *UpsertOutputHostCapacitiesRequest `thrift:"upsertCapacitiesRequest,1" db:"upsertCapacitiesRequest" json:"upsertCapacitiesRequest"`
}

func NewControllerUpsertOutputHostCapacitiesArgs() *ControllerUpsertOutputHostCapacitiesArgs {
  return &ControllerUpsertOutputHostCapacitiesArgs{}
}

var ControllerUpsertOutputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT *UpsertOutputHostCapacitiesRequest
func (p *ControllerUpsertOutputHostCapacitiesArgs) GetUpsertCapacitiesRequest() *UpsertOutputHostCapacitiesRequest {
  if !p.IsSetUpsertCapacitiesRequest() {
    return ControllerUpsertOutputHostCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT
  }
return p.UpsertCapacitiesRequest
}
func (p *ControllerUpsertOutputHostCapacitiesArgs) IsSetUpsertCapacitiesRequest() bool {
  return p.UpsertCapacitiesRequest != nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpsertCapacitiesRequest = &UpsertOutputHostCapacitiesRequest{}
  if err := p.UpsertCapacitiesRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpsertCapacitiesRequest), err)
  }
  return nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upsertOutputHostCapacities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upsertCapacitiesRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upsertCapacitiesRequest: ", p), err) }
  if err := p.UpsertCapacitiesRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpsertCapacitiesRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upsertCapacitiesRequest: ", p), err) }
  return err
}

func (p *ControllerUpsertOutputHostCapacitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpsertOutputHostCapacitiesArgs(%+v)", *p)
}

type ControllerUpsertOutputHostCapacitiesResult struct {
}

func NewControllerUpsertOutputHostCapacitiesResult() *ControllerUpsertOutputHostCapacitiesResult {
  return &ControllerUpsertOutputHostCapacitiesResult{}
}

func (p *ControllerUpsertOutputHostCapacitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpsertOutputHostCapacitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upsertOutputHostCapacities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpsertOutputHostCapacitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpsertOutputHostCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - UpsertCapacitiesRequest
type ControllerUpsertStoreCapacitiesArgs struct {
  UpsertCapacitiesRequest *UpsertStoreCapacitiesRequest `thrift:"upsertCapacitiesRequest,1" db:"upsertCapacitiesRequest" json:"upsertCapacitiesRequest"`
}

func NewControllerUpsertStoreCapacitiesArgs() *ControllerUpsertStoreCapacitiesArgs {
  return &ControllerUpsertStoreCapacitiesArgs{}
}

var ControllerUpsertStoreCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT *UpsertStoreCapacitiesRequest
func (p *ControllerUpsertStoreCapacitiesArgs) GetUpsertCapacitiesRequest() *UpsertStoreCapacitiesRequest {
  if !p.IsSetUpsertCapacitiesRequest() {
    return ControllerUpsertStoreCapacitiesArgs_UpsertCapacitiesRequest_DEFAULT
  }
return p.UpsertCapacitiesRequest
}
func (p *ControllerUpsertStoreCapacitiesArgs) IsSetUpsertCapacitiesRequest() bool {
  return p.UpsertCapacitiesRequest != nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpsertStoreCapacitiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UpsertCapacitiesRequest = &UpsertStoreCapacitiesRequest{}
  if err := p.UpsertCapacitiesRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UpsertCapacitiesRequest), err)
  }
  return nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upsertStoreCapacities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpsertStoreCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upsertCapacitiesRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:upsertCapacitiesRequest: ", p), err) }
  if err := p.UpsertCapacitiesRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UpsertCapacitiesRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:upsertCapacitiesRequest: ", p), err) }
  return err
}

func (p *ControllerUpsertStoreCapacitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpsertStoreCapacitiesArgs(%+v)", *p)
}

type ControllerUpsertStoreCapacitiesResult struct {
}

func NewControllerUpsertStoreCapacitiesResult() *ControllerUpsertStoreCapacitiesResult {
  return &ControllerUpsertStoreCapacitiesResult{}
}

func (p *ControllerUpsertStoreCapacitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerUpsertStoreCapacitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upsertStoreCapacities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerUpsertStoreCapacitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerUpsertStoreCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - RemoveCapacitiesRequest
type ControllerRemoveCapacitiesArgs struct {
  RemoveCapacitiesRequest *RemoveCapacitiesRequest `thrift:"removeCapacitiesRequest,1" db:"removeCapacitiesRequest" json:"removeCapacitiesRequest"`
}

func NewControllerRemoveCapacitiesArgs() *ControllerRemoveCapacitiesArgs {
  return &ControllerRemoveCapacitiesArgs{}
}

var ControllerRemoveCapacitiesArgs_RemoveCapacitiesRequest_DEFAULT *RemoveCapacitiesRequest
func (p *ControllerRemoveCapacitiesArgs) GetRemoveCapacitiesRequest() *RemoveCapacitiesRequest {
  if !p.IsSetRemoveCapacitiesRequest() {
    return ControllerRemoveCapacitiesArgs_RemoveCapacitiesRequest_DEFAULT
  }
return p.RemoveCapacitiesRequest
}
func (p *ControllerRemoveCapacitiesArgs) IsSetRemoveCapacitiesRequest() bool {
  return p.RemoveCapacitiesRequest != nil
}

func (p *ControllerRemoveCapacitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerRemoveCapacitiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RemoveCapacitiesRequest = &RemoveCapacitiesRequest{}
  if err := p.RemoveCapacitiesRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RemoveCapacitiesRequest), err)
  }
  return nil
}

func (p *ControllerRemoveCapacitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeCapacities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerRemoveCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("removeCapacitiesRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:removeCapacitiesRequest: ", p), err) }
  if err := p.RemoveCapacitiesRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RemoveCapacitiesRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:removeCapacitiesRequest: ", p), err) }
  return err
}

func (p *ControllerRemoveCapacitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerRemoveCapacitiesArgs(%+v)", *p)
}

type ControllerRemoveCapacitiesResult struct {
}

func NewControllerRemoveCapacitiesResult() *ControllerRemoveCapacitiesResult {
  return &ControllerRemoveCapacitiesResult{}
}

func (p *ControllerRemoveCapacitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerRemoveCapacitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeCapacities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerRemoveCapacitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerRemoveCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - GetCapacitiesRequest
type ControllerGetCapacitiesArgs struct {
  GetCapacitiesRequest *GetCapacitiesRequest `thrift:"getCapacitiesRequest,1" db:"getCapacitiesRequest" json:"getCapacitiesRequest"`
}

func NewControllerGetCapacitiesArgs() *ControllerGetCapacitiesArgs {
  return &ControllerGetCapacitiesArgs{}
}

var ControllerGetCapacitiesArgs_GetCapacitiesRequest_DEFAULT *GetCapacitiesRequest
func (p *ControllerGetCapacitiesArgs) GetGetCapacitiesRequest() *GetCapacitiesRequest {
  if !p.IsSetGetCapacitiesRequest() {
    return ControllerGetCapacitiesArgs_GetCapacitiesRequest_DEFAULT
  }
return p.GetCapacitiesRequest
}
func (p *ControllerGetCapacitiesArgs) IsSetGetCapacitiesRequest() bool {
  return p.GetCapacitiesRequest != nil
}

func (p *ControllerGetCapacitiesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetCapacitiesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetCapacitiesRequest = &GetCapacitiesRequest{}
  if err := p.GetCapacitiesRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetCapacitiesRequest), err)
  }
  return nil
}

func (p *ControllerGetCapacitiesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapacities_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetCapacitiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getCapacitiesRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getCapacitiesRequest: ", p), err) }
  if err := p.GetCapacitiesRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetCapacitiesRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getCapacitiesRequest: ", p), err) }
  return err
}

func (p *ControllerGetCapacitiesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetCapacitiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ControllerGetCapacitiesResult struct {
  Success *GetCapacitiesResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewControllerGetCapacitiesResult() *ControllerGetCapacitiesResult {
  return &ControllerGetCapacitiesResult{}
}

var ControllerGetCapacitiesResult_Success_DEFAULT *GetCapacitiesResult_
func (p *ControllerGetCapacitiesResult) GetSuccess() *GetCapacitiesResult_ {
  if !p.IsSetSuccess() {
    return ControllerGetCapacitiesResult_Success_DEFAULT
  }
return p.Success
}
func (p *ControllerGetCapacitiesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerGetCapacitiesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetCapacitiesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetCapacitiesResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerGetCapacitiesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCapacities_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetCapacitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerGetCapacitiesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetCapacitiesResult(%+v)", *p)
}

// Attributes:
//  - GetQueueDepthInfoRequest
type ControllerGetQueueDepthInfoArgs struct {
  GetQueueDepthInfoRequest *GetQueueDepthInfoRequest `thrift:"getQueueDepthInfoRequest,1" db:"getQueueDepthInfoRequest" json:"getQueueDepthInfoRequest"`
}

func NewControllerGetQueueDepthInfoArgs() *ControllerGetQueueDepthInfoArgs {
  return &ControllerGetQueueDepthInfoArgs{}
}

var ControllerGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT *GetQueueDepthInfoRequest
func (p *ControllerGetQueueDepthInfoArgs) GetGetQueueDepthInfoRequest() *GetQueueDepthInfoRequest {
  if !p.IsSetGetQueueDepthInfoRequest() {
    return ControllerGetQueueDepthInfoArgs_GetQueueDepthInfoRequest_DEFAULT
  }
return p.GetQueueDepthInfoRequest
}
func (p *ControllerGetQueueDepthInfoArgs) IsSetGetQueueDepthInfoRequest() bool {
  return p.GetQueueDepthInfoRequest != nil
}

func (p *ControllerGetQueueDepthInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetQueueDepthInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.GetQueueDepthInfoRequest = &GetQueueDepthInfoRequest{}
  if err := p.GetQueueDepthInfoRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetQueueDepthInfoRequest), err)
  }
  return nil
}

func (p *ControllerGetQueueDepthInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getQueueDepthInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetQueueDepthInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getQueueDepthInfoRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getQueueDepthInfoRequest: ", p), err) }
  if err := p.GetQueueDepthInfoRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetQueueDepthInfoRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getQueueDepthInfoRequest: ", p), err) }
  return err
}

func (p *ControllerGetQueueDepthInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetQueueDepthInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - CacheMissError
type ControllerGetQueueDepthInfoResult struct {
  Success *GetQueueDepthInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  CacheMissError *QueueCacheMissError `thrift:"cacheMissError,1" db:"cacheMissError" json:"cacheMissError,omitempty"`
}

func NewControllerGetQueueDepthInfoResult() *ControllerGetQueueDepthInfoResult {
  return &ControllerGetQueueDepthInfoResult{}
}

var ControllerGetQueueDepthInfoResult_Success_DEFAULT *GetQueueDepthInfoResult_
func (p *ControllerGetQueueDepthInfoResult) GetSuccess() *GetQueueDepthInfoResult_ {
  if !p.IsSetSuccess() {
    return ControllerGetQueueDepthInfoResult_Success_DEFAULT
  }
return p.Success
}
var ControllerGetQueueDepthInfoResult_CacheMissError_DEFAULT *QueueCacheMissError
func (p *ControllerGetQueueDepthInfoResult) GetCacheMissError() *QueueCacheMissError {
  if !p.IsSetCacheMissError() {
    return ControllerGetQueueDepthInfoResult_CacheMissError_DEFAULT
  }
return p.CacheMissError
}
func (p *ControllerGetQueueDepthInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ControllerGetQueueDepthInfoResult) IsSetCacheMissError() bool {
  return p.CacheMissError != nil
}

func (p *ControllerGetQueueDepthInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ControllerGetQueueDepthInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetQueueDepthInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ControllerGetQueueDepthInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.CacheMissError = &QueueCacheMissError{}
  if err := p.CacheMissError.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CacheMissError), err)
  }
  return nil
}

func (p *ControllerGetQueueDepthInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getQueueDepthInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ControllerGetQueueDepthInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ControllerGetQueueDepthInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCacheMissError() {
    if err := oprot.WriteFieldBegin("cacheMissError", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cacheMissError: ", p), err) }
    if err := p.CacheMissError.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CacheMissError), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cacheMissError: ", p), err) }
  }
  return err
}

func (p *ControllerGetQueueDepthInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ControllerGetQueueDepthInfoResult(%+v)", *p)
}


